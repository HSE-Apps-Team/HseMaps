{"ast":null,"code":"/**\r\n * @module FunctionHeatmapModule\r\n * @description Tracks and visualizes function usage patterns\r\n */\n\nconst functionStats = new Map();\nconst moduleStats = new Map();\nexport const FunctionHeatmapModule = {\n  /**\r\n   * Wraps a function to track its usage\r\n   * @param {Function} fn - Function to monitor\r\n   * @param {string} moduleName - Source module name\r\n   * @param {string} functionName - Function name\r\n   * @returns {Function} Wrapped function\r\n   */\n  monitor(fn, moduleName, functionName) {\n    if (typeof fn !== 'function') return fn;\n    return function monitored(...args) {\n      const key = `${moduleName}.${functionName}`;\n      const stats = functionStats.get(key) || {\n        calls: 0,\n        lastCalled: null\n      };\n      stats.calls++;\n      stats.lastCalled = Date.now();\n      functionStats.set(key, stats);\n\n      // Update module-level stats\n      const modStats = moduleStats.get(moduleName) || {\n        totalCalls: 0\n      };\n      modStats.totalCalls++;\n      moduleStats.set(moduleName, modStats);\n      return fn.apply(this, args);\n    };\n  },\n  /**\r\n   * Creates a visual heatmap of function usage\r\n   * @param {HTMLElement} container - Container element for visualization\r\n   */\n  visualize(container) {\n    const wrapper = document.createElement('div');\n    wrapper.className = 'function-heatmap';\n\n    // Sort by usage frequency\n    const sortedStats = Array.from(functionStats.entries()).sort((a, b) => b[1].calls - a[1].calls);\n    for (const [key, stats] of sortedStats) {\n      const el = document.createElement('div');\n      el.className = 'heatmap-item';\n\n      // Calculate \"heat\" color based on relative usage\n      const maxCalls = sortedStats[0][1].calls;\n      const intensity = Math.max(0.2, stats.calls / maxCalls);\n      el.style.backgroundColor = `rgba(255, 0, 0, ${intensity})`;\n      el.innerHTML = `\n                <span class=\"name\">${key}</span>\n                <span class=\"calls\">${stats.calls} calls</span>\n                <span class=\"last-called\">Last: ${new Date(stats.lastCalled).toLocaleString()}</span>\n            `;\n      wrapper.appendChild(el);\n    }\n    container.innerHTML = '';\n    container.appendChild(wrapper);\n  },\n  /**\r\n   * Export current statistics\r\n   * @returns {Object} Statistics data\r\n   */\n  exportStats() {\n    return {\n      functions: Object.fromEntries(functionStats),\n      modules: Object.fromEntries(moduleStats),\n      exportTime: new Date().toISOString()\n    };\n  },\n  /**\r\n   * Clear all statistics\r\n   */\n  reset() {\n    functionStats.clear();\n    moduleStats.clear();\n  }\n};","map":{"version":3,"names":["functionStats","Map","moduleStats","FunctionHeatmapModule","monitor","fn","moduleName","functionName","monitored","args","key","stats","get","calls","lastCalled","Date","now","set","modStats","totalCalls","apply","visualize","container","wrapper","document","createElement","className","sortedStats","Array","from","entries","sort","a","b","el","maxCalls","intensity","Math","max","style","backgroundColor","innerHTML","toLocaleString","appendChild","exportStats","functions","Object","fromEntries","modules","exportTime","toISOString","reset","clear"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/FunctionHeatmapModule.js"],"sourcesContent":["/**\r\n * @module FunctionHeatmapModule\r\n * @description Tracks and visualizes function usage patterns\r\n */\r\n\r\nconst functionStats = new Map();\r\nconst moduleStats = new Map();\r\n\r\nexport const FunctionHeatmapModule = {\r\n    /**\r\n     * Wraps a function to track its usage\r\n     * @param {Function} fn - Function to monitor\r\n     * @param {string} moduleName - Source module name\r\n     * @param {string} functionName - Function name\r\n     * @returns {Function} Wrapped function\r\n     */\r\n    monitor(fn, moduleName, functionName) {\r\n        if (typeof fn !== 'function') return fn;\r\n        \r\n        return function monitored(...args) {\r\n            const key = `${moduleName}.${functionName}`;\r\n            const stats = functionStats.get(key) || { calls: 0, lastCalled: null };\r\n            \r\n            stats.calls++;\r\n            stats.lastCalled = Date.now();\r\n            functionStats.set(key, stats);\r\n\r\n            // Update module-level stats\r\n            const modStats = moduleStats.get(moduleName) || { totalCalls: 0 };\r\n            modStats.totalCalls++;\r\n            moduleStats.set(moduleName, modStats);\r\n\r\n            return fn.apply(this, args);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Creates a visual heatmap of function usage\r\n     * @param {HTMLElement} container - Container element for visualization\r\n     */\r\n    visualize(container) {\r\n        const wrapper = document.createElement('div');\r\n        wrapper.className = 'function-heatmap';\r\n        \r\n        // Sort by usage frequency\r\n        const sortedStats = Array.from(functionStats.entries())\r\n            .sort((a, b) => b[1].calls - a[1].calls);\r\n\r\n        for (const [key, stats] of sortedStats) {\r\n            const el = document.createElement('div');\r\n            el.className = 'heatmap-item';\r\n            \r\n            // Calculate \"heat\" color based on relative usage\r\n            const maxCalls = sortedStats[0][1].calls;\r\n            const intensity = Math.max(0.2, stats.calls / maxCalls);\r\n            \r\n            el.style.backgroundColor = `rgba(255, 0, 0, ${intensity})`;\r\n            el.innerHTML = `\r\n                <span class=\"name\">${key}</span>\r\n                <span class=\"calls\">${stats.calls} calls</span>\r\n                <span class=\"last-called\">Last: ${new Date(stats.lastCalled).toLocaleString()}</span>\r\n            `;\r\n            \r\n            wrapper.appendChild(el);\r\n        }\r\n\r\n        container.innerHTML = '';\r\n        container.appendChild(wrapper);\r\n    },\r\n\r\n    /**\r\n     * Export current statistics\r\n     * @returns {Object} Statistics data\r\n     */\r\n    exportStats() {\r\n        return {\r\n            functions: Object.fromEntries(functionStats),\r\n            modules: Object.fromEntries(moduleStats),\r\n            exportTime: new Date().toISOString()\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Clear all statistics\r\n     */\r\n    reset() {\r\n        functionStats.clear();\r\n        moduleStats.clear();\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}