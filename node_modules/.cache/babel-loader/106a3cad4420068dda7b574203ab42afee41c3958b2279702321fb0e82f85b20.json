{"ast":null,"code":"import{Config}from'../config/config.js';import{SVGCreator}from'./SVGCreator.js';import{StateManager}from'./StateManager.js';import{UtilityModule}from'./UtilityModule.js';/**\r\n * RenderingModule - Handles SVG element creation and manipulation\r\n * Manages path visualization, agent movement, and viewport control\r\n * \r\n * @module RenderingModule\r\n */export const RenderingModule={/**\r\n     * Creates and appends SVG points and agent for path visualization\r\n     * @param {number[]} points - Array of vertex coordinates\r\n     * @param {object} graph - SVG graph container element\r\n     * @returns {SVGPolylineElement} Created path line element\r\n     * \r\n     * @example\r\n     * // Given vertices at [(100,100), (200,200)]\r\n     * createLine([[100,100], [200,200]], graphElement)\r\n     * // Creates: <polyline points=\"100,100 200,200\" class=\"line gen\"/>\r\n     */createLine(points){let graph=arguments.length>1&&arguments[1]!==undefined?arguments[1]:document.querySelector(\"svg > g > g > g\");const path=SVGCreator.createElement('polyline',{points,class:'line gen'});graph.insertAdjacentElement(\"beforeend\",path);return path;},selectPath(path,verts){let start=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"startpt\";let end=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"endpt\";let graph=arguments.length>4&&arguments[4]!==undefined?arguments[4]:document.getElementById(\"graph\");const image=document.querySelector(Config.SVG.SELECTORS.IMAGE);image.href.baseVal=path[0]>Config.THRESHOLD.FLOOR_CHANGE?Config.PATHS.COMB_SCALED:Config.PATHS.MAIN_FLOOR;const points=path.map(p=>\"\".concat(verts[p].x,\",\").concat(verts[p].y)).join(' ');const line=this.createLine(points,graph);line.classList.add(\"selected\");const startPoint=SVGCreator.createElement('circle',{'cx.baseVal':verts[path[0]].x,'cy.baseVal':verts[path[0]].y,'r.baseVal':10,id:start},['gen']);const agent=startPoint.cloneNode(true);agent.id='agent';const endPoint=SVGCreator.createElement('circle',{'cx.baseVal':verts[path[path.length-1]].x,'cy.baseVal':verts[path[path.length-1]].y,'r.baseVal':10,id:end},['gen']);[startPoint,agent,endPoint].forEach(el=>graph.insertAdjacentElement(\"beforeend\",el));UtilityModule.updateAgent();return line;},/**\r\n     * Updates viewport focus to center on specified element\r\n     * @param {SVGElement} element - Element to focus on\r\n     * @param {number} margin - Padding around focused element\r\n     * @param {SVGSVGElement} svg - SVG container element\r\n     * \r\n     * @example\r\n     * // Given:\r\n     * element = <circle cx=\"150\" cy=\"150\" r=\"10\"/>\r\n     * margin = 20\r\n     * \r\n     * focus(element, 20)\r\n     * // Results in viewBox:\r\n     * // x = 140 (150 - 20/2)\r\n     * // y = 140 (150 - 20/2)\r\n     * // width = element.width + 20\r\n     * // height = element.height + 20\r\n     */focus(element){let margin=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;let svg=arguments.length>2&&arguments[2]!==undefined?arguments[2]:document.getElementById(\"svg\");const map=svg.viewBox.baseVal;const focus=element.getBBox();map.x=focus.x-margin/2;map.y=focus.y-margin/2;map.width=focus.width+margin;map.height=focus.height+margin;},/**\r\n     * Clears current path visualization and resets navigation state\r\n     * Removes all generated elements and resets transition flags\r\n     * \r\n     * @example\r\n     * // Before:\r\n     * // <polyline class=\"gen\"/>\r\n     * // <circle class=\"gen\"/>\r\n     * refresh()\r\n     * // After:\r\n     * // - All elements with class \"gen\" removed\r\n     * // - skipStart = true\r\n     * // - skipEnd = false\r\n     */refresh(){const selected=document.getElementsByClassName(\"gen\");Array.from(selected).forEach(el=>el.remove());StateManager.set('skipStart',()=>true);StateManager.set('skipEnd',()=>false);}};","map":{"version":3,"names":["Config","SVGCreator","StateManager","UtilityModule","RenderingModule","createLine","points","graph","arguments","length","undefined","document","querySelector","path","createElement","class","insertAdjacentElement","selectPath","verts","start","end","getElementById","image","SVG","SELECTORS","IMAGE","href","baseVal","THRESHOLD","FLOOR_CHANGE","PATHS","COMB_SCALED","MAIN_FLOOR","map","p","concat","x","y","join","line","classList","add","startPoint","id","agent","cloneNode","endPoint","forEach","el","updateAgent","focus","element","margin","svg","viewBox","getBBox","width","height","refresh","selected","getElementsByClassName","Array","from","remove","set"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/RenderingModule.js"],"sourcesContent":["import { Config } from '../config/config.js';\r\nimport { SVGCreator } from './SVGCreator.js';\r\nimport { StateManager } from './StateManager.js';\r\nimport { UtilityModule } from './UtilityModule.js';\r\n\r\n/**\r\n * RenderingModule - Handles SVG element creation and manipulation\r\n * Manages path visualization, agent movement, and viewport control\r\n * \r\n * @module RenderingModule\r\n */\r\nexport const RenderingModule = {\r\n    /**\r\n     * Creates and appends SVG points and agent for path visualization\r\n     * @param {number[]} points - Array of vertex coordinates\r\n     * @param {object} graph - SVG graph container element\r\n     * @returns {SVGPolylineElement} Created path line element\r\n     * \r\n     * @example\r\n     * // Given vertices at [(100,100), (200,200)]\r\n     * createLine([[100,100], [200,200]], graphElement)\r\n     * // Creates: <polyline points=\"100,100 200,200\" class=\"line gen\"/>\r\n     */\r\n    createLine(points, graph = document.querySelector(\"svg > g > g > g\")) {\r\n        const path = SVGCreator.createElement('polyline', {\r\n            points,\r\n            class: 'line gen'\r\n        });\r\n        graph.insertAdjacentElement(\"beforeend\", path);\r\n        return path;\r\n    },\r\n\r\n    selectPath(path, verts, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\r\n        const image = document.querySelector(Config.SVG.SELECTORS.IMAGE);\r\n        image.href.baseVal = path[0] > Config.THRESHOLD.FLOOR_CHANGE \r\n            ? Config.PATHS.COMB_SCALED \r\n            : Config.PATHS.MAIN_FLOOR;\r\n\r\n        const points = path.map(p => `${verts[p].x},${verts[p].y}`).join(' ');\r\n        const line = this.createLine(points, graph);\r\n        line.classList.add(\"selected\");\r\n\r\n        const startPoint = SVGCreator.createElement('circle', {\r\n            'cx.baseVal': verts[path[0]].x,\r\n            'cy.baseVal': verts[path[0]].y,\r\n            'r.baseVal': 10,\r\n            id: start\r\n        }, ['gen']);\r\n\r\n        const agent = startPoint.cloneNode(true);\r\n        agent.id = 'agent';\r\n\r\n        const endPoint = SVGCreator.createElement('circle', {\r\n            'cx.baseVal': verts[path[path.length - 1]].x,\r\n            'cy.baseVal': verts[path[path.length - 1]].y,\r\n            'r.baseVal': 10,\r\n            id: end\r\n        }, ['gen']);\r\n\r\n        [startPoint, agent, endPoint].forEach(el => \r\n            graph.insertAdjacentElement(\"beforeend\", el));\r\n\r\n        UtilityModule.updateAgent();\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Updates viewport focus to center on specified element\r\n     * @param {SVGElement} element - Element to focus on\r\n     * @param {number} margin - Padding around focused element\r\n     * @param {SVGSVGElement} svg - SVG container element\r\n     * \r\n     * @example\r\n     * // Given:\r\n     * element = <circle cx=\"150\" cy=\"150\" r=\"10\"/>\r\n     * margin = 20\r\n     * \r\n     * focus(element, 20)\r\n     * // Results in viewBox:\r\n     * // x = 140 (150 - 20/2)\r\n     * // y = 140 (150 - 20/2)\r\n     * // width = element.width + 20\r\n     * // height = element.height + 20\r\n     */\r\n    focus(element, margin = 5, svg = document.getElementById(\"svg\")) {\r\n        const map = svg.viewBox.baseVal;\r\n        const focus = element.getBBox();\r\n        map.x = focus.x - margin / 2;\r\n        map.y = focus.y - margin / 2;\r\n        map.width = focus.width + margin;\r\n        map.height = focus.height + margin;\r\n    },\r\n\r\n    /**\r\n     * Clears current path visualization and resets navigation state\r\n     * Removes all generated elements and resets transition flags\r\n     * \r\n     * @example\r\n     * // Before:\r\n     * // <polyline class=\"gen\"/>\r\n     * // <circle class=\"gen\"/>\r\n     * refresh()\r\n     * // After:\r\n     * // - All elements with class \"gen\" removed\r\n     * // - skipStart = true\r\n     * // - skipEnd = false\r\n     */\r\n    refresh() {\r\n        const selected = document.getElementsByClassName(\"gen\");\r\n        Array.from(selected).forEach(el => el.remove());\r\n        StateManager.set('skipStart', () => true);\r\n        StateManager.set('skipEnd', () => false);\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}