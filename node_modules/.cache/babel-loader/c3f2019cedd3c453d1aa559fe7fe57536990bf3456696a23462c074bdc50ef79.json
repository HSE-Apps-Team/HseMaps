{"ast":null,"code":"/**\r\n * @module ScheduleManager\r\n * @description Manages the storage and retrieval of room schedules by day.\r\n * Handles deduplication and persistence of schedule data in localStorage.\r\n */\n\nexport const ScheduleManager = {\n  /**\r\n   * @function save\r\n   * @param {string} day - The day identifier for the schedule\r\n   * @param {string[]} rooms - Array of room identifiers\r\n   * @returns {string[]} Array of unique room identifiers\r\n   * @throws {Error} If day is invalid or rooms is not an array\r\n   * @description Saves a daily schedule of rooms with automatic deduplication\r\n   */\n  save(day, rooms) {\n    if (!day || !Array.isArray(rooms)) {\n      throw new Error('Invalid schedule data');\n    }\n    try {\n      const uniqueRooms = [...new Set(rooms)];\n      if (uniqueRooms.length !== rooms.length) {\n        const duplicates = rooms.filter((room, index) => rooms.indexOf(room) !== index);\n        this.notifyUser(`Removed duplicate rooms: ${duplicates.join(', ')}`);\n      }\n      localStorage.setItem(`schedule_${day}`, JSON.stringify(uniqueRooms));\n      return uniqueRooms;\n    } catch (error) {\n      console.error('Failed to save schedule:', error);\n      throw new Error('Failed to save schedule');\n    }\n  },\n  /**\r\n   * @function load\r\n   * @param {string} day - The day identifier to load the schedule for\r\n   * @returns {string[]} Array of room identifiers, empty if none found\r\n   * @description Loads and deduplicates a daily schedule from storage\r\n   */\n  load(day) {\n    try {\n      const schedule = localStorage.getItem(`schedule_${day}`);\n      if (!schedule) return [];\n      const rooms = JSON.parse(schedule);\n      // Clean up any duplicates from old data\n      const uniqueRooms = [...new Set(rooms)];\n      if (uniqueRooms.length !== rooms.length) {\n        this.save(day, uniqueRooms); // Update storage with deduplicated list\n      }\n      return uniqueRooms;\n    } catch (error) {\n      console.error('Failed to load schedule:', error);\n      return [];\n    }\n  },\n  /**\r\n   * @function notifyUser\r\n   * @param {string} message - The notification message\r\n   * @description Dispatches a custom event for schedule-related notifications\r\n   */\n  notifyUser(message) {\n    const event = new CustomEvent('schedule-notification', {\n      detail: {\n        message\n      }\n    });\n    window.dispatchEvent(event);\n  }\n};","map":{"version":3,"names":["ScheduleManager","save","day","rooms","Array","isArray","Error","uniqueRooms","Set","length","duplicates","filter","room","index","indexOf","notifyUser","join","localStorage","setItem","JSON","stringify","error","console","load","schedule","getItem","parse","message","event","CustomEvent","detail","window","dispatchEvent"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/ScheduleManager.js"],"sourcesContent":["/**\r\n * @module ScheduleManager\r\n * @description Manages the storage and retrieval of room schedules by day.\r\n * Handles deduplication and persistence of schedule data in localStorage.\r\n */\r\n\r\nexport const ScheduleManager = {\r\n    /**\r\n     * @function save\r\n     * @param {string} day - The day identifier for the schedule\r\n     * @param {string[]} rooms - Array of room identifiers\r\n     * @returns {string[]} Array of unique room identifiers\r\n     * @throws {Error} If day is invalid or rooms is not an array\r\n     * @description Saves a daily schedule of rooms with automatic deduplication\r\n     */\r\n    save(day, rooms) {\r\n        if (!day || !Array.isArray(rooms)) {\r\n            throw new Error('Invalid schedule data');\r\n        }\r\n\r\n        try {\r\n            const uniqueRooms = [...new Set(rooms)];\r\n            if (uniqueRooms.length !== rooms.length) {\r\n                const duplicates = rooms.filter((room, index) => rooms.indexOf(room) !== index);\r\n                this.notifyUser(`Removed duplicate rooms: ${duplicates.join(', ')}`);\r\n            }\r\n\r\n            localStorage.setItem(`schedule_${day}`, JSON.stringify(uniqueRooms));\r\n            return uniqueRooms;\r\n        } catch (error) {\r\n            console.error('Failed to save schedule:', error);\r\n            throw new Error('Failed to save schedule');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @function load\r\n     * @param {string} day - The day identifier to load the schedule for\r\n     * @returns {string[]} Array of room identifiers, empty if none found\r\n     * @description Loads and deduplicates a daily schedule from storage\r\n     */\r\n    load(day) {\r\n        try {\r\n            const schedule = localStorage.getItem(`schedule_${day}`);\r\n            if (!schedule) return [];\r\n\r\n            const rooms = JSON.parse(schedule);\r\n            // Clean up any duplicates from old data\r\n            const uniqueRooms = [...new Set(rooms)];\r\n            \r\n            if (uniqueRooms.length !== rooms.length) {\r\n                this.save(day, uniqueRooms); // Update storage with deduplicated list\r\n            }\r\n\r\n            return uniqueRooms;\r\n        } catch (error) {\r\n            console.error('Failed to load schedule:', error);\r\n            return [];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @function notifyUser\r\n     * @param {string} message - The notification message\r\n     * @description Dispatches a custom event for schedule-related notifications\r\n     */\r\n    notifyUser(message) {\r\n        const event = new CustomEvent('schedule-notification', {\r\n            detail: { message }\r\n        });\r\n        window.dispatchEvent(event);\r\n    }\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,eAAe,GAAG;EAC3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,IAAIA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACb,IAAI,CAACD,GAAG,IAAI,CAACE,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MAC/B,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IAEA,IAAI;MACA,MAAMC,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACL,KAAK,CAAC,CAAC;MACvC,IAAII,WAAW,CAACE,MAAM,KAAKN,KAAK,CAACM,MAAM,EAAE;QACrC,MAAMC,UAAU,GAAGP,KAAK,CAACQ,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKV,KAAK,CAACW,OAAO,CAACF,IAAI,CAAC,KAAKC,KAAK,CAAC;QAC/E,IAAI,CAACE,UAAU,CAAC,4BAA4BL,UAAU,CAACM,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;MACxE;MAEAC,YAAY,CAACC,OAAO,CAAC,YAAYhB,GAAG,EAAE,EAAEiB,IAAI,CAACC,SAAS,CAACb,WAAW,CAAC,CAAC;MACpE,OAAOA,WAAW;IACtB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAIf,KAAK,CAAC,yBAAyB,CAAC;IAC9C;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIiB,IAAIA,CAACrB,GAAG,EAAE;IACN,IAAI;MACA,MAAMsB,QAAQ,GAAGP,YAAY,CAACQ,OAAO,CAAC,YAAYvB,GAAG,EAAE,CAAC;MACxD,IAAI,CAACsB,QAAQ,EAAE,OAAO,EAAE;MAExB,MAAMrB,KAAK,GAAGgB,IAAI,CAACO,KAAK,CAACF,QAAQ,CAAC;MAClC;MACA,MAAMjB,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACL,KAAK,CAAC,CAAC;MAEvC,IAAII,WAAW,CAACE,MAAM,KAAKN,KAAK,CAACM,MAAM,EAAE;QACrC,IAAI,CAACR,IAAI,CAACC,GAAG,EAAEK,WAAW,CAAC,CAAC,CAAC;MACjC;MAEA,OAAOA,WAAW;IACtB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACb;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIN,UAAUA,CAACY,OAAO,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,uBAAuB,EAAE;MACnDC,MAAM,EAAE;QAAEH;MAAQ;IACtB,CAAC,CAAC;IACFI,MAAM,CAACC,aAAa,CAACJ,KAAK,CAAC;EAC/B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}