{"ast":null,"code":"/**\r\n * StateManager - Central state management for path navigation\r\n * Uses Proxy for reactive state updates and floor transition handling\r\n * \r\n * @module StateManager\r\n */\nexport const StateManager = (() => {\n  /**\r\n   * Internal state object with Proxy wrapper\r\n   * @type {Proxy}\r\n   * \r\n   * State Properties:\r\n   * @property {number} totalDistance - Total path length across all floors\r\n   * @property {boolean} firstPathRendered - Whether first floor path is active\r\n   * @property {boolean} secondPathRendered - Whether second floor path is active\r\n   * @property {string} currentFloor - Current active floor ('main'|'second')\r\n   * @property {Function} skipStart - Controls start point rendering\r\n   * @property {Function} skipEnd - Controls end point rendering\r\n   * @property {Function} onPathStart - Callback for first floor transition\r\n   * @property {Function} onPathEnd - Callback for second floor transition\r\n   * @property {number} iterator - Current position in navigation sequence\r\n   * @property {Array} path - Array to store the path\r\n   * @property {Array} distanceDomain - Array to store the distance domain\r\n   * @property {Object|null} currentPathSegment - Current path segment\r\n   * \r\n   * @example State structure\r\n   * state = {\r\n   *   totalDistance: 150,      // Path length in pixels\r\n   *   firstPathRendered: true, // On first floor\r\n   *   secondPathRendered: false,// Second floor not active\r\n   *   currentFloor: 'main',    // Currently on main floor\r\n   *   skipStart: () => true,   // Skip start point\r\n   *   skipEnd: () => false,    // Show end point\r\n   *   onPathStart: () => {},   // Floor transition callback\r\n   *   onPathEnd: () => {},     // Floor transition callback\r\n   *   iterator: 1,             // First waypoint\r\n   *   path: [],                // Path array\r\n   *   distanceDomain: [],      // Distance domain array\r\n   *   currentPathSegment: null // Current path segment\r\n   * }\r\n   */\n  const state = new Proxy({\n    totalDistance: 0,\n    firstPathRendered: true,\n    secondPathRendered: false,\n    currentFloor: 'main',\n    skipStart: () => true,\n    skipEnd: () => false,\n    onPathStart: () => {},\n    onPathEnd: () => {},\n    iterator: 1,\n    path: [],\n    distanceDomain: [],\n    currentPathSegment: null\n  }, {\n    /**\r\n     * Proxy trap for state updates\r\n     * Handles floor transitions when secondPathRendered changes\r\n     * \r\n     * @example Floor transition\r\n     * StateManager.set('secondPathRendered', true)\r\n     * // Results in:\r\n     * // - secondPathRendered = true\r\n     * // - currentFloor = 'second'\r\n     */\n    set(target, key, value) {\n      target[key] = value;\n      if (key === 'secondPathRendered') {\n        target.currentFloor = value ? 'second' : 'main';\n      }\n      return true;\n    }\n  });\n\n  /**\r\n   * Public interface for state management\r\n   * @example Usage\r\n   * // Get single value\r\n   * StateManager.get('totalDistance') // Returns: 150\r\n   * \r\n   * // Get entire state\r\n   * StateManager.get() // Returns: {...state}\r\n   * \r\n   * // Set state value\r\n   * StateManager.set('totalDistance', 200)\r\n   * // Results in state.totalDistance = 200\r\n   * \r\n   * // Set floor transition\r\n   * StateManager.set('secondPathRendered', true)\r\n   * // Results in:\r\n   * // - state.secondPathRendered = true\r\n   * // - state.currentFloor = 'second'\r\n   */\n  return {\n    get: key => key ? state[key] : state,\n    set: (key, value) => {\n      state[key] = value;\n    }\n  };\n})();","map":{"version":3,"names":["StateManager","state","Proxy","totalDistance","firstPathRendered","secondPathRendered","currentFloor","skipStart","skipEnd","onPathStart","onPathEnd","iterator","path","distanceDomain","currentPathSegment","set","target","key","value","get"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/StateManager.js"],"sourcesContent":["/**\r\n * StateManager - Central state management for path navigation\r\n * Uses Proxy for reactive state updates and floor transition handling\r\n * \r\n * @module StateManager\r\n */\r\nexport const StateManager = (() => {\r\n    /**\r\n     * Internal state object with Proxy wrapper\r\n     * @type {Proxy}\r\n     * \r\n     * State Properties:\r\n     * @property {number} totalDistance - Total path length across all floors\r\n     * @property {boolean} firstPathRendered - Whether first floor path is active\r\n     * @property {boolean} secondPathRendered - Whether second floor path is active\r\n     * @property {string} currentFloor - Current active floor ('main'|'second')\r\n     * @property {Function} skipStart - Controls start point rendering\r\n     * @property {Function} skipEnd - Controls end point rendering\r\n     * @property {Function} onPathStart - Callback for first floor transition\r\n     * @property {Function} onPathEnd - Callback for second floor transition\r\n     * @property {number} iterator - Current position in navigation sequence\r\n     * @property {Array} path - Array to store the path\r\n     * @property {Array} distanceDomain - Array to store the distance domain\r\n     * @property {Object|null} currentPathSegment - Current path segment\r\n     * \r\n     * @example State structure\r\n     * state = {\r\n     *   totalDistance: 150,      // Path length in pixels\r\n     *   firstPathRendered: true, // On first floor\r\n     *   secondPathRendered: false,// Second floor not active\r\n     *   currentFloor: 'main',    // Currently on main floor\r\n     *   skipStart: () => true,   // Skip start point\r\n     *   skipEnd: () => false,    // Show end point\r\n     *   onPathStart: () => {},   // Floor transition callback\r\n     *   onPathEnd: () => {},     // Floor transition callback\r\n     *   iterator: 1,             // First waypoint\r\n     *   path: [],                // Path array\r\n     *   distanceDomain: [],      // Distance domain array\r\n     *   currentPathSegment: null // Current path segment\r\n     * }\r\n     */\r\n    const state = new Proxy({\r\n        totalDistance: 0,\r\n        firstPathRendered: true,\r\n        secondPathRendered: false,\r\n        currentFloor: 'main',\r\n        skipStart: () => true,\r\n        skipEnd: () => false,\r\n        onPathStart: () => {},\r\n        onPathEnd: () => {},\r\n        iterator: 1,\r\n        path: [],\r\n        distanceDomain: [],\r\n        currentPathSegment: null\r\n    }, {\r\n        /**\r\n         * Proxy trap for state updates\r\n         * Handles floor transitions when secondPathRendered changes\r\n         * \r\n         * @example Floor transition\r\n         * StateManager.set('secondPathRendered', true)\r\n         * // Results in:\r\n         * // - secondPathRendered = true\r\n         * // - currentFloor = 'second'\r\n         */\r\n        set(target, key, value) {\r\n            target[key] = value;\r\n            if (key === 'secondPathRendered') {\r\n                target.currentFloor = value ? 'second' : 'main';\r\n            }\r\n            return true;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Public interface for state management\r\n     * @example Usage\r\n     * // Get single value\r\n     * StateManager.get('totalDistance') // Returns: 150\r\n     * \r\n     * // Get entire state\r\n     * StateManager.get() // Returns: {...state}\r\n     * \r\n     * // Set state value\r\n     * StateManager.set('totalDistance', 200)\r\n     * // Results in state.totalDistance = 200\r\n     * \r\n     * // Set floor transition\r\n     * StateManager.set('secondPathRendered', true)\r\n     * // Results in:\r\n     * // - state.secondPathRendered = true\r\n     * // - state.currentFloor = 'second'\r\n     */\r\n    return {\r\n        get: key => key ? state[key] : state,\r\n        set: (key, value) => { state[key] = value; }\r\n    };\r\n})();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG,CAAC,MAAM;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC;IACpBC,aAAa,EAAE,CAAC;IAChBC,iBAAiB,EAAE,IAAI;IACvBC,kBAAkB,EAAE,KAAK;IACzBC,YAAY,EAAE,MAAM;IACpBC,SAAS,EAAEA,CAAA,KAAM,IAAI;IACrBC,OAAO,EAAEA,CAAA,KAAM,KAAK;IACpBC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;IACrBC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAC;IACnBC,QAAQ,EAAE,CAAC;IACXC,IAAI,EAAE,EAAE;IACRC,cAAc,EAAE,EAAE;IAClBC,kBAAkB,EAAE;EACxB,CAAC,EAAE;IACC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAGA,CAACC,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAE;MACpBF,MAAM,CAACC,GAAG,CAAC,GAAGC,KAAK;MACnB,IAAID,GAAG,KAAK,oBAAoB,EAAE;QAC9BD,MAAM,CAACV,YAAY,GAAGY,KAAK,GAAG,QAAQ,GAAG,MAAM;MACnD;MACA,OAAO,IAAI;IACf;EACJ,CAAC,CAAC;;EAEF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO;IACHC,GAAG,EAAEF,GAAG,IAAIA,GAAG,GAAGhB,KAAK,CAACgB,GAAG,CAAC,GAAGhB,KAAK;IACpCc,GAAG,EAAEA,CAACE,GAAG,EAAEC,KAAK,KAAK;MAAEjB,KAAK,CAACgB,GAAG,CAAC,GAAGC,KAAK;IAAE;EAC/C,CAAC;AACL,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}