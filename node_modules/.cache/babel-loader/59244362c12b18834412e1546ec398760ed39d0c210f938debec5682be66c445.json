{"ast":null,"code":"/**\r\n * StateManager - Central state management for path navigation\r\n * Uses Proxy for reactive state updates and floor transition handling\r\n * \r\n * @module StateManager\r\n */export const StateManager=(()=>{/**\r\n     * Internal state object with Proxy wrapper\r\n     * @type {Proxy}\r\n     * \r\n     * State Properties:\r\n     * @property {number} totalDistance - Total path length across all floors\r\n     * @property {boolean} firstPathRendered - Whether first floor path is active\r\n     * @property {boolean} secondPathRendered - Whether second floor path is active\r\n     * @property {string} currentFloor - Current active floor ('main'|'second')\r\n     * @property {Function} skipStart - Controls start point rendering\r\n     * @property {Function} skipEnd - Controls end point rendering\r\n     * @property {Function} onPathStart - Callback for first floor transition\r\n     * @property {Function} onPathEnd - Callback for second floor transition\r\n     * @property {number} iterator - Current position in navigation sequence\r\n     * @property {Array} path - Array to store the path\r\n     * @property {Array} distanceDomain - Array to store the distance domain\r\n     * @property {Object|null} currentPathSegment - Current path segment\r\n     * \r\n     * @example State structure\r\n     * state = {\r\n     *   totalDistance: 150,      // Path length in pixels\r\n     *   firstPathRendered: true, // On first floor\r\n     *   secondPathRendered: false,// Second floor not active\r\n     *   currentFloor: 'main',    // Currently on main floor\r\n     *   skipStart: () => true,   // Skip start point\r\n     *   skipEnd: () => false,    // Show end point\r\n     *   onPathStart: () => {},   // Floor transition callback\r\n     *   onPathEnd: () => {},     // Floor transition callback\r\n     *   iterator: 1,             // First waypoint\r\n     *   path: [],                // Path array\r\n     *   distanceDomain: [],      // Distance domain array\r\n     *   currentPathSegment: null // Current path segment\r\n     * }\r\n     */const state=new Proxy({totalDistance:0,firstPathRendered:true,secondPathRendered:false,currentFloor:'main',skipStart:()=>true,skipEnd:()=>false,onPathStart:()=>{},onPathEnd:()=>{},iterator:1,path:[],distanceDomain:[],currentPathSegment:null},{/**\r\n         * Proxy trap for state updates\r\n         * Handles floor transitions when secondPathRendered changes\r\n         * \r\n         * @example Floor transition\r\n         * StateManager.set('secondPathRendered', true)\r\n         * // Results in:\r\n         * // - secondPathRendered = true\r\n         * // - currentFloor = 'second'\r\n         */set(target,key,value){target[key]=value;if(key==='secondPathRendered'){target.currentFloor=value?'second':'main';}return true;}});/**\r\n     * Public interface for state management\r\n     * @example Usage\r\n     * // Get single value\r\n     * StateManager.get('totalDistance') // Returns: 150\r\n     * \r\n     * // Get entire state\r\n     * StateManager.get() // Returns: {...state}\r\n     * \r\n     * // Set state value\r\n     * StateManager.set('totalDistance', 200)\r\n     * // Results in state.totalDistance = 200\r\n     * \r\n     * // Set floor transition\r\n     * StateManager.set('secondPathRendered', true)\r\n     * // Results in:\r\n     * // - state.secondPathRendered = true\r\n     * // - state.currentFloor = 'second'\r\n     */return{get:key=>key?state[key]:state,set:(key,value)=>{state[key]=value;}};})();","map":{"version":3,"names":["StateManager","state","Proxy","totalDistance","firstPathRendered","secondPathRendered","currentFloor","skipStart","skipEnd","onPathStart","onPathEnd","iterator","path","distanceDomain","currentPathSegment","set","target","key","value","get"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/StateManager.js"],"sourcesContent":["/**\r\n * StateManager - Central state management for path navigation\r\n * Uses Proxy for reactive state updates and floor transition handling\r\n * \r\n * @module StateManager\r\n */\r\nexport const StateManager = (() => {\r\n    /**\r\n     * Internal state object with Proxy wrapper\r\n     * @type {Proxy}\r\n     * \r\n     * State Properties:\r\n     * @property {number} totalDistance - Total path length across all floors\r\n     * @property {boolean} firstPathRendered - Whether first floor path is active\r\n     * @property {boolean} secondPathRendered - Whether second floor path is active\r\n     * @property {string} currentFloor - Current active floor ('main'|'second')\r\n     * @property {Function} skipStart - Controls start point rendering\r\n     * @property {Function} skipEnd - Controls end point rendering\r\n     * @property {Function} onPathStart - Callback for first floor transition\r\n     * @property {Function} onPathEnd - Callback for second floor transition\r\n     * @property {number} iterator - Current position in navigation sequence\r\n     * @property {Array} path - Array to store the path\r\n     * @property {Array} distanceDomain - Array to store the distance domain\r\n     * @property {Object|null} currentPathSegment - Current path segment\r\n     * \r\n     * @example State structure\r\n     * state = {\r\n     *   totalDistance: 150,      // Path length in pixels\r\n     *   firstPathRendered: true, // On first floor\r\n     *   secondPathRendered: false,// Second floor not active\r\n     *   currentFloor: 'main',    // Currently on main floor\r\n     *   skipStart: () => true,   // Skip start point\r\n     *   skipEnd: () => false,    // Show end point\r\n     *   onPathStart: () => {},   // Floor transition callback\r\n     *   onPathEnd: () => {},     // Floor transition callback\r\n     *   iterator: 1,             // First waypoint\r\n     *   path: [],                // Path array\r\n     *   distanceDomain: [],      // Distance domain array\r\n     *   currentPathSegment: null // Current path segment\r\n     * }\r\n     */\r\n    const state = new Proxy({\r\n        totalDistance: 0,\r\n        firstPathRendered: true,\r\n        secondPathRendered: false,\r\n        currentFloor: 'main',\r\n        skipStart: () => true,\r\n        skipEnd: () => false,\r\n        onPathStart: () => {},\r\n        onPathEnd: () => {},\r\n        iterator: 1,\r\n        path: [],\r\n        distanceDomain: [],\r\n        currentPathSegment: null\r\n    }, {\r\n        /**\r\n         * Proxy trap for state updates\r\n         * Handles floor transitions when secondPathRendered changes\r\n         * \r\n         * @example Floor transition\r\n         * StateManager.set('secondPathRendered', true)\r\n         * // Results in:\r\n         * // - secondPathRendered = true\r\n         * // - currentFloor = 'second'\r\n         */\r\n        set(target, key, value) {\r\n            target[key] = value;\r\n            if (key === 'secondPathRendered') {\r\n                target.currentFloor = value ? 'second' : 'main';\r\n            }\r\n            return true;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Public interface for state management\r\n     * @example Usage\r\n     * // Get single value\r\n     * StateManager.get('totalDistance') // Returns: 150\r\n     * \r\n     * // Get entire state\r\n     * StateManager.get() // Returns: {...state}\r\n     * \r\n     * // Set state value\r\n     * StateManager.set('totalDistance', 200)\r\n     * // Results in state.totalDistance = 200\r\n     * \r\n     * // Set floor transition\r\n     * StateManager.set('secondPathRendered', true)\r\n     * // Results in:\r\n     * // - state.secondPathRendered = true\r\n     * // - state.currentFloor = 'second'\r\n     */\r\n    return {\r\n        get: key => key ? state[key] : state,\r\n        set: (key, value) => { state[key] = value; }\r\n    };\r\n})();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,YAAY,CAAG,CAAC,IAAM,CAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,KAAK,CAAC,CACpBC,aAAa,CAAE,CAAC,CAChBC,iBAAiB,CAAE,IAAI,CACvBC,kBAAkB,CAAE,KAAK,CACzBC,YAAY,CAAE,MAAM,CACpBC,SAAS,CAAEA,CAAA,GAAM,IAAI,CACrBC,OAAO,CAAEA,CAAA,GAAM,KAAK,CACpBC,WAAW,CAAEA,CAAA,GAAM,CAAC,CAAC,CACrBC,SAAS,CAAEA,CAAA,GAAM,CAAC,CAAC,CACnBC,QAAQ,CAAE,CAAC,CACXC,IAAI,CAAE,EAAE,CACRC,cAAc,CAAE,EAAE,CAClBC,kBAAkB,CAAE,IACxB,CAAC,CAAE,CACC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WACQC,GAAGA,CAACC,MAAM,CAAEC,GAAG,CAAEC,KAAK,CAAE,CACpBF,MAAM,CAACC,GAAG,CAAC,CAAGC,KAAK,CACnB,GAAID,GAAG,GAAK,oBAAoB,CAAE,CAC9BD,MAAM,CAACV,YAAY,CAAGY,KAAK,CAAG,QAAQ,CAAG,MAAM,CACnD,CACA,MAAO,KAAI,CACf,CACJ,CAAC,CAAC,CAEF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,MAAO,CACHC,GAAG,CAAEF,GAAG,EAAIA,GAAG,CAAGhB,KAAK,CAACgB,GAAG,CAAC,CAAGhB,KAAK,CACpCc,GAAG,CAAEA,CAACE,GAAG,CAAEC,KAAK,GAAK,CAAEjB,KAAK,CAACgB,GAAG,CAAC,CAAGC,KAAK,CAAE,CAC/C,CAAC,CACL,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}