{"ast":null,"code":"/**\r\n * @module DataModule\r\n * @description Manages loading and initialization of navigation data\r\n */\n\nimport { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\nexport const DataModule = function () {\n  /**\r\n   * @type {Object} Internal data storage\r\n   */\n  const data = {\n    distMatrix: [],\n    nextMatrix: [],\n    rooms: [],\n    verts: [],\n    imgs: []\n  };\n\n  /**\r\n   * @function initialize\r\n   * @async\r\n   * @description Loads and initializes all required navigation data\r\n   * @throws {Error} If initialization fails\r\n   */\n  async function initialize() {\n    const [distMatrix, nextMatrix, rawRooms, verts, imgs] = await Promise.all([require('../elements/DistanceMatrix.json'), require('../elements/PrecomputedPaths.json'), require('../elements/SLAVEWORK.json'), require('../elements/Vertices.json'), require('../elements/StreetView.json')]);\n    Object.assign(data, {\n      distMatrix,\n      nextMatrix,\n      rooms: flipKeyValuePairWithMultiNodes(rawRooms),\n      verts,\n      imgs\n    });\n  }\n  return {\n    initialize,\n    get: key => key ? data[key] : data,\n    isInitialized: () => Object.values(data).every(Boolean)\n  };\n}();","map":{"version":3,"names":["flipKeyValuePairWithMultiNodes","DataModule","data","distMatrix","nextMatrix","rooms","verts","imgs","initialize","rawRooms","Promise","all","require","Object","assign","get","key","isInitialized","values","every","Boolean"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/DataModule.js"],"sourcesContent":["/**\r\n * @module DataModule\r\n * @description Manages loading and initialization of navigation data\r\n */\r\n\r\nimport { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\r\n\r\nexport const DataModule = (function() {\r\n    /**\r\n     * @type {Object} Internal data storage\r\n     */\r\n    const data = {\r\n        distMatrix: [],\r\n        nextMatrix: [],\r\n        rooms: [],\r\n        verts: [],\r\n        imgs: []\r\n    };\r\n\r\n    /**\r\n     * @function initialize\r\n     * @async\r\n     * @description Loads and initializes all required navigation data\r\n     * @throws {Error} If initialization fails\r\n     */\r\n    async function initialize() {\r\n        const [distMatrix, nextMatrix, rawRooms, verts, imgs] = await Promise.all([\r\n            require('../elements/DistanceMatrix.json'),\r\n            require('../elements/PrecomputedPaths.json'),\r\n            require('../elements/SLAVEWORK.json'),\r\n            require('../elements/Vertices.json'),\r\n            require('../elements/StreetView.json')\r\n        ]);\r\n\r\n        Object.assign(data, {\r\n            distMatrix,\r\n            nextMatrix,\r\n            rooms: flipKeyValuePairWithMultiNodes(rawRooms),\r\n            verts,\r\n            imgs\r\n        });\r\n    }\r\n\r\n    return {\r\n        initialize,\r\n        get: (key) => key ? data[key] : data,\r\n        isInitialized: () => Object.values(data).every(Boolean)\r\n    };\r\n})();"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,8BAA8B,QAAQ,uBAAuB;AAEtE,OAAO,MAAMC,UAAU,GAAI,YAAW;EAClC;AACJ;AACA;EACI,MAAMC,IAAI,GAAG;IACTC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACV,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;EACI,eAAeC,UAAUA,CAAA,EAAG;IACxB,MAAM,CAACL,UAAU,EAAEC,UAAU,EAAEK,QAAQ,EAAEH,KAAK,EAAEC,IAAI,CAAC,GAAG,MAAMG,OAAO,CAACC,GAAG,CAAC,CACtEC,OAAO,CAAC,iCAAiC,CAAC,EAC1CA,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,4BAA4B,CAAC,EACrCA,OAAO,CAAC,2BAA2B,CAAC,EACpCA,OAAO,CAAC,6BAA6B,CAAC,CACzC,CAAC;IAEFC,MAAM,CAACC,MAAM,CAACZ,IAAI,EAAE;MAChBC,UAAU;MACVC,UAAU;MACVC,KAAK,EAAEL,8BAA8B,CAACS,QAAQ,CAAC;MAC/CH,KAAK;MACLC;IACJ,CAAC,CAAC;EACN;EAEA,OAAO;IACHC,UAAU;IACVO,GAAG,EAAGC,GAAG,IAAKA,GAAG,GAAGd,IAAI,CAACc,GAAG,CAAC,GAAGd,IAAI;IACpCe,aAAa,EAAEA,CAAA,KAAMJ,MAAM,CAACK,MAAM,CAAChB,IAAI,CAAC,CAACiB,KAAK,CAACC,OAAO;EAC1D,CAAC;AACL,CAAC,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}