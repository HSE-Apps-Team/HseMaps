{"ast":null,"code":"import{Config}from'../config/config.js';import{StateManager}from'./StateManager.js';import{DOMCache}from'./DOMCache.js';import{ColorModule}from'./ColorModule.js';import{PathTransitionHandler}from'./PathTransitionHandler.js';import{RenderingModule}from'./RenderingModule.js';import{DataModule}from'./DataModule.js';import{PathfindingModule}from'./PathfindingModule.js';import{StreetViewModule}from'./StreetViewModule.js';/**\r\n * UtilityModule - Core functionality for agent movement and path tracking\r\n * Manages agent position updates, orientation calculations, and path transitions\r\n * \r\n * @module UtilityModule\r\n */export const UtilityModule={/**\r\n     * Updates agent position, color, and orientation based on scroll progress\r\n     * Handles both first and second floor path transitions\r\n     * \r\n     * @param {number} margin - Viewport margin around agent\r\n     * \r\n     * @example First floor movement\r\n     * // Given:\r\n     * StateManager.get('secondPathRendered') = false\r\n     * progbar.value = 50\r\n     * progbar.max = 200\r\n     * path.getTotalLength() = 100\r\n     * \r\n     * updateAgent(300)\r\n     * // Results in:\r\n     * // - agent positioned at path.getPointAtLength(50)\r\n     * // - agent color = yellow (50/200 completion)\r\n     * // - viewport centered on agent with 300px margin\r\n     * \r\n     * @example Second floor transition\r\n     * // Given:\r\n     * StateManager.get('secondPathRendered') = true\r\n     * StateManager.get('totalDistance') = 200\r\n     * progbar.value = 150\r\n     * path.getTotalLength() = 100\r\n     * \r\n     * updateAgent()\r\n     * // Results in:\r\n     * // dist = -(200 - 150 - 100) = 50\r\n     * // - agent positioned at path.getPointAtLength(50)\r\n     * // - agent color = green (150/200 completion)\r\n     */updateAgent(){let margin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Config.DEFAULTS.MARGIN;const elements={agent:DOMCache[Config.SVG.SELECTORS.AGENT],path:DOMCache[\"\".concat(Config.SVG.SELECTORS.GRAPH,\" > polyline\")],progbar:DOMCache[Config.SVG.SELECTORS.PROGBAR],svg:DOMCache[Config.SVG.SELECTORS.SVGRAPH],image:DOMCache[Config.SVG.SELECTORS.IMAGE]};if(!Object.values(elements).every(el=>el===null||el===void 0?void 0:el.isConnected))return;try{const{agent,path,progbar,svg,image}=elements;const sliderValue=progbar.value;const sliderCompletion=sliderValue/progbar.max;const distanceDomain=StateManager.get('distanceDomain');const currentPathSegment=distanceDomain.findIndex((e,i)=>sliderValue>=distanceDomain[i]&&sliderValue<(distanceDomain[i+1]||Infinity));StateManager.set('currentPathSegment',currentPathSegment);// Calculate distance based on floor\nconst dist=StateManager.get('secondPathRendered')?-(StateManager.get('totalDistance')-sliderValue-path.getTotalLength()):sliderValue;const point=path.getPointAtLength(dist);const nextPoint=path.getPointAtLength(Number(dist)+10);this.updateAgentPosition(agent,point,nextPoint,svg,margin);agent.style.fill=ColorModule.getColor(sliderCompletion);PathTransitionHandler.handleTransition(path,sliderValue,StateManager.get('totalDistance'));//image.href.baseVal = StreetViewModule.getImg();\n}catch(error){console.error('Agent update failed:',error);}},/**\r\n     * Updates agent position and orientation on the SVG path\r\n     * Calculates rotation angle based on next point\r\n     * \r\n     * @param {SVGCircleElement} agent - Agent circle element\r\n     * @param {SVGPoint} point - Current point on path\r\n     * @param {SVGPoint} nextPoint - Next point for orientation\r\n     * @param {SVGElement} svg - SVG container element\r\n     * @param {number} margin - Viewport margin\r\n     * \r\n     * @example\r\n     * // Given:\r\n     * point = {x: 100, y: 100}\r\n     * nextPoint = {x: 110, y: 110}\r\n     * \r\n     * updateAgentPosition(agent, point, nextPoint, svg, 300)\r\n     * // Results in:\r\n     * // - agent.cx.baseVal.value = 100\r\n     * // - agent.cy.baseVal.value = 100\r\n     * // - svg rotation = 315 degrees (pointing northeast)\r\n     * // - viewport centered on agent with 300px margin\r\n     */updateAgentPosition(agent,point,nextPoint,svg,margin){agent.cx.baseVal.value=point.x;agent.cy.baseVal.value=point.y;RenderingModule.focus(agent,margin);const orientation=270-Math.atan2(nextPoint.y-point.y,nextPoint.x-point.x)*180/Math.PI;svg.setAttribute(\"style\",\"transform-origin: \".concat(point.x,\"px \").concat(point.y,\"px; transform: rotate(\").concat(orientation,\"deg)\"));},/**\r\n     * Calculates and renders shortest path between two locations\r\n     * Handles floor transitions and stairwell detection\r\n     * \r\n     * @param {string} start - Starting room identifier (e.g., \"ROOM101\")\r\n     * @param {string} end - Destination room identifier (e.g., \"ROOM201\")\r\n     * @returns {SVGPolylineElement} Created path element\r\n     * \r\n     * @example Single floor path\r\n     * // Given:\r\n     * start = \"ROOM101\"  // Room on first floor\r\n     * end = \"ROOM102\"    // Room on first floor\r\n     * rooms = {\r\n     *   \"ROOM101\": [0],  // Vertex index 0\r\n     *   \"ROOM102\": [5]   // Vertex index 5\r\n     * }\r\n     * \r\n     * markShortestPath(\"ROOM101\", \"ROOM102\")\r\n     * // Results in:\r\n     * // - path = [0, 2, 4, 5]\r\n     * // - totalDistance = 150\r\n     * // - Returns: <polyline points=\"100,100 150,100...\"/>\r\n     * \r\n     * @example Floor transition path\r\n     * // Given:\r\n     * start = \"ROOM101\"  // First floor\r\n     * end = \"ROOM201\"    // Second floor\r\n     * distMatrix[4][5] >= Config.THRESHOLD.STAIR_DISTANCE\r\n     * \r\n     * markShortestPath(\"ROOM101\", \"ROOM201\")\r\n     * // Results in:\r\n     * // - First floor path rendered: [0, 2, 4]\r\n     * // - Stairwell transition registered at index 4\r\n     * // - onPathStart/End handlers set for floor transition\r\n     */markShortestPath(start,end){RenderingModule.refresh();StateManager.set('onPathEnd',()=>{});StateManager.set('onPathStart',()=>{});const{nextMatrix,distMatrix,rooms,verts}=DataModule.get();const path=PathfindingModule.minPathBtwRooms(nextMatrix,distMatrix,start,end,rooms);StateManager.set('totalDistance',distMatrix[path[0]][path[path.length-1]]);StateManager.set('path',path);// Recalculate distance domain to handle stairwells smoothly\nconst distanceDomain=[];let accumulatedDist=0;for(let i=0;i<path.length;i++){distanceDomain[i]=accumulatedDist;if(i<path.length-1&&distMatrix[path[i]][path[i+1]]<Config.THRESHOLD.STAIR_DISTANCE){let segmentDist=distMatrix[path[i]][path[i+1]];// Don't subtract stair distance, just use actual segment length\naccumulatedDist+=segmentDist;}}StateManager.set('distanceDomain',distanceDomain);for(let i=0;i<path.length-1;i++){if(path[i]>Config.THRESHOLD.FLOOR_CHANGE&&path[i+1]>Config.THRESHOLD.FLOOR_CHANGE){this.handleStairTransition(path,i,distMatrix,verts);return RenderingModule.selectPath(path.slice(0,i),verts,undefined,\"stairwell\");}}return RenderingModule.selectPath(path,verts);},/**\r\n     * Configures state and handlers for floor transitions via stairwell\r\n     * Sets up callbacks for transitioning between floors and manages path segments\r\n     * \r\n     * @param {number[]} path - Array of vertex indices for complete path\r\n     * @param {number} index - Index where stair transition occurs\r\n     * @param {number[][]} distMatrix - Distance matrix between vertices\r\n     * @param {Object[]} verts - Array of vertex coordinates {x,y}\r\n     * \r\n     * @example Complete floor transition\r\n     * // Given:\r\n     * path = [0, 1, 4, 77, 80]    // 0-4 first floor, 77-80 second floor\r\n     * index = 3                    // Transition at vertex 77\r\n     * distMatrix = [              // Distance matrix with stair connection\r\n     *   [0, 5, Infinity, ...],\r\n     *   [5, 0, 10, ...],\r\n     *   ...\r\n     *   [Infinity, 10000, 0, ...]\r\n     * ]\r\n     * verts = [\r\n     *   {x: 100, y: 100},        // Vertex 0\r\n     *   {x: 150, y: 100},        // Vertex 1\r\n     *   {x: 150, y: 200}         // Vertex 4\r\n     *   // ... more vertices\r\n     * ]\r\n     * \r\n     * handleStairTransition(path, 3, distMatrix, verts)\r\n     * // Results in:\r\n     * \r\n     * // 1. Total distance adjustment:\r\n     * // totalDistance = originalDistance - distMatrix[4][77]\r\n     * \r\n     * // 2. onPathStart handler set:\r\n     * // When first floor revisited:\r\n     * // - Clears existing path\r\n     * // - Creates path: [0, 1, 4]\r\n     * // - Sets skipEnd=false, skipStart=true\r\n     * // - Configures scroll for new path\r\n     * \r\n     * // 3. onPathEnd handler set:\r\n     * // When reaching second floor:\r\n     * // - Clears existing path\r\n     * // - Creates path: [77, 80]\r\n     * // - Sets skipStart=false, skipEnd=true\r\n     * // - Configures scroll for new path\r\n     */handleStairTransition(path,index,distMatrix,verts){StateManager.set('totalDistance',StateManager.get('totalDistance')-distMatrix[path[index-1]][path[index]]);// Configure handler for returning to first floor\nStateManager.set('onPathStart',()=>{if(!StateManager.get('skipStart')()){RenderingModule.refresh();StateManager.set('skipEnd',()=>false);StateManager.set('skipStart',()=>true);// Use path segment to determine first floor section\nRenderingModule.selectPath(path.slice(0,index),verts,undefined,\"stairwell\");this.configureScroll();}});// Configure handler for transitioning to second floor\nStateManager.set('onPathEnd',()=>{if(!StateManager.get('skipEnd')()){RenderingModule.refresh();StateManager.set('skipStart',()=>false);StateManager.set('skipEnd',()=>true);RenderingModule.selectPath(path.slice(index),verts,\"stairwell\");this.configureScroll();}});},/**\r\n     * Configures scroll container and progress slider based on path length\r\n     * Centers viewport on agent and synchronizes scroll height with path distance\r\n     * \r\n     * @example Basic configuration\r\n     * // Given:\r\n     * StateManager.get('totalDistance') = 500\r\n     * DOMCache[Config.SVG.SELECTORS.AGENT] = <circle cx=\"150\" cy=\"200\" r=\"10\"/>\r\n     * \r\n     * configureScroll()\r\n     * // Results in:\r\n     * // 1. Viewport adjustment:\r\n     * // - Centers on (150,200)\r\n     * // - Adds Config.DEFAULTS.MARGIN (300px) padding\r\n     * // - Sets viewBox to approximately (0,50,300,300)\r\n     * \r\n     * // 2. Scroll/Slider setup:\r\n     * // - slider.max = 500\r\n     * // - scroll.children[0].style.height = \"500px\"\r\n     * \r\n     * @example No agent element\r\n     * // Given:\r\n     * DOMCache[Config.SVG.SELECTORS.AGENT] = null\r\n     * \r\n     * configureScroll()\r\n     * // Returns early with no changes\r\n     * \r\n     * @example Path transition\r\n     * // During floor transition:\r\n     * // 1. Initial state:\r\n     * // - totalDistance = 800\r\n     * // - scroll height = 800px\r\n     * \r\n     * // 2. After stair transition:\r\n     * // - totalDistance reduced by stair distance\r\n     * // - totalDistance = 600\r\n     * configureScroll()\r\n     * // - scroll height updates to 600px\r\n     * // - slider.max = 600\r\n     * // - viewport re-centers on agent position\r\n     */configureScroll(){const element=DOMCache[Config.SVG.SELECTORS.AGENT];if(!element)return;RenderingModule.focus(element,Config.DEFAULTS.MARGIN);const scroll=DOMCache[Config.SVG.SELECTORS.SCROLL];const slider=DOMCache[Config.SVG.SELECTORS.PROGBAR];slider.max=StateManager.get('totalDistance');scroll.children[0].style.height=\"\".concat(slider.max,\"px\");}};","map":{"version":3,"names":["Config","StateManager","DOMCache","ColorModule","PathTransitionHandler","RenderingModule","DataModule","PathfindingModule","StreetViewModule","UtilityModule","updateAgent","margin","arguments","length","undefined","DEFAULTS","MARGIN","elements","agent","SVG","SELECTORS","AGENT","path","concat","GRAPH","progbar","PROGBAR","svg","SVGRAPH","image","IMAGE","Object","values","every","el","isConnected","sliderValue","value","sliderCompletion","max","distanceDomain","get","currentPathSegment","findIndex","e","i","Infinity","set","dist","getTotalLength","point","getPointAtLength","nextPoint","Number","updateAgentPosition","style","fill","getColor","handleTransition","error","console","cx","baseVal","x","cy","y","focus","orientation","Math","atan2","PI","setAttribute","markShortestPath","start","end","refresh","nextMatrix","distMatrix","rooms","verts","minPathBtwRooms","accumulatedDist","THRESHOLD","STAIR_DISTANCE","segmentDist","FLOOR_CHANGE","handleStairTransition","selectPath","slice","index","configureScroll","element","scroll","SCROLL","slider","children","height"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/UtilityModule.js"],"sourcesContent":["import { Config } from '../config/config.js';\r\nimport { StateManager } from './StateManager.js';\r\nimport { DOMCache } from './DOMCache.js';\r\nimport { ColorModule } from './ColorModule.js';\r\nimport { PathTransitionHandler } from './PathTransitionHandler.js';\r\nimport { RenderingModule } from './RenderingModule.js';\r\nimport { DataModule } from './DataModule.js';\r\nimport { PathfindingModule } from './PathfindingModule.js';\r\nimport { StreetViewModule } from './StreetViewModule.js';\r\n\r\n/**\r\n * UtilityModule - Core functionality for agent movement and path tracking\r\n * Manages agent position updates, orientation calculations, and path transitions\r\n * \r\n * @module UtilityModule\r\n */\r\nexport const UtilityModule = {\r\n    /**\r\n     * Updates agent position, color, and orientation based on scroll progress\r\n     * Handles both first and second floor path transitions\r\n     * \r\n     * @param {number} margin - Viewport margin around agent\r\n     * \r\n     * @example First floor movement\r\n     * // Given:\r\n     * StateManager.get('secondPathRendered') = false\r\n     * progbar.value = 50\r\n     * progbar.max = 200\r\n     * path.getTotalLength() = 100\r\n     * \r\n     * updateAgent(300)\r\n     * // Results in:\r\n     * // - agent positioned at path.getPointAtLength(50)\r\n     * // - agent color = yellow (50/200 completion)\r\n     * // - viewport centered on agent with 300px margin\r\n     * \r\n     * @example Second floor transition\r\n     * // Given:\r\n     * StateManager.get('secondPathRendered') = true\r\n     * StateManager.get('totalDistance') = 200\r\n     * progbar.value = 150\r\n     * path.getTotalLength() = 100\r\n     * \r\n     * updateAgent()\r\n     * // Results in:\r\n     * // dist = -(200 - 150 - 100) = 50\r\n     * // - agent positioned at path.getPointAtLength(50)\r\n     * // - agent color = green (150/200 completion)\r\n     */\r\n    updateAgent(margin = Config.DEFAULTS.MARGIN) {\r\n        const elements = {\r\n            agent: DOMCache[Config.SVG.SELECTORS.AGENT],\r\n            path: DOMCache[`${Config.SVG.SELECTORS.GRAPH} > polyline`],\r\n            progbar: DOMCache[Config.SVG.SELECTORS.PROGBAR],\r\n            svg: DOMCache[Config.SVG.SELECTORS.SVGRAPH],\r\n            image: DOMCache[Config.SVG.SELECTORS.IMAGE]\r\n        };\r\n\r\n        if (!Object.values(elements).every(el => el?.isConnected)) return;\r\n\r\n        try {\r\n            const { agent, path, progbar, svg, image } = elements;\r\n            const sliderValue = progbar.value;\r\n            const sliderCompletion = sliderValue / progbar.max;\r\n            \r\n            const distanceDomain = StateManager.get('distanceDomain');\r\n            const currentPathSegment = distanceDomain.findIndex((e,i) => \r\n                sliderValue >= distanceDomain[i] && sliderValue < (distanceDomain[i + 1] || Infinity)\r\n            );\r\n            StateManager.set('currentPathSegment', currentPathSegment);\r\n            // Calculate distance based on floor\r\n            const dist = StateManager.get('secondPathRendered')\r\n                ? -(StateManager.get('totalDistance') - sliderValue - path.getTotalLength())\r\n                : sliderValue;\r\n\r\n            const point = path.getPointAtLength(dist);\r\n            const nextPoint = path.getPointAtLength(Number(dist) + 10);\r\n            \r\n            this.updateAgentPosition(agent, point, nextPoint, svg, margin);\r\n            agent.style.fill = ColorModule.getColor(sliderCompletion);\r\n            \r\n            PathTransitionHandler.handleTransition(path, sliderValue, StateManager.get('totalDistance'));\r\n            //image.href.baseVal = StreetViewModule.getImg();\r\n        } catch (error) {\r\n            console.error('Agent update failed:', error);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Updates agent position and orientation on the SVG path\r\n     * Calculates rotation angle based on next point\r\n     * \r\n     * @param {SVGCircleElement} agent - Agent circle element\r\n     * @param {SVGPoint} point - Current point on path\r\n     * @param {SVGPoint} nextPoint - Next point for orientation\r\n     * @param {SVGElement} svg - SVG container element\r\n     * @param {number} margin - Viewport margin\r\n     * \r\n     * @example\r\n     * // Given:\r\n     * point = {x: 100, y: 100}\r\n     * nextPoint = {x: 110, y: 110}\r\n     * \r\n     * updateAgentPosition(agent, point, nextPoint, svg, 300)\r\n     * // Results in:\r\n     * // - agent.cx.baseVal.value = 100\r\n     * // - agent.cy.baseVal.value = 100\r\n     * // - svg rotation = 315 degrees (pointing northeast)\r\n     * // - viewport centered on agent with 300px margin\r\n     */\r\n    updateAgentPosition(agent, point, nextPoint, svg, margin) {\r\n        agent.cx.baseVal.value = point.x;\r\n        agent.cy.baseVal.value = point.y;\r\n        RenderingModule.focus(agent, margin);\r\n        \r\n        const orientation = 270 - (Math.atan2(nextPoint.y - point.y, nextPoint.x - point.x) * 180 / Math.PI);\r\n        svg.setAttribute(\"style\", `transform-origin: ${point.x}px ${point.y}px; transform: rotate(${orientation}deg)`);\r\n    },\r\n\r\n    /**\r\n     * Calculates and renders shortest path between two locations\r\n     * Handles floor transitions and stairwell detection\r\n     * \r\n     * @param {string} start - Starting room identifier (e.g., \"ROOM101\")\r\n     * @param {string} end - Destination room identifier (e.g., \"ROOM201\")\r\n     * @returns {SVGPolylineElement} Created path element\r\n     * \r\n     * @example Single floor path\r\n     * // Given:\r\n     * start = \"ROOM101\"  // Room on first floor\r\n     * end = \"ROOM102\"    // Room on first floor\r\n     * rooms = {\r\n     *   \"ROOM101\": [0],  // Vertex index 0\r\n     *   \"ROOM102\": [5]   // Vertex index 5\r\n     * }\r\n     * \r\n     * markShortestPath(\"ROOM101\", \"ROOM102\")\r\n     * // Results in:\r\n     * // - path = [0, 2, 4, 5]\r\n     * // - totalDistance = 150\r\n     * // - Returns: <polyline points=\"100,100 150,100...\"/>\r\n     * \r\n     * @example Floor transition path\r\n     * // Given:\r\n     * start = \"ROOM101\"  // First floor\r\n     * end = \"ROOM201\"    // Second floor\r\n     * distMatrix[4][5] >= Config.THRESHOLD.STAIR_DISTANCE\r\n     * \r\n     * markShortestPath(\"ROOM101\", \"ROOM201\")\r\n     * // Results in:\r\n     * // - First floor path rendered: [0, 2, 4]\r\n     * // - Stairwell transition registered at index 4\r\n     * // - onPathStart/End handlers set for floor transition\r\n     */\r\n    markShortestPath(start, end) {\r\n        RenderingModule.refresh();\r\n        StateManager.set('onPathEnd', () => {});\r\n        StateManager.set('onPathStart', () => {});\r\n        \r\n        const { nextMatrix, distMatrix, rooms, verts } = DataModule.get();\r\n        const path = PathfindingModule.minPathBtwRooms(nextMatrix, distMatrix, start, end, rooms);\r\n        StateManager.set('totalDistance', distMatrix[path[0]][path[path.length - 1]]);\r\n        StateManager.set('path', path);\r\n\r\n        // Recalculate distance domain to handle stairwells smoothly\r\n        const distanceDomain = [];\r\n        let accumulatedDist = 0;\r\n        \r\n        for (let i = 0; i < path.length; i++) {\r\n            distanceDomain[i] = accumulatedDist;\r\n            if (i < path.length - 1 && distMatrix[path[i]][path[i + 1]] < Config.THRESHOLD.STAIR_DISTANCE) {\r\n                let segmentDist = distMatrix[path[i]][path[i + 1]];\r\n                // Don't subtract stair distance, just use actual segment length\r\n                accumulatedDist += segmentDist;\r\n            }\r\n        }\r\n        \r\n        StateManager.set('distanceDomain', distanceDomain);\r\n\r\n        for (let i = 0; i < path.length-1; i++) {\r\n            if (path[i] > Config.THRESHOLD.FLOOR_CHANGE && path[i+1] > Config.THRESHOLD.FLOOR_CHANGE) {\r\n                this.handleStairTransition(path, i, distMatrix, verts);\r\n                return RenderingModule.selectPath(path.slice(0, i), verts, undefined, \"stairwell\");\r\n            }\r\n        }\r\n        return RenderingModule.selectPath(path, verts);\r\n    },\r\n\r\n    /**\r\n     * Configures state and handlers for floor transitions via stairwell\r\n     * Sets up callbacks for transitioning between floors and manages path segments\r\n     * \r\n     * @param {number[]} path - Array of vertex indices for complete path\r\n     * @param {number} index - Index where stair transition occurs\r\n     * @param {number[][]} distMatrix - Distance matrix between vertices\r\n     * @param {Object[]} verts - Array of vertex coordinates {x,y}\r\n     * \r\n     * @example Complete floor transition\r\n     * // Given:\r\n     * path = [0, 1, 4, 77, 80]    // 0-4 first floor, 77-80 second floor\r\n     * index = 3                    // Transition at vertex 77\r\n     * distMatrix = [              // Distance matrix with stair connection\r\n     *   [0, 5, Infinity, ...],\r\n     *   [5, 0, 10, ...],\r\n     *   ...\r\n     *   [Infinity, 10000, 0, ...]\r\n     * ]\r\n     * verts = [\r\n     *   {x: 100, y: 100},        // Vertex 0\r\n     *   {x: 150, y: 100},        // Vertex 1\r\n     *   {x: 150, y: 200}         // Vertex 4\r\n     *   // ... more vertices\r\n     * ]\r\n     * \r\n     * handleStairTransition(path, 3, distMatrix, verts)\r\n     * // Results in:\r\n     * \r\n     * // 1. Total distance adjustment:\r\n     * // totalDistance = originalDistance - distMatrix[4][77]\r\n     * \r\n     * // 2. onPathStart handler set:\r\n     * // When first floor revisited:\r\n     * // - Clears existing path\r\n     * // - Creates path: [0, 1, 4]\r\n     * // - Sets skipEnd=false, skipStart=true\r\n     * // - Configures scroll for new path\r\n     * \r\n     * // 3. onPathEnd handler set:\r\n     * // When reaching second floor:\r\n     * // - Clears existing path\r\n     * // - Creates path: [77, 80]\r\n     * // - Sets skipStart=false, skipEnd=true\r\n     * // - Configures scroll for new path\r\n     */\r\n    handleStairTransition(path, index, distMatrix, verts) {\r\n        StateManager.set('totalDistance', \r\n            StateManager.get('totalDistance') - distMatrix[path[index - 1]][path[index]]\r\n        );\r\n        \r\n        // Configure handler for returning to first floor\r\n        StateManager.set('onPathStart', () => {\r\n            if (!StateManager.get('skipStart')()) {\r\n                RenderingModule.refresh();\r\n                StateManager.set('skipEnd', () => false);\r\n                StateManager.set('skipStart', () => true);\r\n                \r\n                // Use path segment to determine first floor section\r\n                RenderingModule.selectPath(\r\n                    path.slice(0, index),\r\n                    verts, \r\n                    undefined, \r\n                    \"stairwell\"\r\n                );\r\n                this.configureScroll();\r\n            }\r\n        });\r\n\r\n        // Configure handler for transitioning to second floor\r\n        StateManager.set('onPathEnd', () => {\r\n            if (!StateManager.get('skipEnd')()) {\r\n                RenderingModule.refresh();\r\n                StateManager.set('skipStart', () => false);\r\n                StateManager.set('skipEnd', () => true);\r\n            \r\n                RenderingModule.selectPath(\r\n                    path.slice(index),\r\n                    verts,\r\n                    \"stairwell\"\r\n                );\r\n                this.configureScroll();\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Configures scroll container and progress slider based on path length\r\n     * Centers viewport on agent and synchronizes scroll height with path distance\r\n     * \r\n     * @example Basic configuration\r\n     * // Given:\r\n     * StateManager.get('totalDistance') = 500\r\n     * DOMCache[Config.SVG.SELECTORS.AGENT] = <circle cx=\"150\" cy=\"200\" r=\"10\"/>\r\n     * \r\n     * configureScroll()\r\n     * // Results in:\r\n     * // 1. Viewport adjustment:\r\n     * // - Centers on (150,200)\r\n     * // - Adds Config.DEFAULTS.MARGIN (300px) padding\r\n     * // - Sets viewBox to approximately (0,50,300,300)\r\n     * \r\n     * // 2. Scroll/Slider setup:\r\n     * // - slider.max = 500\r\n     * // - scroll.children[0].style.height = \"500px\"\r\n     * \r\n     * @example No agent element\r\n     * // Given:\r\n     * DOMCache[Config.SVG.SELECTORS.AGENT] = null\r\n     * \r\n     * configureScroll()\r\n     * // Returns early with no changes\r\n     * \r\n     * @example Path transition\r\n     * // During floor transition:\r\n     * // 1. Initial state:\r\n     * // - totalDistance = 800\r\n     * // - scroll height = 800px\r\n     * \r\n     * // 2. After stair transition:\r\n     * // - totalDistance reduced by stair distance\r\n     * // - totalDistance = 600\r\n     * configureScroll()\r\n     * // - scroll height updates to 600px\r\n     * // - slider.max = 600\r\n     * // - viewport re-centers on agent position\r\n     */\r\n    configureScroll() {\r\n        const element = DOMCache[Config.SVG.SELECTORS.AGENT];\r\n        if (!element) return;\r\n        \r\n        RenderingModule.focus(element, Config.DEFAULTS.MARGIN);\r\n        const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\r\n        const slider = DOMCache[Config.SVG.SELECTORS.PROGBAR];\r\n        \r\n        slider.max = StateManager.get('totalDistance');\r\n        scroll.children[0].style.height = `${slider.max}px`;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}