{"ast":null,"code":"/**\r\n * Converts a node-to-rooms mapping into a room-to-nodes mapping.\r\n * @param {Object.<string, string[]>} obj - Object mapping node IDs to arrays of room names\r\n * @returns {Object.<string, string[]>} Object mapping room names to arrays of node IDs\r\n * @throws {Error} If input is null, undefined, or not an object\r\n */\nexport function flipKeyValuePairWithMultiNodes(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new Error('Input must be a valid object mapping nodes to rooms');\n  }\n  const flipped = {};\n  try {\n    for (const [node, rooms] of Object.entries(obj)) {\n      if (!Array.isArray(rooms)) {\n        console.warn(`Invalid room array for node ${node}, skipping`);\n        continue;\n      }\n      rooms.forEach(room => {\n        if (typeof room !== 'string') {\n          console.warn(`Invalid room type for node ${node}, skipping`);\n          return;\n        }\n        if (!flipped[room]) flipped[room] = [];\n        if (!flipped[room].includes(node)) {\n          flipped[room].push(node);\n        }\n      });\n    }\n    return flipped;\n  } catch (error) {\n    console.error('Error flipping node-room mapping:', error);\n    return {};\n  }\n}","map":{"version":3,"names":["flipKeyValuePairWithMultiNodes","obj","Error","flipped","node","rooms","Object","entries","Array","isArray","console","warn","forEach","room","includes","push","error"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/devTestingModule.js"],"sourcesContent":["/**\r\n * Converts a node-to-rooms mapping into a room-to-nodes mapping.\r\n * @param {Object.<string, string[]>} obj - Object mapping node IDs to arrays of room names\r\n * @returns {Object.<string, string[]>} Object mapping room names to arrays of node IDs\r\n * @throws {Error} If input is null, undefined, or not an object\r\n */\r\nexport function flipKeyValuePairWithMultiNodes(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n        throw new Error('Input must be a valid object mapping nodes to rooms');\r\n    }\r\n\r\n    const flipped = {};\r\n    try {\r\n        for (const [node, rooms] of Object.entries(obj)) {\r\n            if (!Array.isArray(rooms)) {\r\n                console.warn(`Invalid room array for node ${node}, skipping`);\r\n                continue;\r\n            }\r\n\r\n            rooms.forEach(room => {\r\n                if (typeof room !== 'string') {\r\n                    console.warn(`Invalid room type for node ${node}, skipping`);\r\n                    return;\r\n                }\r\n                if (!flipped[room]) flipped[room] = [];\r\n                if (!flipped[room].includes(node)) {\r\n                    flipped[room].push(node);\r\n                }\r\n            });\r\n        }\r\n        return flipped;\r\n    } catch (error) {\r\n        console.error('Error flipping node-room mapping:', error);\r\n        return {};\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,8BAA8BA,CAACC,GAAG,EAAE;EAChD,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EAC1E;EAEA,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,IAAI;IACA,KAAK,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,GAAG,CAAC,EAAE;MAC7C,IAAI,CAACO,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACvBK,OAAO,CAACC,IAAI,CAAC,+BAA+BP,IAAI,YAAY,CAAC;QAC7D;MACJ;MAEAC,KAAK,CAACO,OAAO,CAACC,IAAI,IAAI;QAClB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC1BH,OAAO,CAACC,IAAI,CAAC,8BAA8BP,IAAI,YAAY,CAAC;UAC5D;QACJ;QACA,IAAI,CAACD,OAAO,CAACU,IAAI,CAAC,EAAEV,OAAO,CAACU,IAAI,CAAC,GAAG,EAAE;QACtC,IAAI,CAACV,OAAO,CAACU,IAAI,CAAC,CAACC,QAAQ,CAACV,IAAI,CAAC,EAAE;UAC/BD,OAAO,CAACU,IAAI,CAAC,CAACE,IAAI,CAACX,IAAI,CAAC;QAC5B;MACJ,CAAC,CAAC;IACN;IACA,OAAOD,OAAO;EAClB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO,CAAC,CAAC;EACb;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}