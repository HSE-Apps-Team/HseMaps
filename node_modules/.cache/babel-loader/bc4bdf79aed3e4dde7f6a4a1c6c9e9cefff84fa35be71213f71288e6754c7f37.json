{"ast":null,"code":"import { StateManager } from './StateManager.js';\nimport { RenderingModule } from './RenderingModule.js';\nimport { UtilityModule } from './UtilityModule.js';\nimport { DOMCache } from './DOMCache.js';\nimport { Config } from '../config/config.js';\nimport { ScheduleManager } from './ScheduleManager.js';\nimport { DataModule } from './DataModule.js';\nimport { PathTransitionHandler } from './PathTransitionHandler.js';\nimport { PathfindingModule } from './PathfindingModule.js';\nimport mainFloorImage from '../elements/mainfloorcrunched.png';\nimport combFloorImage from '../elements/combscaled.png';\n\n/**\r\n * @module EventHandlingModule\r\n * @description Manages user interactions and event handling for navigation features\r\n */\nexport const EventHandlingModule = {\n  /**\r\n   * @function markShortestPath\r\n   * @async\r\n   * @description Calculates and displays the shortest path between selected rooms\r\n   * @throws {Error} If room selection or path finding fails\r\n   */\n  async markShortestPath() {\n    var _document$getElementB, _document$getElementB2;\n    const start = (_document$getElementB = document.getElementById(\"start\").value) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.toUpperCase();\n    const end = (_document$getElementB2 = document.getElementById(\"end\").value) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.toUpperCase();\n    if (!start || !end) {\n      alert(\"Please enter both start and end rooms\");\n      return;\n    }\n    const {\n      rooms\n    } = DataModule.get();\n    if (!rooms[start] || !rooms[end]) {\n      alert(\"One or both rooms not found. Please check room names.\");\n      return;\n    }\n    if (start === end) {\n      alert(\"You are already at your destination!\");\n      RenderingModule.refresh();\n      return;\n    }\n    RenderingModule.refresh();\n    StateManager.set('firstPathRendered', true);\n    StateManager.set('secondPathRendered', false);\n    StateManager.set('maskedImages', null);\n    DOMCache[Config.SVG.SELECTORS.PROGBAR].value = 0;\n    DOMCache[Config.SVG.SELECTORS.SCROLL].scrollTop = 0;\n    const {\n      nextMatrix,\n      distMatrix\n    } = DataModule.get();\n    const path = PathfindingModule.findShortestPath(nextMatrix, distMatrix, start, end, rooms);\n    if (!path.length) {\n      alert(\"No valid path found between these rooms\");\n      return;\n    }\n    StateManager.set('path', path);\n    const vertices = DataModule.get().verts;\n    const stairIndex = PathTransitionHandler.getStairIndex(path);\n    const points = path.map(p => `${vertices[p].x},${vertices[p].y}`);\n    let segments = [points.slice(0, stairIndex).join(' '), points.slice(stairIndex).join(' ')];\n    if (stairIndex === -1) {\n      segments = [points.join(' '), ''];\n    }\n    let [firstFloorImage, secondFloorImage] = [mainFloorImage, combFloorImage];\n    let [firstFloor, secondFloor] = ['main', 'comb'];\n    if (path[0] > Config.THRESHOLD.FLOOR_CHANGE) {\n      [firstFloorImage, secondFloorImage] = [combFloorImage, mainFloorImage];\n      [firstFloor, secondFloor] = ['comb', 'main'];\n    }\n    await RenderingModule.generateMask(segments[0], firstFloorImage, firstFloor);\n    await RenderingModule.generateMask(segments[1], secondFloorImage, secondFloor);\n    UtilityModule.markShortestPath();\n    UtilityModule.configureScroll();\n  },\n  /**\r\n   * @function displayNextClass\r\n   * @description Updates the UI to show the next class in the schedule\r\n   */\n  displayNextClass() {\n    const selectedDay = document.getElementById(\"daySelect\").value;\n    const schedule = ScheduleManager.load(selectedDay);\n    const currentClass = schedule[0];\n    const nextClass = schedule[1];\n    document.getElementById(\"nextDestination\").innerText = `${currentClass} -> ${nextClass}`;\n  },\n  /**\r\n   * @function navigateSchedule\r\n   * @description Handles navigation between consecutive classes in the schedule\r\n   */\n  navigateSchedule() {\n    const selectedDay = document.getElementById(\"daySelect\").value;\n    const schedule = ScheduleManager.load(selectedDay);\n    if (!(schedule !== null && schedule !== void 0 && schedule.length)) {\n      alert(\"No schedule available for selected day\");\n      return;\n    }\n    let iterator = StateManager.get('iterator') || 1;\n    const currentClass = schedule[iterator - 1];\n    const nextClass = schedule[iterator % schedule.length];\n    if (currentClass === nextClass) {\n      alert(\"Next class is in the same room - no navigation needed\");\n      return;\n    }\n    RenderingModule.refresh();\n    document.getElementById(\"start\").value = currentClass;\n    document.getElementById(\"end\").value = nextClass;\n    EventHandlingModule.markShortestPath(); // Fix here\n    StateManager.set('iterator', (iterator + 1) % schedule.length);\n    iterator = StateManager.get('iterator') || 1;\n    document.getElementById(\"nextDestination\").innerText = `${schedule[iterator - 1]} -> ${schedule[iterator % schedule.length]}`;\n  },\n  /**\r\n   * @function updateSlider\r\n   * @description Updates the progress slider based on scroll position\r\n   */\n  updateSlider() {\n    const slider = DOMCache[Config.SVG.SELECTORS.PROGBAR];\n    const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\n    if (slider && scroll) {\n      slider.value = scroll.scrollTop;\n      UtilityModule.updateAgent();\n    }\n  }\n};","map":{"version":3,"names":["StateManager","RenderingModule","UtilityModule","DOMCache","Config","ScheduleManager","DataModule","PathTransitionHandler","PathfindingModule","mainFloorImage","combFloorImage","EventHandlingModule","markShortestPath","_document$getElementB","_document$getElementB2","start","document","getElementById","value","toUpperCase","end","alert","rooms","get","refresh","set","SVG","SELECTORS","PROGBAR","SCROLL","scrollTop","nextMatrix","distMatrix","path","findShortestPath","length","vertices","verts","stairIndex","getStairIndex","points","map","p","x","y","segments","slice","join","firstFloorImage","secondFloorImage","firstFloor","secondFloor","THRESHOLD","FLOOR_CHANGE","generateMask","configureScroll","displayNextClass","selectedDay","schedule","load","currentClass","nextClass","innerText","navigateSchedule","iterator","updateSlider","slider","scroll","updateAgent"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/EventHandlingModule.js"],"sourcesContent":["import { StateManager } from './StateManager.js';\r\nimport { RenderingModule } from './RenderingModule.js';\r\nimport { UtilityModule } from './UtilityModule.js';\r\nimport { DOMCache } from './DOMCache.js';\r\nimport { Config } from '../config/config.js';\r\nimport { ScheduleManager } from './ScheduleManager.js';\r\nimport { DataModule } from './DataModule.js';\r\nimport { PathTransitionHandler } from './PathTransitionHandler.js';\r\nimport { PathfindingModule } from './PathfindingModule.js';\r\nimport mainFloorImage from '../elements/mainfloorcrunched.png';\r\nimport combFloorImage from '../elements/combscaled.png';\r\n\r\n/**\r\n * @module EventHandlingModule\r\n * @description Manages user interactions and event handling for navigation features\r\n */\r\nexport const EventHandlingModule = {\r\n    /**\r\n     * @function markShortestPath\r\n     * @async\r\n     * @description Calculates and displays the shortest path between selected rooms\r\n     * @throws {Error} If room selection or path finding fails\r\n     */\r\n    async markShortestPath() {\r\n        const start = document.getElementById(\"start\").value?.toUpperCase();\r\n        const end = document.getElementById(\"end\").value?.toUpperCase();\r\n        \r\n        if (!start || !end) {\r\n            alert(\"Please enter both start and end rooms\");\r\n            return;\r\n        }\r\n\r\n        const { rooms } = DataModule.get();\r\n        if (!rooms[start] || !rooms[end]) {\r\n            alert(\"One or both rooms not found. Please check room names.\");\r\n            return;\r\n        }\r\n\r\n        if (start === end) {\r\n            alert(\"You are already at your destination!\");\r\n            RenderingModule.refresh();\r\n            return;\r\n        }\r\n\r\n        RenderingModule.refresh();\r\n        StateManager.set('firstPathRendered', true);\r\n        StateManager.set('secondPathRendered', false);\r\n        StateManager.set('maskedImages', null);\r\n        DOMCache[Config.SVG.SELECTORS.PROGBAR].value = 0;\r\n        DOMCache[Config.SVG.SELECTORS.SCROLL].scrollTop = 0;\r\n        \r\n        const { nextMatrix, distMatrix } = DataModule.get();\r\n        const path = PathfindingModule.findShortestPath(nextMatrix, distMatrix, start, end, rooms);\r\n        if (!path.length) {\r\n            alert(\"No valid path found between these rooms\");\r\n            return;\r\n        }\r\n        StateManager.set('path', path);\r\n        \r\n        const vertices = DataModule.get().verts;\r\n        const stairIndex = PathTransitionHandler.getStairIndex(path);\r\n        const points = path.map(p => `${vertices[p].x},${vertices[p].y}`);\r\n        let segments = [points.slice(0, stairIndex).join(' '), points.slice(stairIndex).join(' ')];\r\n        if (stairIndex === -1) {\r\n            segments = [points.join(' '), ''];\r\n        }\r\n        let [firstFloorImage, secondFloorImage] = [mainFloorImage, combFloorImage];\r\n        let [firstFloor, secondFloor] = ['main', 'comb'];\r\n        \r\n        if (path[0] > Config.THRESHOLD.FLOOR_CHANGE) {\r\n            [firstFloorImage, secondFloorImage] = [combFloorImage, mainFloorImage];\r\n            [firstFloor, secondFloor] = ['comb', 'main'];\r\n        }\r\n        await RenderingModule.generateMask(segments[0], firstFloorImage, firstFloor);\r\n        await RenderingModule.generateMask(segments[1], secondFloorImage, secondFloor);\r\n        \r\n        UtilityModule.markShortestPath();\r\n        UtilityModule.configureScroll();\r\n    },\r\n\r\n    /**\r\n     * @function displayNextClass\r\n     * @description Updates the UI to show the next class in the schedule\r\n     */\r\n    displayNextClass() {\r\n        const selectedDay = document.getElementById(\"daySelect\").value;\r\n        const schedule = ScheduleManager.load(selectedDay);\r\n        const currentClass = schedule[0];\r\n        const nextClass = schedule[1];\r\n        document.getElementById(\"nextDestination\").innerText = `${currentClass} -> ${nextClass}`;\r\n    },\r\n\r\n    /**\r\n     * @function navigateSchedule\r\n     * @description Handles navigation between consecutive classes in the schedule\r\n     */\r\n    navigateSchedule() {\r\n        const selectedDay = document.getElementById(\"daySelect\").value;\r\n        const schedule = ScheduleManager.load(selectedDay);\r\n        \r\n        if (!schedule?.length) {\r\n            alert(\"No schedule available for selected day\");\r\n            return;\r\n        }\r\n\r\n        let iterator = StateManager.get('iterator') || 1;\r\n        const currentClass = schedule[iterator - 1];\r\n        const nextClass = schedule[iterator % schedule.length];\r\n\r\n        if (currentClass === nextClass) {\r\n            alert(\"Next class is in the same room - no navigation needed\");\r\n            return;\r\n        }\r\n\r\n        RenderingModule.refresh();\r\n        \r\n        document.getElementById(\"start\").value = currentClass;\r\n        document.getElementById(\"end\").value = nextClass;\r\n        \r\n        EventHandlingModule.markShortestPath(); // Fix here\r\n        StateManager.set('iterator', (iterator + 1) % schedule.length);\r\n        iterator = StateManager.get('iterator') || 1;\r\n        document.getElementById(\"nextDestination\").innerText = `${schedule[iterator - 1]} -> ${schedule[iterator % schedule.length]}`;\r\n    },\r\n\r\n    /**\r\n     * @function updateSlider\r\n     * @description Updates the progress slider based on scroll position\r\n     */\r\n    updateSlider() {\r\n        const slider = DOMCache[Config.SVG.SELECTORS.PROGBAR];\r\n        const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\r\n        if (slider && scroll) {\r\n            slider.value = scroll.scrollTop;\r\n            UtilityModule.updateAgent();\r\n        }\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}