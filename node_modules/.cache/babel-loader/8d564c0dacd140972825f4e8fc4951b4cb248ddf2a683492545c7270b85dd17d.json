{"ast":null,"code":"class Stats {\n  constructor(trials, func, ...args) {\n    this.count = 0;\n    this.mean = 0;\n    this.M2 = 0; // Sum of squares of differences from the mean\n    this.min = Infinity;\n    this.max = -Infinity;\n    for (let i = 0; i < trials; i++) {\n      this.addValue(measureExecutionTime(func, ...args));\n    }\n  }\n  addValue(value) {\n    this.count++;\n    const delta = value - this.mean;\n    this.mean += delta / this.count;\n    this.M2 += delta * (value - this.mean);\n    if (value < this.min) {\n      this.min = value;\n    }\n    if (value > this.max) {\n      this.max = value;\n    }\n  }\n  getMean() {\n    return this.mean;\n  }\n  getVariance() {\n    return this.count > 1 ? this.M2 / this.count : 0;\n  }\n  getStdDev() {\n    return Math.sqrt(this.getVariance());\n  }\n  getMin() {\n    return this.min;\n  }\n  getMax() {\n    return this.max;\n  }\n}\nfunction measureExecutionTime(func, ...args) {\n  const start = performance.now();\n  const result = func(...args);\n  const end = performance.now();\n  return end - start;\n}\nfunction flipKeyValuePairWithMultiNodes(obj) {\n  let flipped = {};\n  for (let node in obj) {\n    if (obj.hasOwnProperty(node)) {\n      obj[node].forEach(room => {\n        if (!flipped[room]) {\n          flipped[room] = [];\n        }\n        flipped[room].push(node);\n      });\n    }\n  }\n  return flipped;\n}\nexport { Stats, measureExecutionTime, flipKeyValuePairWithMultiNodes };","map":{"version":3,"names":["Stats","constructor","trials","func","args","count","mean","M2","min","Infinity","max","i","addValue","measureExecutionTime","value","delta","getMean","getVariance","getStdDev","Math","sqrt","getMin","getMax","start","performance","now","result","end","flipKeyValuePairWithMultiNodes","obj","flipped","node","hasOwnProperty","forEach","room","push"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/devTesting.js"],"sourcesContent":["    class Stats {\r\n      constructor(trials, func, ...args) {\r\n          this.count = 0;\r\n          this.mean = 0;\r\n          this.M2 = 0;  // Sum of squares of differences from the mean\r\n          this.min = Infinity;\r\n          this.max = -Infinity;\r\n          for (let i = 0; i < trials; i++) {\r\n              this.addValue(measureExecutionTime(func, ...args));\r\n          }\r\n      }\r\n  \r\n      addValue(value) {\r\n          this.count++;\r\n          \r\n          const delta = value - this.mean;\r\n          this.mean += delta / this.count;\r\n          this.M2 += delta * (value - this.mean);\r\n          \r\n          if (value < this.min) {\r\n              this.min = value;\r\n          }\r\n          if (value > this.max) {\r\n              this.max = value;\r\n          }\r\n      }\r\n  \r\n      getMean() {\r\n          return this.mean;\r\n      }\r\n  \r\n      getVariance() {\r\n          return this.count > 1 ? this.M2 / this.count : 0;\r\n      }\r\n  \r\n      getStdDev() {\r\n          return Math.sqrt(this.getVariance());\r\n      }\r\n  \r\n      getMin() {\r\n          return this.min;\r\n      }\r\n  \r\n      getMax() {\r\n          return this.max;\r\n      }\r\n  }\r\n\r\n  function measureExecutionTime(func, ...args) {\r\n    const start = performance.now();\r\n    const result = func(...args);\r\n    const end = performance.now();\r\n    return end-start;\r\n  }\r\n  function flipKeyValuePairWithMultiNodes(obj) {\r\n    let flipped = {};\r\n    \r\n    for (let node in obj) {\r\n        if (obj.hasOwnProperty(node)) {\r\n            obj[node].forEach(room => {\r\n                if (!flipped[room]) {\r\n                    flipped[room] = [];\r\n                }\r\n                flipped[room].push(node);\r\n            });\r\n        }\r\n    }\r\n    \r\n    return flipped;\r\n}\r\n\r\nexport { Stats, measureExecutionTime, flipKeyValuePairWithMultiNodes };"],"mappings":"AAAI,MAAMA,KAAK,CAAC;EACVC,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE,GAAGC,IAAI,EAAE;IAC/B,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,CAAE;IACd,IAAI,CAACC,GAAG,GAAGC,QAAQ;IACnB,IAAI,CAACC,GAAG,GAAG,CAACD,QAAQ;IACpB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,EAAES,CAAC,EAAE,EAAE;MAC7B,IAAI,CAACC,QAAQ,CAACC,oBAAoB,CAACV,IAAI,EAAE,GAAGC,IAAI,CAAC,CAAC;IACtD;EACJ;EAEAQ,QAAQA,CAACE,KAAK,EAAE;IACZ,IAAI,CAACT,KAAK,EAAE;IAEZ,MAAMU,KAAK,GAAGD,KAAK,GAAG,IAAI,CAACR,IAAI;IAC/B,IAAI,CAACA,IAAI,IAAIS,KAAK,GAAG,IAAI,CAACV,KAAK;IAC/B,IAAI,CAACE,EAAE,IAAIQ,KAAK,IAAID,KAAK,GAAG,IAAI,CAACR,IAAI,CAAC;IAEtC,IAAIQ,KAAK,GAAG,IAAI,CAACN,GAAG,EAAE;MAClB,IAAI,CAACA,GAAG,GAAGM,KAAK;IACpB;IACA,IAAIA,KAAK,GAAG,IAAI,CAACJ,GAAG,EAAE;MAClB,IAAI,CAACA,GAAG,GAAGI,KAAK;IACpB;EACJ;EAEAE,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACV,IAAI;EACpB;EAEAW,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACZ,KAAK,GAAG,CAAC,GAAG,IAAI,CAACE,EAAE,GAAG,IAAI,CAACF,KAAK,GAAG,CAAC;EACpD;EAEAa,SAASA,CAAA,EAAG;IACR,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC;EACxC;EAEAI,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACb,GAAG;EACnB;EAEAc,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACZ,GAAG;EACnB;AACJ;AAEA,SAASG,oBAAoBA,CAACV,IAAI,EAAE,GAAGC,IAAI,EAAE;EAC3C,MAAMmB,KAAK,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;EAC/B,MAAMC,MAAM,GAAGvB,IAAI,CAAC,GAAGC,IAAI,CAAC;EAC5B,MAAMuB,GAAG,GAAGH,WAAW,CAACC,GAAG,CAAC,CAAC;EAC7B,OAAOE,GAAG,GAACJ,KAAK;AAClB;AACA,SAASK,8BAA8BA,CAACC,GAAG,EAAE;EAC3C,IAAIC,OAAO,GAAG,CAAC,CAAC;EAEhB,KAAK,IAAIC,IAAI,IAAIF,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACG,cAAc,CAACD,IAAI,CAAC,EAAE;MAC1BF,GAAG,CAACE,IAAI,CAAC,CAACE,OAAO,CAACC,IAAI,IAAI;QACtB,IAAI,CAACJ,OAAO,CAACI,IAAI,CAAC,EAAE;UAChBJ,OAAO,CAACI,IAAI,CAAC,GAAG,EAAE;QACtB;QACAJ,OAAO,CAACI,IAAI,CAAC,CAACC,IAAI,CAACJ,IAAI,CAAC;MAC5B,CAAC,CAAC;IACN;EACJ;EAEA,OAAOD,OAAO;AAClB;AAEA,SAAS9B,KAAK,EAAEa,oBAAoB,EAAEe,8BAA8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}