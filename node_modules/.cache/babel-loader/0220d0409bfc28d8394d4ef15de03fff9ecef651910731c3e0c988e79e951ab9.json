{"ast":null,"code":"import { DataModule } from \"./DataModule.js\";\nimport { StateManager } from './StateManager.js';\nimport { ImageModule } from './ImageModule.js';\n\n/**\r\n * @module StreetViewModule\r\n * @description Manages street view image retrieval and display for path segments,\r\n * including fallback handling for missing images and error states.\r\n */\nexport const StreetViewModule = {\n  /** @constant {string} DEFAULT_IMAGE - Path to the default fallback image */\n  DEFAULT_IMAGE: '/assets/no-streetview.jpg',\n  imageCache: new Map(),\n  /**\r\n   * Preloads images for the given path.\r\n   * @param {Array} path - The path segments to preload images for\r\n   */\n  async preloadImagesForPath(path) {\n    if (!(path !== null && path !== void 0 && path.length)) return;\n    for (let i = 0; i < path.length - 1; i++) {\n      const imageKey = `${path[i]}-${path[i + 1]}.jpg`;\n      if (!this.imageCache.has(imageKey)) {\n        try {\n          const imageUrl = ImageModule.getImageUrl(imageKey);\n          if (imageUrl) {\n            const img = new Image();\n            img.src = imageUrl;\n            await img.decode(); // Wait for image to load\n            this.imageCache.set(imageKey, imageUrl);\n          }\n        } catch (error) {\n          console.warn(`Failed to preload image: ${imageKey}`);\n        }\n      }\n    }\n  },\n  /**\r\n   * Retrieves the appropriate street view image for the current path segment.\r\n   * @returns {string} URL of the street view image or default image if none available\r\n   * @throws {Error} When image retrieval fails\r\n   */\n  getImage() {\n    const currentPathSegment = StateManager.get('currentPathSegment');\n    const path = StateManager.get('path');\n    if (!path || currentPathSegment === undefined) {\n      return ImageModule.getImageUrl('no-streetview.jpg');\n    }\n    const imageKey = `${path[currentPathSegment]}-${path[currentPathSegment + 1]}.jpg`;\n    // Check cache first\n    if (this.imageCache.has(imageKey)) {\n      return this.imageCache.get(imageKey);\n    }\n    const imageUrl = ImageModule.getImageUrl(imageKey);\n    if (imageUrl) {\n      this.imageCache.set(imageKey, imageUrl);\n      return imageUrl;\n    }\n    return ImageModule.getImageUrl('no-streetview.jpg');\n  },\n  /**\r\n   * Clears the image cache.\r\n   */\n  clearCache() {\n    this.imageCache.clear();\n  }\n};","map":{"version":3,"names":["DataModule","StateManager","ImageModule","StreetViewModule","DEFAULT_IMAGE","imageCache","Map","preloadImagesForPath","path","length","i","imageKey","has","imageUrl","getImageUrl","img","Image","src","decode","set","error","console","warn","getImage","currentPathSegment","get","undefined","clearCache","clear"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/StreetViewModule.js"],"sourcesContent":["import { DataModule } from \"./DataModule.js\";\r\nimport { StateManager } from './StateManager.js';\r\nimport { ImageModule } from './ImageModule.js';\r\n\r\n/**\r\n * @module StreetViewModule\r\n * @description Manages street view image retrieval and display for path segments,\r\n * including fallback handling for missing images and error states.\r\n */\r\nexport const StreetViewModule = {\r\n    /** @constant {string} DEFAULT_IMAGE - Path to the default fallback image */\r\n    DEFAULT_IMAGE: '/assets/no-streetview.jpg',\r\n    imageCache: new Map(),\r\n\r\n    /**\r\n     * Preloads images for the given path.\r\n     * @param {Array} path - The path segments to preload images for\r\n     */\r\n    async preloadImagesForPath(path) {\r\n        if (!path?.length) return;\r\n        \r\n        for (let i = 0; i < path.length - 1; i++) {\r\n            const imageKey = `${path[i]}-${path[i + 1]}.jpg`;\r\n            if (!this.imageCache.has(imageKey)) {\r\n                try {\r\n                    const imageUrl = ImageModule.getImageUrl(imageKey);\r\n                    if (imageUrl) {\r\n                        const img = new Image();\r\n                        img.src = imageUrl;\r\n                        await img.decode(); // Wait for image to load\r\n                        this.imageCache.set(imageKey, imageUrl);\r\n                    }\r\n                } catch (error) {\r\n                    console.warn(`Failed to preload image: ${imageKey}`);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the appropriate street view image for the current path segment.\r\n     * @returns {string} URL of the street view image or default image if none available\r\n     * @throws {Error} When image retrieval fails\r\n     */\r\n    getImage() {\r\n        const currentPathSegment = StateManager.get('currentPathSegment');\r\n        const path = StateManager.get('path');\r\n\r\n        if (!path || currentPathSegment === undefined) {\r\n            return ImageModule.getImageUrl('no-streetview.jpg');\r\n        }\r\n\r\n        const imageKey = `${path[currentPathSegment]}-${path[currentPathSegment + 1]}.jpg`;\r\n        // Check cache first\r\n        if (this.imageCache.has(imageKey)) {\r\n            return this.imageCache.get(imageKey);\r\n        }\r\n        \r\n        const imageUrl = ImageModule.getImageUrl(imageKey);\r\n        if (imageUrl) {\r\n            this.imageCache.set(imageKey, imageUrl);\r\n            return imageUrl;\r\n        }\r\n        \r\n        return ImageModule.getImageUrl('no-streetview.jpg');\r\n    },\r\n\r\n    /**\r\n     * Clears the image cache.\r\n     */\r\n    clearCache() {\r\n        this.imageCache.clear();\r\n    }\r\n};"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC5B;EACAC,aAAa,EAAE,2BAA2B;EAC1CC,UAAU,EAAE,IAAIC,GAAG,CAAC,CAAC;EAErB;AACJ;AACA;AACA;EACI,MAAMC,oBAAoBA,CAACC,IAAI,EAAE;IAC7B,IAAI,EAACA,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEC,MAAM,GAAE;IAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,MAAM,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;MACtC,MAAMC,QAAQ,GAAG,GAAGH,IAAI,CAACE,CAAC,CAAC,IAAIF,IAAI,CAACE,CAAC,GAAG,CAAC,CAAC,MAAM;MAChD,IAAI,CAAC,IAAI,CAACL,UAAU,CAACO,GAAG,CAACD,QAAQ,CAAC,EAAE;QAChC,IAAI;UACA,MAAME,QAAQ,GAAGX,WAAW,CAACY,WAAW,CAACH,QAAQ,CAAC;UAClD,IAAIE,QAAQ,EAAE;YACV,MAAME,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;YACvBD,GAAG,CAACE,GAAG,GAAGJ,QAAQ;YAClB,MAAME,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAACb,UAAU,CAACc,GAAG,CAACR,QAAQ,EAAEE,QAAQ,CAAC;UAC3C;QACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;UACZC,OAAO,CAACC,IAAI,CAAC,4BAA4BX,QAAQ,EAAE,CAAC;QACxD;MACJ;IACJ;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIY,QAAQA,CAAA,EAAG;IACP,MAAMC,kBAAkB,GAAGvB,YAAY,CAACwB,GAAG,CAAC,oBAAoB,CAAC;IACjE,MAAMjB,IAAI,GAAGP,YAAY,CAACwB,GAAG,CAAC,MAAM,CAAC;IAErC,IAAI,CAACjB,IAAI,IAAIgB,kBAAkB,KAAKE,SAAS,EAAE;MAC3C,OAAOxB,WAAW,CAACY,WAAW,CAAC,mBAAmB,CAAC;IACvD;IAEA,MAAMH,QAAQ,GAAG,GAAGH,IAAI,CAACgB,kBAAkB,CAAC,IAAIhB,IAAI,CAACgB,kBAAkB,GAAG,CAAC,CAAC,MAAM;IAClF;IACA,IAAI,IAAI,CAACnB,UAAU,CAACO,GAAG,CAACD,QAAQ,CAAC,EAAE;MAC/B,OAAO,IAAI,CAACN,UAAU,CAACoB,GAAG,CAACd,QAAQ,CAAC;IACxC;IAEA,MAAME,QAAQ,GAAGX,WAAW,CAACY,WAAW,CAACH,QAAQ,CAAC;IAClD,IAAIE,QAAQ,EAAE;MACV,IAAI,CAACR,UAAU,CAACc,GAAG,CAACR,QAAQ,EAAEE,QAAQ,CAAC;MACvC,OAAOA,QAAQ;IACnB;IAEA,OAAOX,WAAW,CAACY,WAAW,CAAC,mBAAmB,CAAC;EACvD,CAAC;EAED;AACJ;AACA;EACIa,UAAUA,CAAA,EAAG;IACT,IAAI,CAACtB,UAAU,CAACuB,KAAK,CAAC,CAAC;EAC3B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}