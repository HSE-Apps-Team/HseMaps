{"ast":null,"code":"/**\r\n * SVGCreator - Utility module for creating SVG elements with attributes\r\n * Handles complex attribute paths and class assignments\r\n * \r\n * @module SVGCreator\r\n */\nimport { Config } from '../config/config.js';\nexport const SVGCreator = {\n  /**\r\n   * Creates an SVG element with specified attributes and classes\r\n   * Supports dot notation for complex attribute paths\r\n   * \r\n   * @param {string} type - SVG element type (e.g., 'circle', 'polyline')\r\n   * @param {Object} attributes - Key-value pairs of attributes to set\r\n   * @param {string[]} classList - Array of CSS classes to add\r\n   * @returns {SVGElement} Created SVG element\r\n   * \r\n   * @example Simple circle\r\n   * createElement('circle', {\r\n   *   cx: 100,\r\n   *   cy: 100,\r\n   *   r: 10,\r\n   *   fill: 'red'\r\n   * })\r\n   * // Returns: <circle cx=\"100\" cy=\"100\" r=\"10\" fill=\"red\"/>\r\n   * \r\n   * @example Complex attributes with dot notation\r\n   * createElement('circle', {\r\n   *   'cx.baseVal': 100,\r\n   *   'cy.baseVal': 100,\r\n   *   'r.baseVal': 10\r\n   * })\r\n   * // Returns: <circle> with baseVal properties set\r\n   * // circle.cx.baseVal = 100\r\n   * // circle.cy.baseVal = 100\r\n   * // circle.r.baseVal = 10\r\n   * \r\n   * @example Element with classes\r\n   * createElement('polyline', \r\n   *   { points: '0,0 100,100' },\r\n   *   ['line', 'selected']\r\n   * )\r\n   * // Returns: <polyline points=\"0,0 100,100\" class=\"line selected\"/>\r\n   * \r\n   * @example Mixed attributes\r\n   * createElement('path', {\r\n   *   'd': 'M0 0L100 100',\r\n   *   'stroke-width': 2,\r\n   *   'transform.baseVal.consolidate': null\r\n   * }, ['path', 'animated'])\r\n   * // Returns: <path d=\"M0 0L100 100\" stroke-width=\"2\" class=\"path animated\"/>\r\n   * // with transform.baseVal.consolidate() called\r\n   */\n  createElement(type, attributes = {}, classList = []) {\n    // Create element with correct namespace\n    const element = document.createElementNS(Config.SVG.NAMESPACE, type);\n\n    // Apply attributes\n    Object.entries(attributes).forEach(([key, value]) => {\n      key.includes('.')\n      // Handle nested properties (e.g., 'cx.baseVal')\n      ? key.split('.').reduce((obj, prop, i, arr) => i === arr.length - 1 ? obj[prop].value = value : obj[prop], element)\n      // Set direct attributes\n      : element.setAttribute(key, value);\n    });\n\n    // Add classes if provided\n    if (classList.length) element.classList.add(...classList);\n    return element;\n  }\n};","map":{"version":3,"names":["Config","SVGCreator","createElement","type","attributes","classList","element","document","createElementNS","SVG","NAMESPACE","Object","entries","forEach","key","value","includes","split","reduce","obj","prop","i","arr","length","setAttribute","add"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/SVGCreator.js"],"sourcesContent":["/**\r\n * SVGCreator - Utility module for creating SVG elements with attributes\r\n * Handles complex attribute paths and class assignments\r\n * \r\n * @module SVGCreator\r\n */\r\nimport { Config } from '../config/config.js';\r\n\r\nexport const SVGCreator = {\r\n    /**\r\n     * Creates an SVG element with specified attributes and classes\r\n     * Supports dot notation for complex attribute paths\r\n     * \r\n     * @param {string} type - SVG element type (e.g., 'circle', 'polyline')\r\n     * @param {Object} attributes - Key-value pairs of attributes to set\r\n     * @param {string[]} classList - Array of CSS classes to add\r\n     * @returns {SVGElement} Created SVG element\r\n     * \r\n     * @example Simple circle\r\n     * createElement('circle', {\r\n     *   cx: 100,\r\n     *   cy: 100,\r\n     *   r: 10,\r\n     *   fill: 'red'\r\n     * })\r\n     * // Returns: <circle cx=\"100\" cy=\"100\" r=\"10\" fill=\"red\"/>\r\n     * \r\n     * @example Complex attributes with dot notation\r\n     * createElement('circle', {\r\n     *   'cx.baseVal': 100,\r\n     *   'cy.baseVal': 100,\r\n     *   'r.baseVal': 10\r\n     * })\r\n     * // Returns: <circle> with baseVal properties set\r\n     * // circle.cx.baseVal = 100\r\n     * // circle.cy.baseVal = 100\r\n     * // circle.r.baseVal = 10\r\n     * \r\n     * @example Element with classes\r\n     * createElement('polyline', \r\n     *   { points: '0,0 100,100' },\r\n     *   ['line', 'selected']\r\n     * )\r\n     * // Returns: <polyline points=\"0,0 100,100\" class=\"line selected\"/>\r\n     * \r\n     * @example Mixed attributes\r\n     * createElement('path', {\r\n     *   'd': 'M0 0L100 100',\r\n     *   'stroke-width': 2,\r\n     *   'transform.baseVal.consolidate': null\r\n     * }, ['path', 'animated'])\r\n     * // Returns: <path d=\"M0 0L100 100\" stroke-width=\"2\" class=\"path animated\"/>\r\n     * // with transform.baseVal.consolidate() called\r\n     */\r\n    createElement(type, attributes = {}, classList = []) {\r\n        // Create element with correct namespace\r\n        const element = document.createElementNS(Config.SVG.NAMESPACE, type);\r\n\r\n        // Apply attributes\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            key.includes('.') \r\n                // Handle nested properties (e.g., 'cx.baseVal')\r\n                ? key.split('.').reduce((obj, prop, i, arr) => \r\n                    i === arr.length - 1 ? obj[prop].value = value : obj[prop], element)\r\n                // Set direct attributes\r\n                : element.setAttribute(key, value);\r\n        });\r\n\r\n        // Add classes if provided\r\n        if (classList.length) element.classList.add(...classList);\r\n\r\n        return element;\r\n    }\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,qBAAqB;AAE5C,OAAO,MAAMC,UAAU,GAAG;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAaA,CAACC,IAAI,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAEC,SAAS,GAAG,EAAE,EAAE;IACjD;IACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACR,MAAM,CAACS,GAAG,CAACC,SAAS,EAAEP,IAAI,CAAC;;IAEpE;IACAQ,MAAM,CAACC,OAAO,CAACR,UAAU,CAAC,CAACS,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MACjDD,GAAG,CAACE,QAAQ,CAAC,GAAG;MACZ;MAAA,EACEF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,CAAC,EAAEC,GAAG,KACtCD,CAAC,KAAKC,GAAG,CAACC,MAAM,GAAG,CAAC,GAAGJ,GAAG,CAACC,IAAI,CAAC,CAACL,KAAK,GAAGA,KAAK,GAAGI,GAAG,CAACC,IAAI,CAAC,EAAEd,OAAO;MACvE;MAAA,EACEA,OAAO,CAACkB,YAAY,CAACV,GAAG,EAAEC,KAAK,CAAC;IAC1C,CAAC,CAAC;;IAEF;IACA,IAAIV,SAAS,CAACkB,MAAM,EAAEjB,OAAO,CAACD,SAAS,CAACoB,GAAG,CAAC,GAAGpB,SAAS,CAAC;IAEzD,OAAOC,OAAO;EAClB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}