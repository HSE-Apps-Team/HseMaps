{"ast":null,"code":"import { CoreService } from '../services/CoreService.js';\nimport { RenderingModule } from './RenderingModule.js';\nimport { DOMCache } from './DOMCache.js';\nimport { Config } from '../config/config.js';\nimport { ScheduleManager } from './ScheduleManager.js';\nimport mainFloorImage from '../elements/mainfloorcrunched.png';\nimport combFloorImage from '../elements/combscaled.png';\n\n/**\r\n * @module EventHandlingModule\r\n * @description Simplified event handling for user interactions\r\n */\nexport const EventHandlingModule = {\n  /**\r\n   * @function displayNextClass\r\n   * @description Displays the next class from schedule\r\n   */\n  displayNextClass() {\n    const schedule = CoreService.getState('schedule') || ScheduleManager.getCurrentSchedule();\n    if (!schedule || !schedule.length) {\n      console.log(\"No schedule available\");\n      return false;\n    }\n\n    // Find the next class\n    const now = new Date();\n    const nextClass = schedule.find(cls => new Date(cls.startTime) > now) || schedule[0];\n    if (nextClass && nextClass.room) {\n      // Set room in UI and prepare navigation\n      const startInput = document.getElementById(\"start\");\n      const endInput = document.getElementById(\"end\");\n      if (startInput && endInput) {\n        // Use current location as start if available, otherwise use a default\n        const currentLocation = CoreService.getState('currentLocation') || \"MAIN\";\n        startInput.value = currentLocation;\n        endInput.value = nextClass.room;\n\n        // Trigger navigation if auto-navigate is enabled\n        if (CoreService.getState('autoNavigate')) {\n          this.handlePathRequest();\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n  /**\r\n   * @function handlePathRequest\r\n   * @async\r\n   * @description Processes navigation requests between rooms\r\n   */\n  async handlePathRequest() {\n    var _document$getElementB, _document$getElementB2, _document$getElementB3, _document$getElementB4;\n    const start = (_document$getElementB = document.getElementById(\"start\")) === null || _document$getElementB === void 0 ? void 0 : (_document$getElementB2 = _document$getElementB.value) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.toUpperCase();\n    const end = (_document$getElementB3 = document.getElementById(\"end\")) === null || _document$getElementB3 === void 0 ? void 0 : (_document$getElementB4 = _document$getElementB3.value) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.toUpperCase();\n    const result = await CoreService.findPath(start, end);\n    if (!result.success) {\n      alert(result.error);\n      RenderingModule.refresh();\n      return;\n    }\n\n    // Update UI with new path\n    RenderingModule.renderPath(result.path);\n    CoreService.setState('pathProgress', 0);\n    this.initializeAgentMovement();\n  },\n  /**\r\n   * @function initializeAgentMovement\r\n   * @description Sets up agent for path following\r\n   */\n  initializeAgentMovement() {\n    // Clear any existing animation\n    if (CoreService.getState('animationId')) {\n      cancelAnimationFrame(CoreService.getState('animationId'));\n    }\n\n    // Initialize position\n    CoreService.updateAgentPosition(0);\n\n    // Center view on agent\n    const agentElement = DOMCache[Config.SVG.SELECTORS.AGENT];\n    if (agentElement) {\n      this.centerViewOnElement(agentElement);\n    }\n  },\n  /**\r\n   * @function centerViewOnElement\r\n   * @description Centers the viewport on a specific element\r\n   * @param {Element} element - DOM element to center on\r\n   */\n  centerViewOnElement(element) {\n    if (!element) return;\n    const svgdiv = DOMCache[Config.SVG.SELECTORS.SVGDIV];\n    if (!svgdiv) return;\n    const rect = element.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    svgdiv.scrollLeft = centerX - svgdiv.clientWidth / 2;\n    svgdiv.scrollTop = centerY - svgdiv.clientHeight / 2;\n  },\n  /**\r\n   * @function setupEventListeners\r\n   * @description Initializes all event listeners for UI interactions\r\n   */\n  setupEventListeners() {\n    // Navigation button\n    const navButton = document.getElementById('navigate-button');\n    if (navButton) {\n      navButton.addEventListener('click', () => this.handlePathRequest());\n    }\n\n    // Floor switch buttons\n    const mainFloorBtn = document.getElementById('main-floor-btn');\n    const combFloorBtn = document.getElementById('comb-floor-btn');\n    if (mainFloorBtn) {\n      mainFloorBtn.addEventListener('click', () => {\n        RenderingModule.switchFloor('main', mainFloorImage);\n      });\n    }\n    if (combFloorBtn) {\n      combFloorBtn.addEventListener('click', () => {\n        RenderingModule.switchFloor('comb', combFloorImage);\n      });\n    }\n\n    // Schedule button\n    const scheduleBtn = document.getElementById('schedule-btn');\n    if (scheduleBtn) {\n      scheduleBtn.addEventListener('click', () => this.displayNextClass());\n    }\n  }\n};","map":{"version":3,"names":["CoreService","RenderingModule","DOMCache","Config","ScheduleManager","mainFloorImage","combFloorImage","EventHandlingModule","displayNextClass","schedule","getState","getCurrentSchedule","length","console","log","now","Date","nextClass","find","cls","startTime","room","startInput","document","getElementById","endInput","currentLocation","value","handlePathRequest","_document$getElementB","_document$getElementB2","_document$getElementB3","_document$getElementB4","start","toUpperCase","end","result","findPath","success","alert","error","refresh","renderPath","path","setState","initializeAgentMovement","cancelAnimationFrame","updateAgentPosition","agentElement","SVG","SELECTORS","AGENT","centerViewOnElement","element","svgdiv","SVGDIV","rect","getBoundingClientRect","centerX","left","width","centerY","top","height","scrollLeft","clientWidth","scrollTop","clientHeight","setupEventListeners","navButton","addEventListener","mainFloorBtn","combFloorBtn","switchFloor","scheduleBtn"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/EventHandlingModule.js"],"sourcesContent":["import { CoreService } from '../services/CoreService.js';\r\nimport { RenderingModule } from './RenderingModule.js';\r\nimport { DOMCache } from './DOMCache.js';\r\nimport { Config } from '../config/config.js';\r\nimport { ScheduleManager } from './ScheduleManager.js';\r\nimport mainFloorImage from '../elements/mainfloorcrunched.png';\r\nimport combFloorImage from '../elements/combscaled.png';\r\n\r\n/**\r\n * @module EventHandlingModule\r\n * @description Simplified event handling for user interactions\r\n */\r\nexport const EventHandlingModule = {\r\n    /**\r\n     * @function displayNextClass\r\n     * @description Displays the next class from schedule\r\n     */\r\n    displayNextClass() {\r\n        const schedule = CoreService.getState('schedule') || ScheduleManager.getCurrentSchedule();\r\n        if (!schedule || !schedule.length) {\r\n            console.log(\"No schedule available\");\r\n            return false;\r\n        }\r\n        \r\n        // Find the next class\r\n        const now = new Date();\r\n        const nextClass = schedule.find(cls => new Date(cls.startTime) > now) || schedule[0];\r\n        \r\n        if (nextClass && nextClass.room) {\r\n            // Set room in UI and prepare navigation\r\n            const startInput = document.getElementById(\"start\");\r\n            const endInput = document.getElementById(\"end\");\r\n            \r\n            if (startInput && endInput) {\r\n                // Use current location as start if available, otherwise use a default\r\n                const currentLocation = CoreService.getState('currentLocation') || \"MAIN\";\r\n                startInput.value = currentLocation;\r\n                endInput.value = nextClass.room;\r\n                \r\n                // Trigger navigation if auto-navigate is enabled\r\n                if (CoreService.getState('autoNavigate')) {\r\n                    this.handlePathRequest();\r\n                }\r\n                \r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * @function handlePathRequest\r\n     * @async\r\n     * @description Processes navigation requests between rooms\r\n     */\r\n    async handlePathRequest() {\r\n        const start = document.getElementById(\"start\")?.value?.toUpperCase();\r\n        const end = document.getElementById(\"end\")?.value?.toUpperCase();\r\n        \r\n        const result = await CoreService.findPath(start, end);\r\n        \r\n        if (!result.success) {\r\n            alert(result.error);\r\n            RenderingModule.refresh();\r\n            return;\r\n        }\r\n        \r\n        // Update UI with new path\r\n        RenderingModule.renderPath(result.path);\r\n        CoreService.setState('pathProgress', 0);\r\n        this.initializeAgentMovement();\r\n    },\r\n    \r\n    /**\r\n     * @function initializeAgentMovement\r\n     * @description Sets up agent for path following\r\n     */\r\n    initializeAgentMovement() {\r\n        // Clear any existing animation\r\n        if (CoreService.getState('animationId')) {\r\n            cancelAnimationFrame(CoreService.getState('animationId'));\r\n        }\r\n        \r\n        // Initialize position\r\n        CoreService.updateAgentPosition(0);\r\n        \r\n        // Center view on agent\r\n        const agentElement = DOMCache[Config.SVG.SELECTORS.AGENT];\r\n        if (agentElement) {\r\n            this.centerViewOnElement(agentElement);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @function centerViewOnElement\r\n     * @description Centers the viewport on a specific element\r\n     * @param {Element} element - DOM element to center on\r\n     */\r\n    centerViewOnElement(element) {\r\n        if (!element) return;\r\n        \r\n        const svgdiv = DOMCache[Config.SVG.SELECTORS.SVGDIV];\r\n        if (!svgdiv) return;\r\n        \r\n        const rect = element.getBoundingClientRect();\r\n        const centerX = rect.left + rect.width / 2;\r\n        const centerY = rect.top + rect.height / 2;\r\n        \r\n        svgdiv.scrollLeft = centerX - svgdiv.clientWidth / 2;\r\n        svgdiv.scrollTop = centerY - svgdiv.clientHeight / 2;\r\n    },\r\n    \r\n    /**\r\n     * @function setupEventListeners\r\n     * @description Initializes all event listeners for UI interactions\r\n     */\r\n    setupEventListeners() {\r\n        // Navigation button\r\n        const navButton = document.getElementById('navigate-button');\r\n        if (navButton) {\r\n            navButton.addEventListener('click', () => this.handlePathRequest());\r\n        }\r\n        \r\n        // Floor switch buttons\r\n        const mainFloorBtn = document.getElementById('main-floor-btn');\r\n        const combFloorBtn = document.getElementById('comb-floor-btn');\r\n        \r\n        if (mainFloorBtn) {\r\n            mainFloorBtn.addEventListener('click', () => {\r\n                RenderingModule.switchFloor('main', mainFloorImage);\r\n            });\r\n        }\r\n        \r\n        if (combFloorBtn) {\r\n            combFloorBtn.addEventListener('click', () => {\r\n                RenderingModule.switchFloor('comb', combFloorImage);\r\n            });\r\n        }\r\n        \r\n        // Schedule button\r\n        const scheduleBtn = document.getElementById('schedule-btn');\r\n        if (scheduleBtn) {\r\n            scheduleBtn.addEventListener('click', () => this.displayNextClass());\r\n        }\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}