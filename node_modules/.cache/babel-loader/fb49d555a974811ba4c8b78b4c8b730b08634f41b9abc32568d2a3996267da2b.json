{"ast":null,"code":"import { DataModule } from \"./DataModule.js\";\nimport { StateManager } from './StateManager.js';\nimport { Config } from '../config/config.js';\n\n/**\r\n * @module StreetViewModule\r\n * @description Manages street view image retrieval and display for path segments,\r\n * including fallback handling for missing images and error states.\r\n */\nexport const StreetViewModule = {\n  /** @constant {string} DEFAULT_IMAGE - Path to the default fallback image */\n  DEFAULT_IMAGE: '/assets/no-streetview.jpg',\n  /**\r\n   * Retrieves the appropriate street view image for the current path segment.\r\n   * @returns {string} URL of the street view image or default image if none available\r\n   * @throws {Error} When image retrieval fails\r\n   */\n  getImage() {\n    var _images$from;\n    const path = StateManager.get().path;\n    const currentSegment = StateManager.get().currentPathSegment;\n    if (!(path !== null && path !== void 0 && path.length) || currentSegment === null || currentSegment >= path.length - 1) {\n      return this.DEFAULT_IMAGE;\n    }\n    const [from, to] = [path[currentSegment], path[currentSegment + 1]];\n    const images = DataModule.get().imgs;\n    return Config.PATHS.STREET_VIEW + (images === null || images === void 0 ? void 0 : (_images$from = images[from]) === null || _images$from === void 0 ? void 0 : _images$from[to]) + \".jpg\" || this.DEFAULT_IMAGE;\n  }\n};","map":{"version":3,"names":["DataModule","StateManager","Config","StreetViewModule","DEFAULT_IMAGE","getImage","_images$from","path","get","currentSegment","currentPathSegment","length","from","to","images","imgs","PATHS","STREET_VIEW"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/StreetViewModule.js"],"sourcesContent":["import { DataModule } from \"./DataModule.js\";\r\nimport { StateManager } from './StateManager.js';\r\nimport { Config } from '../config/config.js';\r\n\r\n/**\r\n * @module StreetViewModule\r\n * @description Manages street view image retrieval and display for path segments,\r\n * including fallback handling for missing images and error states.\r\n */\r\nexport const StreetViewModule = {\r\n    /** @constant {string} DEFAULT_IMAGE - Path to the default fallback image */\r\n    DEFAULT_IMAGE: '/assets/no-streetview.jpg',\r\n    \r\n    /**\r\n     * Retrieves the appropriate street view image for the current path segment.\r\n     * @returns {string} URL of the street view image or default image if none available\r\n     * @throws {Error} When image retrieval fails\r\n     */\r\n    getImage() {\r\n        const path = StateManager.get().path;\r\n        const currentSegment = StateManager.get().currentPathSegment;\r\n        \r\n        if (!path?.length || currentSegment === null || currentSegment >= path.length - 1) {\r\n            return this.DEFAULT_IMAGE;\r\n        }\r\n\r\n        const [from, to] = [path[currentSegment], path[currentSegment + 1]];\r\n        const images = DataModule.get().imgs;\r\n        \r\n        return Config.PATHS.STREET_VIEW+images?.[from]?.[to]+\".jpg\" || this.DEFAULT_IMAGE;\r\n    }\r\n};"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,MAAM,QAAQ,qBAAqB;;AAE5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC5B;EACAC,aAAa,EAAE,2BAA2B;EAE1C;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAAA,EAAG;IAAA,IAAAC,YAAA;IACP,MAAMC,IAAI,GAAGN,YAAY,CAACO,GAAG,CAAC,CAAC,CAACD,IAAI;IACpC,MAAME,cAAc,GAAGR,YAAY,CAACO,GAAG,CAAC,CAAC,CAACE,kBAAkB;IAE5D,IAAI,EAACH,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEI,MAAM,KAAIF,cAAc,KAAK,IAAI,IAAIA,cAAc,IAAIF,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;MAC/E,OAAO,IAAI,CAACP,aAAa;IAC7B;IAEA,MAAM,CAACQ,IAAI,EAAEC,EAAE,CAAC,GAAG,CAACN,IAAI,CAACE,cAAc,CAAC,EAAEF,IAAI,CAACE,cAAc,GAAG,CAAC,CAAC,CAAC;IACnE,MAAMK,MAAM,GAAGd,UAAU,CAACQ,GAAG,CAAC,CAAC,CAACO,IAAI;IAEpC,OAAOb,MAAM,CAACc,KAAK,CAACC,WAAW,IAACH,MAAM,aAANA,MAAM,wBAAAR,YAAA,GAANQ,MAAM,CAAGF,IAAI,CAAC,cAAAN,YAAA,uBAAdA,YAAA,CAAiBO,EAAE,CAAC,IAAC,MAAM,IAAI,IAAI,CAACT,aAAa;EACrF;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}