{"ast":null,"code":"import { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\n/**\r\n * DataModule - Manages graph data loading and access for pathfinding\r\n * Handles asynchronous loading of distance matrices, paths, rooms and vertices\r\n * Provides centralized data access through getter\r\n */\nexport const DataModule = function () {\n  /**\r\n   * Internal data store for graph components\r\n   * @type {{\r\n   *   distMatrix: number[][],  // Matrix of distances between vertices\r\n   *   nextMatrix: number[][],  // Next vertex matrix for path reconstruction\r\n   *   rooms: Object<string, number[]>,  // Map of room names to vertex indices\r\n   *   verts: {x: number, y: number}[]  // Array of vertex coordinates\r\n   * }}\r\n   * \r\n   * @example Data structure\r\n   * data = {\r\n   *   distMatrix: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]],\r\n   *   nextMatrix: [[0, 1, null], [1, 1, 2], [null, 2, 2]],\r\n   *   rooms: { \"ROOM101\": [0, 1], \"ROOM102\": [2] },\r\n   *   verts: [{x: 100, y: 200}, {x: 150, y: 200}, {x: 150, y: 250}]\r\n   * }\r\n   */\n  const data = {\n    distMatrix: [],\n    nextMatrix: [],\n    rooms: [],\n    verts: [],\n    imgs: []\n  };\n\n  /**\r\n   * Initializes the module by loading all required data files\r\n   * Uses Promise.all for concurrent loading\r\n   * @returns {Promise<void>}\r\n   * @throws {Error} If any data file fails to load\r\n   * \r\n   * @example\r\n   * await DataModule.initialize()\r\n   * // Loads all data files and populates internal data store\r\n   * // After initialization:\r\n   * DataModule.get().rooms // Returns: { \"ROOM101\": [0, 1], ... }\r\n   * DataModule.get().verts // Returns: [{x: 100, y: 200}, ...]\r\n   */\n  async function initialize() {\n    try {\n      const distMatrix = require('../src/elements/DistanceMatrix.json');\n      const nextMatrix = require('../src/elements/PrecomputedPaths.json');\n      const rooms = flipKeyValuePairWithMultiNodes(require('../src/elements/SLAVEWORK.json'));\n      const verts = require('../src/elements/Vertices.json');\n      const imgs = require('../src/elements/StreetView.json');\n      Object.assign(data, {\n        distMatrix,\n        nextMatrix,\n        rooms,\n        verts,\n        imgs\n      });\n    } catch (error) {\n      console.error('Initialization failed:', error);\n      throw error;\n    }\n  }\n  return {\n    initialize,\n    get: () => data\n  };\n}();","map":{"version":3,"names":["flipKeyValuePairWithMultiNodes","DataModule","data","distMatrix","nextMatrix","rooms","verts","imgs","initialize","require","Object","assign","error","console","get"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/DataModule.js"],"sourcesContent":["import { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\r\n/**\r\n * DataModule - Manages graph data loading and access for pathfinding\r\n * Handles asynchronous loading of distance matrices, paths, rooms and vertices\r\n * Provides centralized data access through getter\r\n */\r\nexport const DataModule = (function() {\r\n    /**\r\n     * Internal data store for graph components\r\n     * @type {{\r\n     *   distMatrix: number[][],  // Matrix of distances between vertices\r\n     *   nextMatrix: number[][],  // Next vertex matrix for path reconstruction\r\n     *   rooms: Object<string, number[]>,  // Map of room names to vertex indices\r\n     *   verts: {x: number, y: number}[]  // Array of vertex coordinates\r\n     * }}\r\n     * \r\n     * @example Data structure\r\n     * data = {\r\n     *   distMatrix: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]],\r\n     *   nextMatrix: [[0, 1, null], [1, 1, 2], [null, 2, 2]],\r\n     *   rooms: { \"ROOM101\": [0, 1], \"ROOM102\": [2] },\r\n     *   verts: [{x: 100, y: 200}, {x: 150, y: 200}, {x: 150, y: 250}]\r\n     * }\r\n     */\r\n    const data = {\r\n        distMatrix: [],\r\n        nextMatrix: [],\r\n        rooms: [],\r\n        verts: [],\r\n        imgs: []\r\n    };\r\n\r\n\r\n    /**\r\n     * Initializes the module by loading all required data files\r\n     * Uses Promise.all for concurrent loading\r\n     * @returns {Promise<void>}\r\n     * @throws {Error} If any data file fails to load\r\n     * \r\n     * @example\r\n     * await DataModule.initialize()\r\n     * // Loads all data files and populates internal data store\r\n     * // After initialization:\r\n     * DataModule.get().rooms // Returns: { \"ROOM101\": [0, 1], ... }\r\n     * DataModule.get().verts // Returns: [{x: 100, y: 200}, ...]\r\n     */\r\n    async function initialize() {\r\n        try {\r\n            const distMatrix = require('../src/elements/DistanceMatrix.json');\r\n            const nextMatrix = require('../src/elements/PrecomputedPaths.json');\r\n            const rooms = flipKeyValuePairWithMultiNodes(require('../src/elements/SLAVEWORK.json'));\r\n            const verts = require('../src/elements/Vertices.json');\r\n            const imgs = require('../src/elements/StreetView.json');\r\n            \r\n            Object.assign(data, { distMatrix, nextMatrix, rooms, verts, imgs });\r\n        } catch (error) {\r\n            console.error('Initialization failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    return {\r\n        initialize,\r\n        get: () => data\r\n    };\r\n})();"],"mappings":"AAAA,SAASA,8BAA8B,QAAQ,uBAAuB;AACtE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAI,YAAW;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,IAAI,GAAG;IACTC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACV,CAAC;;EAGD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,eAAeC,UAAUA,CAAA,EAAG;IACxB,IAAI;MACA,MAAML,UAAU,GAAGM,OAAO,CAAC,qCAAqC,CAAC;MACjE,MAAML,UAAU,GAAGK,OAAO,CAAC,uCAAuC,CAAC;MACnE,MAAMJ,KAAK,GAAGL,8BAA8B,CAACS,OAAO,CAAC,gCAAgC,CAAC,CAAC;MACvF,MAAMH,KAAK,GAAGG,OAAO,CAAC,+BAA+B,CAAC;MACtD,MAAMF,IAAI,GAAGE,OAAO,CAAC,iCAAiC,CAAC;MAEvDC,MAAM,CAACC,MAAM,CAACT,IAAI,EAAE;QAAEC,UAAU;QAAEC,UAAU;QAAEC,KAAK;QAAEC,KAAK;QAAEC;MAAK,CAAC,CAAC;IACvE,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ;EAEA,OAAO;IACHJ,UAAU;IACVM,GAAG,EAAEA,CAAA,KAAMZ;EACf,CAAC;AACL,CAAC,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}