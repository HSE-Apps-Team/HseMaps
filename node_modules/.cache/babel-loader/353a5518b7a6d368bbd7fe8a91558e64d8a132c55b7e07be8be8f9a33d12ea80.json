{"ast":null,"code":"/**\r\n * ColorModule - Handles color transitions for agent movement visualization\r\n * Provides smooth color interpolation from red -> yellow -> green\r\n * Uses caching to optimize repeated color calculations\r\n */\nexport const ColorModule = {\n  /**\r\n   * Returns an RGB color string based on progress value\r\n   * Uses cached values to improve performance\r\n   * \r\n   * Progress transitions:\r\n   * 0.0  -> rgb(255,0,0)    // Red\r\n   * 0.25 -> rgb(255,255,0)  // Yellow \r\n   * 0.5  -> rgb(127,255,0)  // Yellow-Green\r\n   * 0.99 -> rgb(0,255,0)    // Green\r\n   * \r\n   * @param {number} progress - Value between 0 and 1 indicating completion\r\n   * @returns {string} RGB color string\r\n   * \r\n   * @example\r\n   * getColor(0)    // Returns 'rgb(255,0,0)'\r\n   * getColor(0.5)  // Returns 'rgb(127,255,0)'\r\n   * getColor(1)    // Returns 'rgb(0,255,0)'\r\n   */\n  getColor: (() => {\n    // Cache color values to avoid recalculating\n    const colorCache = new Map();\n    return progress => {\n      // Round to nearest percent to limit cache size\n      const key = Math.round(progress * 100);\n      if (!colorCache.has(key)) {\n        // Full completion is always green\n        if (progress >= 0.99) {\n          colorCache.set(key, 'rgb(0,255,0)');\n        } else {\n          // Green increases linearly 0->510, capped at 255\n          const green = Math.min(Math.floor(progress * 510), 255);\n\n          // Red starts at 255, begins decreasing at progress 0.49\n          const red = progress >= 0.49 ? Math.max(255 - Math.floor((progress - 0.49) * 510), 0) : 255;\n          colorCache.set(key, `rgb(${red},${green},0)`);\n        }\n      }\n      return colorCache.get(key);\n    };\n  })()\n};","map":{"version":3,"names":["ColorModule","getColor","colorCache","Map","progress","key","Math","round","has","set","green","min","floor","red","max","get"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/ColorModule.js"],"sourcesContent":["/**\r\n * ColorModule - Handles color transitions for agent movement visualization\r\n * Provides smooth color interpolation from red -> yellow -> green\r\n * Uses caching to optimize repeated color calculations\r\n */\r\nexport const ColorModule = {\r\n    /**\r\n     * Returns an RGB color string based on progress value\r\n     * Uses cached values to improve performance\r\n     * \r\n     * Progress transitions:\r\n     * 0.0  -> rgb(255,0,0)    // Red\r\n     * 0.25 -> rgb(255,255,0)  // Yellow \r\n     * 0.5  -> rgb(127,255,0)  // Yellow-Green\r\n     * 0.99 -> rgb(0,255,0)    // Green\r\n     * \r\n     * @param {number} progress - Value between 0 and 1 indicating completion\r\n     * @returns {string} RGB color string\r\n     * \r\n     * @example\r\n     * getColor(0)    // Returns 'rgb(255,0,0)'\r\n     * getColor(0.5)  // Returns 'rgb(127,255,0)'\r\n     * getColor(1)    // Returns 'rgb(0,255,0)'\r\n     */\r\n    getColor: (() => {\r\n        // Cache color values to avoid recalculating\r\n        const colorCache = new Map();\r\n        \r\n        return (progress) => {\r\n            // Round to nearest percent to limit cache size\r\n            const key = Math.round(progress * 100);\r\n            \r\n            if (!colorCache.has(key)) {\r\n                // Full completion is always green\r\n                if (progress >= 0.99) {\r\n                    colorCache.set(key, 'rgb(0,255,0)');\r\n                } else {\r\n                    // Green increases linearly 0->510, capped at 255\r\n                    const green = Math.min(Math.floor(progress * 510), 255);\r\n                    \r\n                    // Red starts at 255, begins decreasing at progress 0.49\r\n                    const red = progress >= 0.49 \r\n                        ? Math.max(255 - Math.floor((progress - 0.49) * 510), 0)\r\n                        : 255;\r\n                        \r\n                    colorCache.set(key, `rgb(${red},${green},0)`);\r\n                }\r\n            }\r\n            return colorCache.get(key);\r\n        };\r\n    })()\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,QAAQ,EAAE,CAAC,MAAM;IACb;IACA,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE5B,OAAQC,QAAQ,IAAK;MACjB;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,GAAG,GAAG,CAAC;MAEtC,IAAI,CAACF,UAAU,CAACM,GAAG,CAACH,GAAG,CAAC,EAAE;QACtB;QACA,IAAID,QAAQ,IAAI,IAAI,EAAE;UAClBF,UAAU,CAACO,GAAG,CAACJ,GAAG,EAAE,cAAc,CAAC;QACvC,CAAC,MAAM;UACH;UACA,MAAMK,KAAK,GAAGJ,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,KAAK,CAACR,QAAQ,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC;;UAEvD;UACA,MAAMS,GAAG,GAAGT,QAAQ,IAAI,IAAI,GACtBE,IAAI,CAACQ,GAAG,CAAC,GAAG,GAAGR,IAAI,CAACM,KAAK,CAAC,CAACR,QAAQ,GAAG,IAAI,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,GACtD,GAAG;UAETF,UAAU,CAACO,GAAG,CAACJ,GAAG,EAAE,OAAOQ,GAAG,IAAIH,KAAK,KAAK,CAAC;QACjD;MACJ;MACA,OAAOR,UAAU,CAACa,GAAG,CAACV,GAAG,CAAC;IAC9B,CAAC;EACL,CAAC,EAAE;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}