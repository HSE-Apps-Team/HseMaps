{"ast":null,"code":"/**\r\n * @module RenderingModule\r\n * @description Handles SVG rendering and manipulation of path visualizations\r\n */\n\nimport { Config } from '../config/config.js';\nimport { SVGCreator } from './SVGCreator.js';\nimport { StateManager } from './StateManager.js';\nimport { UtilityModule } from './UtilityModule.js';\nimport { FunctionHeatmapModule } from './FunctionHeatmapModule.js';\nconst monitoredMethods = Object.entries(RenderingModule).reduce((acc, [key, value]) => {\n  acc[key] = FunctionHeatmapModule.monitor(value, 'RenderingModule', key);\n  return acc;\n}, {});\nexport const RenderingModule = monitoredMethods;\n\n/**\r\n * @function createLine\r\n * @param {string} points - SVG points string for polyline\r\n * @param {SVGElement} [graph] - Parent SVG group element\r\n * @returns {SVGPolylineElement|null} Created line element or null if failed\r\n * @description Creates an SVG polyline element for path visualization\r\n */\nRenderingModule.createLine = function (points, graph = document.querySelector(\"svg > g > g > g\")) {\n  if (!points || !graph) {\n    console.warn('Invalid parameters for line creation');\n    return null;\n  }\n  const path = SVGCreator.createElement('polyline', {\n    points,\n    class: 'line gen'\n  });\n  graph.insertAdjacentElement(\"beforeend\", path);\n  return path;\n};\n\n/**\r\n * @function generateMask\r\n * @async\r\n * @param {string} points - SVG points string for masking\r\n * @param {string} source - Image source URL\r\n * @param {string} floor - Floor identifier\r\n * @returns {Promise<void>}\r\n * @description Generates a masked image for floor transitions\r\n */\nRenderingModule.generateMask = async function (points, source, floor) {\n  if (!points || !source || !floor) {\n    console.warn('Missing parameters for mask generation');\n    return;\n  }\n  const masks = StateManager.get('maskedImages') || {};\n  if (masks[floor]) return;\n  try {\n    const response = await fetch(source, {\n      cache: 'force-cache'\n    });\n    const blob = await response.blob();\n    const bitmap = await createImageBitmap(blob, {\n      premultiplyAlpha: 'premultiply',\n      colorSpaceConversion: 'default'\n    });\n    const canvas = new OffscreenCanvas(2048, 1308);\n    const ctx = canvas.getContext('2d', {\n      alpha: true,\n      willReadFrequently: false,\n      desynchronized: true,\n      antialias: false\n    });\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(bitmap, 0, 0);\n    ctx.globalCompositeOperation = 'destination-in';\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, 2048, 1308);\n    const coords = points.split(' ').map(p => p.split(',').map(Number));\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 50;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    coords.forEach(([x, y], i) => {\n      i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\n    });\n    ctx.stroke();\n    const resultBlob = await canvas.convertToBlob({\n      type: 'image/webp',\n      quality: 0.7\n    });\n    masks[floor] = URL.createObjectURL(resultBlob);\n    StateManager.set('maskedImages', masks);\n    bitmap.close();\n  } catch (error) {\n    console.error('Mask generation failed:', error);\n    throw error;\n  }\n};\n\n/**\r\n * @function selectPath\r\n * @async\r\n * @param {number[]} path - Array of vertex indices\r\n * @param {Object[]} vertices - Array of vertex coordinates\r\n * @param {string} [start=\"startpt\"] - Start point ID\r\n * @param {string} [end=\"endpt\"] - End point ID\r\n * @param {SVGElement} [graph] - Parent SVG element\r\n * @returns {Promise<SVGElement|null>} Created path element or null if failed\r\n * @description Visualizes a selected path on the map\r\n */\nRenderingModule.selectPath = async function (path, vertices, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\n  if (!(path !== null && path !== void 0 && path.length) || !vertices) {\n    console.warn('Invalid path or vertices data');\n    return null;\n  }\n  try {\n    const masks = StateManager.get('maskedImages');\n    if (!masks) {\n      console.warn('No mask images available');\n      return null;\n    }\n    const floor = path[0] > Config.THRESHOLD.FLOOR_CHANGE ? 'comb' : 'main';\n    const image = document.querySelector(Config.SVG.SELECTORS.IMAGE);\n    image.href.baseVal = masks[floor];\n    const points = path.map(p => `${vertices[p].x},${vertices[p].y}`).join(' ');\n    const line = this.createLine(points, graph);\n    line.classList.add(\"selected\");\n    const startPoint = SVGCreator.createElement('circle', {\n      'cx.baseVal': vertices[path[0]].x,\n      'cy.baseVal': vertices[path[0]].y,\n      'r.baseVal': 10,\n      id: start\n    }, ['gen']);\n    const agent = startPoint.cloneNode(true);\n    agent.id = 'agent';\n    const endPoint = SVGCreator.createElement('circle', {\n      'cx.baseVal': vertices[path[path.length - 1]].x,\n      'cy.baseVal': vertices[path[path.length - 1]].y,\n      'r.baseVal': 10,\n      id: end\n    }, ['gen']);\n    [startPoint, agent, endPoint].forEach(el => graph.insertAdjacentElement(\"beforeend\", el));\n    UtilityModule.updateAgent();\n    return line;\n  } catch (error) {\n    console.error('Path selection failed:', error);\n    this.displayError('Failed to display path');\n    return null;\n  }\n};\n\n/**\r\n * @function focus\r\n * @param {SVGElement} element - Element to focus on\r\n * @param {number} [margin=5] - Margin around focused element\r\n * @param {SVGElement} [svg] - Parent SVG element\r\n * @description Adjusts viewport to focus on a specific element\r\n */\nRenderingModule.focus = function (element, margin = 5, svg = document.getElementById(\"svg\")) {\n  if (!element || !svg) {\n    console.warn('Missing elements for focus');\n    return;\n  }\n  const map = svg.viewBox.baseVal;\n  const focus = element.getBBox();\n  map.x = focus.x - margin / 2;\n  map.y = focus.y - margin / 2;\n  map.width = focus.width + margin;\n  map.height = focus.height + margin;\n};\n\n/**\r\n * @function refresh\r\n * @description Clears all generated elements and resets path state\r\n */\nRenderingModule.refresh = function () {\n  try {\n    const selected = document.getElementsByClassName(\"gen\");\n    Array.from(selected).forEach(el => el.remove());\n    StateManager.set('skipStart', () => true);\n    StateManager.set('skipEnd', () => false);\n  } catch (error) {\n    console.error('Refresh failed:', error);\n  }\n};\n\n/**\r\n * @function displayError\r\n * @param {string} message - Error message to display\r\n * @description Shows a temporary error message to the user\r\n */\nRenderingModule.displayError = function (message) {\n  const errorDiv = document.createElement('div');\n  errorDiv.className = 'error-message';\n  errorDiv.textContent = message;\n  document.body.appendChild(errorDiv);\n  setTimeout(() => errorDiv.remove(), 3000);\n};","map":{"version":3,"names":["Config","SVGCreator","StateManager","UtilityModule","FunctionHeatmapModule","monitoredMethods","Object","entries","RenderingModule","reduce","acc","key","value","monitor","createLine","points","graph","document","querySelector","console","warn","path","createElement","class","insertAdjacentElement","generateMask","source","floor","masks","get","response","fetch","cache","blob","bitmap","createImageBitmap","premultiplyAlpha","colorSpaceConversion","canvas","OffscreenCanvas","ctx","getContext","alpha","willReadFrequently","desynchronized","antialias","imageSmoothingEnabled","drawImage","globalCompositeOperation","fillStyle","fillRect","coords","split","map","p","Number","beginPath","strokeStyle","lineWidth","lineCap","lineJoin","forEach","x","y","i","moveTo","lineTo","stroke","resultBlob","convertToBlob","type","quality","URL","createObjectURL","set","close","error","selectPath","vertices","start","end","getElementById","length","THRESHOLD","FLOOR_CHANGE","image","SVG","SELECTORS","IMAGE","href","baseVal","join","line","classList","add","startPoint","id","agent","cloneNode","endPoint","el","updateAgent","displayError","focus","element","margin","svg","viewBox","getBBox","width","height","refresh","selected","getElementsByClassName","Array","from","remove","message","errorDiv","className","textContent","body","appendChild","setTimeout"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/RenderingModule.js"],"sourcesContent":["/**\r\n * @module RenderingModule\r\n * @description Handles SVG rendering and manipulation of path visualizations\r\n */\r\n\r\nimport { Config } from '../config/config.js';\r\nimport { SVGCreator } from './SVGCreator.js';\r\nimport { StateManager } from './StateManager.js';\r\nimport { UtilityModule } from './UtilityModule.js';\r\nimport { FunctionHeatmapModule } from './FunctionHeatmapModule.js';\r\n\r\nconst monitoredMethods = Object.entries(RenderingModule).reduce((acc, [key, value]) => {\r\n    acc[key] = FunctionHeatmapModule.monitor(value, 'RenderingModule', key);\r\n    return acc;\r\n}, {});\r\n\r\nexport const RenderingModule = monitoredMethods;\r\n\r\n/**\r\n * @function createLine\r\n * @param {string} points - SVG points string for polyline\r\n * @param {SVGElement} [graph] - Parent SVG group element\r\n * @returns {SVGPolylineElement|null} Created line element or null if failed\r\n * @description Creates an SVG polyline element for path visualization\r\n */\r\nRenderingModule.createLine = function(points, graph = document.querySelector(\"svg > g > g > g\")) {\r\n    if (!points || !graph) {\r\n        console.warn('Invalid parameters for line creation');\r\n        return null;\r\n    }\r\n    const path = SVGCreator.createElement('polyline', {\r\n        points,\r\n        class: 'line gen'\r\n    });\r\n    graph.insertAdjacentElement(\"beforeend\", path);\r\n    return path;\r\n};\r\n\r\n/**\r\n * @function generateMask\r\n * @async\r\n * @param {string} points - SVG points string for masking\r\n * @param {string} source - Image source URL\r\n * @param {string} floor - Floor identifier\r\n * @returns {Promise<void>}\r\n * @description Generates a masked image for floor transitions\r\n */\r\nRenderingModule.generateMask = async function(points, source, floor) {\r\n    if (!points || !source || !floor) {\r\n        console.warn('Missing parameters for mask generation');\r\n        return;\r\n    }\r\n    \r\n    const masks = StateManager.get('maskedImages') || {};\r\n    if (masks[floor]) return;\r\n\r\n    try {\r\n        const response = await fetch(source, { cache: 'force-cache' });\r\n        const blob = await response.blob();\r\n        const bitmap = await createImageBitmap(blob, {\r\n            premultiplyAlpha: 'premultiply',\r\n            colorSpaceConversion: 'default'\r\n        });\r\n        \r\n        const canvas = new OffscreenCanvas(2048, 1308);\r\n        const ctx = canvas.getContext('2d', {\r\n            alpha: true,\r\n            willReadFrequently: false,\r\n            desynchronized: true,\r\n            antialias: false\r\n        });\r\n        \r\n        ctx.imageSmoothingEnabled = false;\r\n        ctx.drawImage(bitmap, 0, 0);\r\n        \r\n        ctx.globalCompositeOperation = 'destination-in';\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, 2048, 1308);\r\n        \r\n        const coords = points.split(' ').map(p => p.split(',').map(Number));\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 50;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineJoin = 'round';\r\n        coords.forEach(([x, y], i) => {\r\n            i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\r\n        });\r\n        ctx.stroke();\r\n        \r\n        const resultBlob = await canvas.convertToBlob({\r\n            type: 'image/webp',\r\n            quality: 0.7\r\n        });\r\n        \r\n        masks[floor] = URL.createObjectURL(resultBlob);\r\n        StateManager.set('maskedImages', masks);\r\n        bitmap.close();\r\n    } catch (error) {\r\n        console.error('Mask generation failed:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * @function selectPath\r\n * @async\r\n * @param {number[]} path - Array of vertex indices\r\n * @param {Object[]} vertices - Array of vertex coordinates\r\n * @param {string} [start=\"startpt\"] - Start point ID\r\n * @param {string} [end=\"endpt\"] - End point ID\r\n * @param {SVGElement} [graph] - Parent SVG element\r\n * @returns {Promise<SVGElement|null>} Created path element or null if failed\r\n * @description Visualizes a selected path on the map\r\n */\r\nRenderingModule.selectPath = async function(path, vertices, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\r\n    if (!path?.length || !vertices) {\r\n        console.warn('Invalid path or vertices data');\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        const masks = StateManager.get('maskedImages');\r\n        if (!masks) {\r\n            console.warn('No mask images available');\r\n            return null;\r\n        }\r\n\r\n        const floor = path[0] > Config.THRESHOLD.FLOOR_CHANGE ? 'comb' : 'main';\r\n        \r\n        const image = document.querySelector(Config.SVG.SELECTORS.IMAGE);\r\n        image.href.baseVal = masks[floor];\r\n\r\n        const points = path.map(p => `${vertices[p].x},${vertices[p].y}`).join(' ');\r\n        const line = this.createLine(points, graph);\r\n        line.classList.add(\"selected\");\r\n\r\n        const startPoint = SVGCreator.createElement('circle', {\r\n            'cx.baseVal': vertices[path[0]].x,\r\n            'cy.baseVal': vertices[path[0]].y,\r\n            'r.baseVal': 10,\r\n            id: start\r\n        }, ['gen']);\r\n\r\n        const agent = startPoint.cloneNode(true);\r\n        agent.id = 'agent';\r\n\r\n        const endPoint = SVGCreator.createElement('circle', {\r\n            'cx.baseVal': vertices[path[path.length - 1]].x,\r\n            'cy.baseVal': vertices[path[path.length - 1]].y,\r\n            'r.baseVal': 10,\r\n            id: end\r\n        }, ['gen']);\r\n\r\n        [startPoint, agent, endPoint].forEach(el => \r\n            graph.insertAdjacentElement(\"beforeend\", el));\r\n\r\n\r\n\r\n        UtilityModule.updateAgent();\r\n        return line;\r\n    } catch (error) {\r\n        console.error('Path selection failed:', error);\r\n        this.displayError('Failed to display path');\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * @function focus\r\n * @param {SVGElement} element - Element to focus on\r\n * @param {number} [margin=5] - Margin around focused element\r\n * @param {SVGElement} [svg] - Parent SVG element\r\n * @description Adjusts viewport to focus on a specific element\r\n */\r\nRenderingModule.focus = function(element, margin = 5, svg = document.getElementById(\"svg\")) {\r\n    if (!element || !svg) {\r\n        console.warn('Missing elements for focus');\r\n        return;\r\n    }\r\n    const map = svg.viewBox.baseVal;\r\n    const focus = element.getBBox();\r\n    map.x = focus.x - margin / 2;\r\n    map.y = focus.y - margin / 2;\r\n    map.width = focus.width + margin;\r\n    map.height = focus.height + margin;\r\n};\r\n\r\n/**\r\n * @function refresh\r\n * @description Clears all generated elements and resets path state\r\n */\r\nRenderingModule.refresh = function() {\r\n    try {\r\n        const selected = document.getElementsByClassName(\"gen\");\r\n        Array.from(selected).forEach(el => el.remove());\r\n        StateManager.set('skipStart', () => true);\r\n        StateManager.set('skipEnd', () => false);\r\n    } catch (error) {\r\n        console.error('Refresh failed:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * @function displayError\r\n * @param {string} message - Error message to display\r\n * @description Shows a temporary error message to the user\r\n */\r\nRenderingModule.displayError = function(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.className = 'error-message';\r\n    errorDiv.textContent = message;\r\n    document.body.appendChild(errorDiv);\r\n    setTimeout(() => errorDiv.remove(), 3000);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}