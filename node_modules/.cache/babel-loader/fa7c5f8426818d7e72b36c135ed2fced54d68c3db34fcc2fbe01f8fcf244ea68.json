{"ast":null,"code":"/**\r\n * @module PathTransitionHandler\r\n * @description Manages transitions between floors during path navigation\r\n */\n\nimport { Config } from '../config/config.js';\nimport { StateManager } from './StateManager.js';\nimport { DataModule } from './DataModule.js';\nexport const PathTransitionHandler = {\n  /**\r\n   * @type {boolean}\r\n   * @description Flag indicating if a floor transition is in progress\r\n   */\n  isTransitioning: false,\n  /**\r\n   * @function handleTransition\r\n   * @returns {boolean} True if transition occurred, false otherwise\r\n   * @description Handles floor transitions based on current path segment\r\n   */\n  handleTransition() {\n    if (this.isTransitioning) return false;\n    this.isTransitioning = true;\n    const currentSegment = StateManager.get('currentPathSegment');\n    const fullPath = StateManager.get('path');\n    let isSecondFloor = fullPath[currentSegment] > Config.THRESHOLD.FLOOR_CHANGE;\n    if (fullPath[0] > Config.THRESHOLD.FLOOR_CHANGE) {\n      isSecondFloor = !isSecondFloor;\n    }\n    const needsTransition = isSecondFloor ? StateManager.get('firstPathRendered') : StateManager.get('secondPathRendered');\n    if (needsTransition) {\n      StateManager.set('firstPathRendered', !isSecondFloor);\n      StateManager.set('secondPathRendered', isSecondFloor);\n      const callback = isSecondFloor ? StateManager.get('onPathEnd') : StateManager.get('onPathStart');\n      if (callback) callback();\n      this.isTransitioning = false;\n      return true;\n    }\n    this.isTransitioning = false;\n    return false;\n  },\n  /**\r\n   * @function getStairIndex\r\n   * @param {number[]} path - Array of vertex indices\r\n   * @returns {number} Index of stair transition point or -1 if none found\r\n   * @description Finds the index where the path transitions between floors\r\n   */\n  getStairIndex(path) {\n    const {\n      distMatrix\n    } = DataModule.get();\n    for (let i = 0; i < path.length - 1; i++) {\n      if (distMatrix[path[i]][path[i + 1]] === Config.THRESHOLD.STAIR_DISTANCE) {\n        return i + 1;\n      }\n    }\n    return -1;\n  }\n};","map":{"version":3,"names":["Config","StateManager","DataModule","PathTransitionHandler","isTransitioning","handleTransition","currentSegment","get","fullPath","isSecondFloor","THRESHOLD","FLOOR_CHANGE","needsTransition","set","callback","getStairIndex","path","distMatrix","i","length","STAIR_DISTANCE"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/PathTransitionHandler.js"],"sourcesContent":["/**\r\n * @module PathTransitionHandler\r\n * @description Manages transitions between floors during path navigation\r\n */\r\n\r\nimport { Config } from '../config/config.js';\r\nimport { StateManager } from './StateManager.js';\r\nimport { DataModule } from './DataModule.js';\r\n\r\nexport const PathTransitionHandler = {\r\n    /**\r\n     * @type {boolean}\r\n     * @description Flag indicating if a floor transition is in progress\r\n     */\r\n    isTransitioning: false,\r\n\r\n    /**\r\n     * @function handleTransition\r\n     * @returns {boolean} True if transition occurred, false otherwise\r\n     * @description Handles floor transitions based on current path segment\r\n     */\r\n    handleTransition() {\r\n        if (this.isTransitioning) return false;\r\n        \r\n        this.isTransitioning = true;\r\n        const currentSegment = StateManager.get('currentPathSegment');\r\n        const fullPath = StateManager.get('path');\r\n        let isSecondFloor = fullPath[currentSegment] > Config.THRESHOLD.FLOOR_CHANGE;\r\n        \r\n        if (fullPath[0] > Config.THRESHOLD.FLOOR_CHANGE) {\r\n            isSecondFloor = !isSecondFloor;\r\n        }\r\n\r\n        const needsTransition = isSecondFloor ? \r\n            StateManager.get('firstPathRendered') : \r\n            StateManager.get('secondPathRendered');\r\n\r\n        if (needsTransition) {\r\n            StateManager.set('firstPathRendered', !isSecondFloor);\r\n            StateManager.set('secondPathRendered', isSecondFloor);\r\n            const callback = isSecondFloor ? \r\n                StateManager.get('onPathEnd') : \r\n                StateManager.get('onPathStart');\r\n            if (callback) callback();\r\n            this.isTransitioning = false;\r\n            return true;\r\n        }\r\n\r\n        this.isTransitioning = false;\r\n        return false;\r\n    },\r\n    \r\n    /**\r\n     * @function getStairIndex\r\n     * @param {number[]} path - Array of vertex indices\r\n     * @returns {number} Index of stair transition point or -1 if none found\r\n     * @description Finds the index where the path transitions between floors\r\n     */\r\n    getStairIndex(path){\r\n        const { distMatrix } = DataModule.get();\r\n        for (let i = 0; i < path.length-1; i++) {\r\n            if (distMatrix[path[i]][path[i + 1]] === Config.THRESHOLD.STAIR_DISTANCE) {\r\n                return i+1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,OAAO,MAAMC,qBAAqB,GAAG;EACjC;AACJ;AACA;AACA;EACIC,eAAe,EAAE,KAAK;EAEtB;AACJ;AACA;AACA;AACA;EACIC,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAACD,eAAe,EAAE,OAAO,KAAK;IAEtC,IAAI,CAACA,eAAe,GAAG,IAAI;IAC3B,MAAME,cAAc,GAAGL,YAAY,CAACM,GAAG,CAAC,oBAAoB,CAAC;IAC7D,MAAMC,QAAQ,GAAGP,YAAY,CAACM,GAAG,CAAC,MAAM,CAAC;IACzC,IAAIE,aAAa,GAAGD,QAAQ,CAACF,cAAc,CAAC,GAAGN,MAAM,CAACU,SAAS,CAACC,YAAY;IAE5E,IAAIH,QAAQ,CAAC,CAAC,CAAC,GAAGR,MAAM,CAACU,SAAS,CAACC,YAAY,EAAE;MAC7CF,aAAa,GAAG,CAACA,aAAa;IAClC;IAEA,MAAMG,eAAe,GAAGH,aAAa,GACjCR,YAAY,CAACM,GAAG,CAAC,mBAAmB,CAAC,GACrCN,YAAY,CAACM,GAAG,CAAC,oBAAoB,CAAC;IAE1C,IAAIK,eAAe,EAAE;MACjBX,YAAY,CAACY,GAAG,CAAC,mBAAmB,EAAE,CAACJ,aAAa,CAAC;MACrDR,YAAY,CAACY,GAAG,CAAC,oBAAoB,EAAEJ,aAAa,CAAC;MACrD,MAAMK,QAAQ,GAAGL,aAAa,GAC1BR,YAAY,CAACM,GAAG,CAAC,WAAW,CAAC,GAC7BN,YAAY,CAACM,GAAG,CAAC,aAAa,CAAC;MACnC,IAAIO,QAAQ,EAAEA,QAAQ,CAAC,CAAC;MACxB,IAAI,CAACV,eAAe,GAAG,KAAK;MAC5B,OAAO,IAAI;IACf;IAEA,IAAI,CAACA,eAAe,GAAG,KAAK;IAC5B,OAAO,KAAK;EAChB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIW,aAAaA,CAACC,IAAI,EAAC;IACf,MAAM;MAAEC;IAAW,CAAC,GAAGf,UAAU,CAACK,GAAG,CAAC,CAAC;IACvC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,GAAC,CAAC,EAAED,CAAC,EAAE,EAAE;MACpC,IAAID,UAAU,CAACD,IAAI,CAACE,CAAC,CAAC,CAAC,CAACF,IAAI,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAKlB,MAAM,CAACU,SAAS,CAACU,cAAc,EAAE;QACtE,OAAOF,CAAC,GAAC,CAAC;MACd;IACJ;IACA,OAAO,CAAC,CAAC;EACb;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}