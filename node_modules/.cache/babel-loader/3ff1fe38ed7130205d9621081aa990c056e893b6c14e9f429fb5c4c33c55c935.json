{"ast":null,"code":"/**\r\n * PathTransitionHandler - Manages transitions between floor levels\r\n * Handles state changes during path traversal and prevents recursive updates\r\n * \r\n * @module PathTransitionHandler\r\n */import{Config}from'../config/config.js';import{StateManager}from'./StateManager.js';export const PathTransitionHandler={/** Flag to prevent recursive transition handling */isTransitioning:false,/**\r\n     * Handles state transitions during path traversal\r\n     * Manages transitions between floors and triggers appropriate callbacks\r\n     * \r\n     * @param {SVGGeometryElement} path - SVG path element being traversed\r\n     * @param {number} sliderValue - Current position along the path (0 to pathLength)\r\n     * @param {number} totalDistance - Total path distance including both floors\r\n     * @returns {boolean} True if transition occurred, false otherwise\r\n     * \r\n     * @example First floor to second floor\r\n     * // Given:\r\n     * path.getTotalLength() = 100\r\n     * sliderValue = 100          // At end of first floor\r\n     * totalDistance = 200\r\n     * StateManager.get('firstPathRendered') = true\r\n     * \r\n     * handleTransition(path, 100, 200)\r\n     * // Results in:\r\n     * // - firstPathRendered = false\r\n     * // - secondPathRendered = true\r\n     * // - onPathEnd() called\r\n     * // Returns: true\r\n     * \r\n     * @example Second floor to first floor\r\n     * // Given:\r\n     * path.getTotalLength() = 100\r\n     * sliderValue = 0           // At start of second floor\r\n     * totalDistance = 200\r\n     * StateManager.get('secondPathRendered') = true\r\n     * \r\n     * handleTransition(path, 0, 200)\r\n     * // Results in:\r\n     * // - firstPathRendered = true\r\n     * // - secondPathRendered = false\r\n     * // - onPathStart() called\r\n     * // Returns: true\r\n     * \r\n     * @example No transition needed\r\n     * // Given:\r\n     * sliderValue = 50         // Middle of current floor\r\n     * \r\n     * handleTransition(path, 50, 200)\r\n     * // Returns: false (no state change)\r\n     */handleTransition(path,sliderValue,totalDistance){// Guard against recursive calls during state updates\nif(this.isTransitioning)return false;try{this.isTransitioning=true;const currentSegment=StateManager.get('currentPathSegment');const fullPath=StateManager.get('path');if(fullPath[currentSegment]>Config.THRESHOLD.FLOOR_CHANGE&&StateManager.get('firstPathRendered')){StateManager.set('firstPathRendered',false);StateManager.set('secondPathRendered',true);const onPathEnd=StateManager.get('onPathEnd');if(onPathEnd)onPathEnd();return true;}// Check for transition back to first floor\nif(fullPath[currentSegment]<=Config.THRESHOLD.FLOOR_CHANGE&&StateManager.get('secondPathRendered')){StateManager.set('firstPathRendered',true);StateManager.set('secondPathRendered',false);const onPathStart=StateManager.get('onPathStart');if(onPathStart)onPathStart();return true;}return false;}finally{this.isTransitioning=false;}}};","map":{"version":3,"names":["Config","StateManager","PathTransitionHandler","isTransitioning","handleTransition","path","sliderValue","totalDistance","currentSegment","get","fullPath","THRESHOLD","FLOOR_CHANGE","set","onPathEnd","onPathStart"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/PathTransitionHandler.js"],"sourcesContent":["/**\r\n * PathTransitionHandler - Manages transitions between floor levels\r\n * Handles state changes during path traversal and prevents recursive updates\r\n * \r\n * @module PathTransitionHandler\r\n */\r\nimport { Config } from '../config/config.js';\r\nimport { StateManager } from './StateManager.js';\r\n\r\nexport const PathTransitionHandler = {\r\n    /** Flag to prevent recursive transition handling */\r\n    isTransitioning: false,\r\n\r\n    /**\r\n     * Handles state transitions during path traversal\r\n     * Manages transitions between floors and triggers appropriate callbacks\r\n     * \r\n     * @param {SVGGeometryElement} path - SVG path element being traversed\r\n     * @param {number} sliderValue - Current position along the path (0 to pathLength)\r\n     * @param {number} totalDistance - Total path distance including both floors\r\n     * @returns {boolean} True if transition occurred, false otherwise\r\n     * \r\n     * @example First floor to second floor\r\n     * // Given:\r\n     * path.getTotalLength() = 100\r\n     * sliderValue = 100          // At end of first floor\r\n     * totalDistance = 200\r\n     * StateManager.get('firstPathRendered') = true\r\n     * \r\n     * handleTransition(path, 100, 200)\r\n     * // Results in:\r\n     * // - firstPathRendered = false\r\n     * // - secondPathRendered = true\r\n     * // - onPathEnd() called\r\n     * // Returns: true\r\n     * \r\n     * @example Second floor to first floor\r\n     * // Given:\r\n     * path.getTotalLength() = 100\r\n     * sliderValue = 0           // At start of second floor\r\n     * totalDistance = 200\r\n     * StateManager.get('secondPathRendered') = true\r\n     * \r\n     * handleTransition(path, 0, 200)\r\n     * // Results in:\r\n     * // - firstPathRendered = true\r\n     * // - secondPathRendered = false\r\n     * // - onPathStart() called\r\n     * // Returns: true\r\n     * \r\n     * @example No transition needed\r\n     * // Given:\r\n     * sliderValue = 50         // Middle of current floor\r\n     * \r\n     * handleTransition(path, 50, 200)\r\n     * // Returns: false (no state change)\r\n     */\r\n    handleTransition(path, sliderValue, totalDistance) {\r\n        // Guard against recursive calls during state updates\r\n        if (this.isTransitioning) return false;\r\n        \r\n        try {\r\n            this.isTransitioning = true;\r\n            const currentSegment = StateManager.get('currentPathSegment');\r\n            const fullPath = StateManager.get('path');\r\n            \r\n\r\n            \r\n            if (fullPath[currentSegment] > Config.THRESHOLD.FLOOR_CHANGE && \r\n                StateManager.get('firstPathRendered')) {\r\n                StateManager.set('firstPathRendered', false);\r\n                StateManager.set('secondPathRendered', true);\r\n                const onPathEnd = StateManager.get('onPathEnd');\r\n                if (onPathEnd) onPathEnd();\r\n                return true;\r\n            }\r\n            \r\n            // Check for transition back to first floor\r\n            if (fullPath[currentSegment] <= Config.THRESHOLD.FLOOR_CHANGE && StateManager.get('secondPathRendered')) {\r\n                StateManager.set('firstPathRendered', true);\r\n                StateManager.set('secondPathRendered', false);\r\n                const onPathStart = StateManager.get('onPathStart');\r\n                if (onPathStart) onPathStart();\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        } finally {\r\n            this.isTransitioning = false;\r\n        }\r\n    }\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,OAASA,MAAM,KAAQ,qBAAqB,CAC5C,OAASC,YAAY,KAAQ,mBAAmB,CAEhD,MAAO,MAAM,CAAAC,qBAAqB,CAAG,CACjC,oDACAC,eAAe,CAAE,KAAK,CAEtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACIC,gBAAgBA,CAACC,IAAI,CAAEC,WAAW,CAAEC,aAAa,CAAE,CAC/C;AACA,GAAI,IAAI,CAACJ,eAAe,CAAE,MAAO,MAAK,CAEtC,GAAI,CACA,IAAI,CAACA,eAAe,CAAG,IAAI,CAC3B,KAAM,CAAAK,cAAc,CAAGP,YAAY,CAACQ,GAAG,CAAC,oBAAoB,CAAC,CAC7D,KAAM,CAAAC,QAAQ,CAAGT,YAAY,CAACQ,GAAG,CAAC,MAAM,CAAC,CAIzC,GAAIC,QAAQ,CAACF,cAAc,CAAC,CAAGR,MAAM,CAACW,SAAS,CAACC,YAAY,EACxDX,YAAY,CAACQ,GAAG,CAAC,mBAAmB,CAAC,CAAE,CACvCR,YAAY,CAACY,GAAG,CAAC,mBAAmB,CAAE,KAAK,CAAC,CAC5CZ,YAAY,CAACY,GAAG,CAAC,oBAAoB,CAAE,IAAI,CAAC,CAC5C,KAAM,CAAAC,SAAS,CAAGb,YAAY,CAACQ,GAAG,CAAC,WAAW,CAAC,CAC/C,GAAIK,SAAS,CAAEA,SAAS,CAAC,CAAC,CAC1B,MAAO,KAAI,CACf,CAEA;AACA,GAAIJ,QAAQ,CAACF,cAAc,CAAC,EAAIR,MAAM,CAACW,SAAS,CAACC,YAAY,EAAIX,YAAY,CAACQ,GAAG,CAAC,oBAAoB,CAAC,CAAE,CACrGR,YAAY,CAACY,GAAG,CAAC,mBAAmB,CAAE,IAAI,CAAC,CAC3CZ,YAAY,CAACY,GAAG,CAAC,oBAAoB,CAAE,KAAK,CAAC,CAC7C,KAAM,CAAAE,WAAW,CAAGd,YAAY,CAACQ,GAAG,CAAC,aAAa,CAAC,CACnD,GAAIM,WAAW,CAAEA,WAAW,CAAC,CAAC,CAC9B,MAAO,KAAI,CACf,CAEA,MAAO,MAAK,CAChB,CAAC,OAAS,CACN,IAAI,CAACZ,eAAe,CAAG,KAAK,CAChC,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}