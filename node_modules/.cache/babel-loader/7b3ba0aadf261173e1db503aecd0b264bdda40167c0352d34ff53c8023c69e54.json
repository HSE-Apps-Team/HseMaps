{"ast":null,"code":"import { Config } from '../config/config.js';\nimport { SVGCreator } from './SVGCreator.js';\nimport { StateManager } from './StateManager.js';\nimport { UtilityModule } from './UtilityModule.js';\nimport { MAIN_FLOOR } from '../elements/mainfloorcrunched.png';\nimport { COMB_SCALED } from '../elements/combscaled.png';\n\n/**\r\n * RenderingModule - Handles SVG element creation and manipulation\r\n * Manages path visualization, agent movement, and viewport control\r\n * \r\n * @module RenderingModule\r\n */\nexport const RenderingModule = {\n  /**\r\n   * Creates and appends SVG points and agent for path visualization\r\n   * @param {number[]} points - Array of vertex coordinates\r\n   * @param {object} graph - SVG graph container element\r\n   * @returns {SVGPolylineElement} Created path line element\r\n   * \r\n   * @example\r\n   * // Given vertices at [(100,100), (200,200)]\r\n   * createLine([[100,100], [200,200]], graphElement)\r\n   * // Creates: <polyline points=\"100,100 200,200\" class=\"line gen\"/>\r\n   */\n  createLine(points, graph = document.querySelector(\"svg > g > g > g\")) {\n    const path = SVGCreator.createElement('polyline', {\n      points,\n      class: 'line gen'\n    });\n    graph.insertAdjacentElement(\"beforeend\", path);\n    return path;\n  },\n  selectPath(path, verts, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\n    const image = document.querySelector(Config.SVG.SELECTORS.IMAGE);\n    image.href.baseVal = path[0] > Config.THRESHOLD.FLOOR_CHANGE ? COMB_SCALED : MAIN_FLOOR;\n    const points = path.map(p => `${verts[p].x},${verts[p].y}`).join(' ');\n    const line = this.createLine(points, graph);\n    line.classList.add(\"selected\");\n    const startPoint = SVGCreator.createElement('circle', {\n      'cx.baseVal': verts[path[0]].x,\n      'cy.baseVal': verts[path[0]].y,\n      'r.baseVal': 10,\n      id: start\n    }, ['gen']);\n    const agent = startPoint.cloneNode(true);\n    agent.id = 'agent';\n    const endPoint = SVGCreator.createElement('circle', {\n      'cx.baseVal': verts[path[path.length - 1]].x,\n      'cy.baseVal': verts[path[path.length - 1]].y,\n      'r.baseVal': 10,\n      id: end\n    }, ['gen']);\n    [startPoint, agent, endPoint].forEach(el => graph.insertAdjacentElement(\"beforeend\", el));\n    UtilityModule.updateAgent();\n    return line;\n  },\n  /**\r\n   * Updates viewport focus to center on specified element\r\n   * @param {SVGElement} element - Element to focus on\r\n   * @param {number} margin - Padding around focused element\r\n   * @param {SVGSVGElement} svg - SVG container element\r\n   * \r\n   * @example\r\n   * // Given:\r\n   * element = <circle cx=\"150\" cy=\"150\" r=\"10\"/>\r\n   * margin = 20\r\n   * \r\n   * focus(element, 20)\r\n   * // Results in viewBox:\r\n   * // x = 140 (150 - 20/2)\r\n   * // y = 140 (150 - 20/2)\r\n   * // width = element.width + 20\r\n   * // height = element.height + 20\r\n   */\n  focus(element, margin = 5, svg = document.getElementById(\"svg\")) {\n    const map = svg.viewBox.baseVal;\n    const focus = element.getBBox();\n    map.x = focus.x - margin / 2;\n    map.y = focus.y - margin / 2;\n    map.width = focus.width + margin;\n    map.height = focus.height + margin;\n  },\n  /**\r\n   * Clears current path visualization and resets navigation state\r\n   * Removes all generated elements and resets transition flags\r\n   * \r\n   * @example\r\n   * // Before:\r\n   * // <polyline class=\"gen\"/>\r\n   * // <circle class=\"gen\"/>\r\n   * refresh()\r\n   * // After:\r\n   * // - All elements with class \"gen\" removed\r\n   * // - skipStart = true\r\n   * // - skipEnd = false\r\n   */\n  refresh() {\n    const selected = document.getElementsByClassName(\"gen\");\n    Array.from(selected).forEach(el => el.remove());\n    StateManager.set('skipStart', () => true);\n    StateManager.set('skipEnd', () => false);\n  }\n};","map":{"version":3,"names":["Config","SVGCreator","StateManager","UtilityModule","MAIN_FLOOR","COMB_SCALED","RenderingModule","createLine","points","graph","document","querySelector","path","createElement","class","insertAdjacentElement","selectPath","verts","start","end","getElementById","image","SVG","SELECTORS","IMAGE","href","baseVal","THRESHOLD","FLOOR_CHANGE","map","p","x","y","join","line","classList","add","startPoint","id","agent","cloneNode","endPoint","length","forEach","el","updateAgent","focus","element","margin","svg","viewBox","getBBox","width","height","refresh","selected","getElementsByClassName","Array","from","remove","set"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/RenderingModule.js"],"sourcesContent":["import { Config } from '../config/config.js';\r\nimport { SVGCreator } from './SVGCreator.js';\r\nimport { StateManager } from './StateManager.js';\r\nimport { UtilityModule } from './UtilityModule.js';\r\nimport {MAIN_FLOOR} from '../elements/mainfloorcrunched.png';\r\nimport {COMB_SCALED} from '../elements/combscaled.png';\r\n\r\n/**\r\n * RenderingModule - Handles SVG element creation and manipulation\r\n * Manages path visualization, agent movement, and viewport control\r\n * \r\n * @module RenderingModule\r\n */\r\nexport const RenderingModule = {\r\n    /**\r\n     * Creates and appends SVG points and agent for path visualization\r\n     * @param {number[]} points - Array of vertex coordinates\r\n     * @param {object} graph - SVG graph container element\r\n     * @returns {SVGPolylineElement} Created path line element\r\n     * \r\n     * @example\r\n     * // Given vertices at [(100,100), (200,200)]\r\n     * createLine([[100,100], [200,200]], graphElement)\r\n     * // Creates: <polyline points=\"100,100 200,200\" class=\"line gen\"/>\r\n     */\r\n    createLine(points, graph = document.querySelector(\"svg > g > g > g\")) {\r\n        const path = SVGCreator.createElement('polyline', {\r\n            points,\r\n            class: 'line gen'\r\n        });\r\n        graph.insertAdjacentElement(\"beforeend\", path);\r\n        return path;\r\n    },\r\n\r\n    selectPath(path, verts, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\r\n        const image = document.querySelector(Config.SVG.SELECTORS.IMAGE);\r\n        image.href.baseVal = path[0] > Config.THRESHOLD.FLOOR_CHANGE \r\n            ? COMB_SCALED\r\n            : MAIN_FLOOR;\r\n\r\n        const points = path.map(p => `${verts[p].x},${verts[p].y}`).join(' ');\r\n        const line = this.createLine(points, graph);\r\n        line.classList.add(\"selected\");\r\n\r\n        const startPoint = SVGCreator.createElement('circle', {\r\n            'cx.baseVal': verts[path[0]].x,\r\n            'cy.baseVal': verts[path[0]].y,\r\n            'r.baseVal': 10,\r\n            id: start\r\n        }, ['gen']);\r\n\r\n        const agent = startPoint.cloneNode(true);\r\n        agent.id = 'agent';\r\n\r\n        const endPoint = SVGCreator.createElement('circle', {\r\n            'cx.baseVal': verts[path[path.length - 1]].x,\r\n            'cy.baseVal': verts[path[path.length - 1]].y,\r\n            'r.baseVal': 10,\r\n            id: end\r\n        }, ['gen']);\r\n\r\n        [startPoint, agent, endPoint].forEach(el => \r\n            graph.insertAdjacentElement(\"beforeend\", el));\r\n\r\n        UtilityModule.updateAgent();\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Updates viewport focus to center on specified element\r\n     * @param {SVGElement} element - Element to focus on\r\n     * @param {number} margin - Padding around focused element\r\n     * @param {SVGSVGElement} svg - SVG container element\r\n     * \r\n     * @example\r\n     * // Given:\r\n     * element = <circle cx=\"150\" cy=\"150\" r=\"10\"/>\r\n     * margin = 20\r\n     * \r\n     * focus(element, 20)\r\n     * // Results in viewBox:\r\n     * // x = 140 (150 - 20/2)\r\n     * // y = 140 (150 - 20/2)\r\n     * // width = element.width + 20\r\n     * // height = element.height + 20\r\n     */\r\n    focus(element, margin = 5, svg = document.getElementById(\"svg\")) {\r\n        const map = svg.viewBox.baseVal;\r\n        const focus = element.getBBox();\r\n        map.x = focus.x - margin / 2;\r\n        map.y = focus.y - margin / 2;\r\n        map.width = focus.width + margin;\r\n        map.height = focus.height + margin;\r\n    },\r\n\r\n    /**\r\n     * Clears current path visualization and resets navigation state\r\n     * Removes all generated elements and resets transition flags\r\n     * \r\n     * @example\r\n     * // Before:\r\n     * // <polyline class=\"gen\"/>\r\n     * // <circle class=\"gen\"/>\r\n     * refresh()\r\n     * // After:\r\n     * // - All elements with class \"gen\" removed\r\n     * // - skipStart = true\r\n     * // - skipEnd = false\r\n     */\r\n    refresh() {\r\n        const selected = document.getElementsByClassName(\"gen\");\r\n        Array.from(selected).forEach(el => el.remove());\r\n        StateManager.set('skipStart', () => true);\r\n        StateManager.set('skipEnd', () => false);\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}