{"ast":null,"code":"import{flipKeyValuePairWithMultiNodes}from'./src/devTesting.js';/**\r\n * DataModule - Manages graph data loading and access for pathfinding\r\n * Handles asynchronous loading of distance matrices, paths, rooms and vertices\r\n * Provides centralized data access through getter\r\n */export const DataModule=function(){/**\r\n     * Internal data store for graph components\r\n     * @type {{\r\n     *   distMatrix: number[][],  // Matrix of distances between vertices\r\n     *   nextMatrix: number[][],  // Next vertex matrix for path reconstruction\r\n     *   rooms: Object<string, number[]>,  // Map of room names to vertex indices\r\n     *   verts: {x: number, y: number}[]  // Array of vertex coordinates\r\n     * }}\r\n     * \r\n     * @example Data structure\r\n     * data = {\r\n     *   distMatrix: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]],\r\n     *   nextMatrix: [[0, 1, null], [1, 1, 2], [null, 2, 2]],\r\n     *   rooms: { \"ROOM101\": [0, 1], \"ROOM102\": [2] },\r\n     *   verts: [{x: 100, y: 200}, {x: 150, y: 200}, {x: 150, y: 250}]\r\n     * }\r\n     */const data={distMatrix:[],nextMatrix:[],rooms:[],verts:[],imgs:[]};/**\r\n     * Fetches and parses JSON from given URL\r\n     * @param {string} url - URL to fetch JSON from\r\n     * @returns {Promise<any>} Parsed JSON data\r\n     * @throws {Error} If fetch fails or response is not OK\r\n     * \r\n     * @example\r\n     * await fetchJSON('elements/DistanceMatrix.json')\r\n     * // Returns: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]]\r\n     */async function fetchJSON(url){try{const response=await fetch(url);if(!response.ok)throw new Error(\"HTTP error! status: \".concat(response.status));return await response.json();}catch(error){console.error(\"Failed to fetch \".concat(url,\":\"),error);throw error;}}/**\r\n     * Initializes the module by loading all required data files\r\n     * Uses Promise.all for concurrent loading\r\n     * @returns {Promise<void>}\r\n     * @throws {Error} If any data file fails to load\r\n     * \r\n     * @example\r\n     * await DataModule.initialize()\r\n     * // Loads all data files and populates internal data store\r\n     * // After initialization:\r\n     * DataModule.get().rooms // Returns: { \"ROOM101\": [0, 1], ... }\r\n     * DataModule.get().verts // Returns: [{x: 100, y: 200}, ...]\r\n     */async function initialize(){try{const[distMatrix,nextMatrix,rooms,verts,imgs]=await Promise.all([fetchJSON('../src/elements/DistanceMatrix.json'),fetchJSON('../src/elements/PrecomputedPaths.json'),fetchJSON('../src/elements/SLAVEWORK.json').then(flipKeyValuePairWithMultiNodes),fetchJSON('../src/elements/Vertices.json'),fetchJSON('../src/elements/StreetView.json')]);Object.assign(data,{distMatrix,nextMatrix,rooms,verts,imgs});}catch(error){console.error('Initialization failed:',error);throw error;}}return{fetchJSON,initialize,get:()=>data};}();","map":{"version":3,"names":["flipKeyValuePairWithMultiNodes","DataModule","data","distMatrix","nextMatrix","rooms","verts","imgs","fetchJSON","url","response","fetch","ok","Error","concat","status","json","error","console","initialize","Promise","all","then","Object","assign","get"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/DataModule.js"],"sourcesContent":["import { flipKeyValuePairWithMultiNodes } from './src/devTesting.js';\r\n/**\r\n * DataModule - Manages graph data loading and access for pathfinding\r\n * Handles asynchronous loading of distance matrices, paths, rooms and vertices\r\n * Provides centralized data access through getter\r\n */\r\nexport const DataModule = (function() {\r\n    /**\r\n     * Internal data store for graph components\r\n     * @type {{\r\n     *   distMatrix: number[][],  // Matrix of distances between vertices\r\n     *   nextMatrix: number[][],  // Next vertex matrix for path reconstruction\r\n     *   rooms: Object<string, number[]>,  // Map of room names to vertex indices\r\n     *   verts: {x: number, y: number}[]  // Array of vertex coordinates\r\n     * }}\r\n     * \r\n     * @example Data structure\r\n     * data = {\r\n     *   distMatrix: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]],\r\n     *   nextMatrix: [[0, 1, null], [1, 1, 2], [null, 2, 2]],\r\n     *   rooms: { \"ROOM101\": [0, 1], \"ROOM102\": [2] },\r\n     *   verts: [{x: 100, y: 200}, {x: 150, y: 200}, {x: 150, y: 250}]\r\n     * }\r\n     */\r\n    const data = {\r\n        distMatrix: [],\r\n        nextMatrix: [],\r\n        rooms: [],\r\n        verts: [],\r\n        imgs: []\r\n    };\r\n\r\n    /**\r\n     * Fetches and parses JSON from given URL\r\n     * @param {string} url - URL to fetch JSON from\r\n     * @returns {Promise<any>} Parsed JSON data\r\n     * @throws {Error} If fetch fails or response is not OK\r\n     * \r\n     * @example\r\n     * await fetchJSON('elements/DistanceMatrix.json')\r\n     * // Returns: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]]\r\n     */\r\n    async function fetchJSON(url) {\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(`Failed to fetch ${url}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the module by loading all required data files\r\n     * Uses Promise.all for concurrent loading\r\n     * @returns {Promise<void>}\r\n     * @throws {Error} If any data file fails to load\r\n     * \r\n     * @example\r\n     * await DataModule.initialize()\r\n     * // Loads all data files and populates internal data store\r\n     * // After initialization:\r\n     * DataModule.get().rooms // Returns: { \"ROOM101\": [0, 1], ... }\r\n     * DataModule.get().verts // Returns: [{x: 100, y: 200}, ...]\r\n     */\r\n    async function initialize() {\r\n        try {\r\n            const [distMatrix, nextMatrix, rooms, verts, imgs] = await Promise.all([\r\n                fetchJSON('../src/elements/DistanceMatrix.json'),\r\n                fetchJSON('../src/elements/PrecomputedPaths.json'),\r\n                fetchJSON('../src/elements/SLAVEWORK.json').then(flipKeyValuePairWithMultiNodes),\r\n                fetchJSON('../src/elements/Vertices.json'),\r\n                fetchJSON('../src/elements/StreetView.json')\r\n            ]);\r\n            \r\n            Object.assign(data, { distMatrix, nextMatrix, rooms, verts, imgs });\r\n        } catch (error) {\r\n            console.error('Initialization failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    return {\r\n        fetchJSON,\r\n        initialize,\r\n        get: () => data\r\n    };\r\n})();"],"mappings":"AAAA,OAASA,8BAA8B,KAAQ,qBAAqB,CACpE;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAI,UAAW,CAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,KAAM,CAAAC,IAAI,CAAG,CACTC,UAAU,CAAE,EAAE,CACdC,UAAU,CAAE,EAAE,CACdC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EAAE,CACTC,IAAI,CAAE,EACV,CAAC,CAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,cAAe,CAAAC,SAASA,CAACC,GAAG,CAAE,CAC1B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,GAAG,CAAC,CACjC,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,wBAAAC,MAAA,CAAwBJ,QAAQ,CAACK,MAAM,CAAE,CAAC,CAC3E,MAAO,MAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,oBAAAH,MAAA,CAAoBL,GAAG,MAAKQ,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACI,cAAe,CAAAE,UAAUA,CAAA,CAAG,CACxB,GAAI,CACA,KAAM,CAAChB,UAAU,CAAEC,UAAU,CAAEC,KAAK,CAAEC,KAAK,CAAEC,IAAI,CAAC,CAAG,KAAM,CAAAa,OAAO,CAACC,GAAG,CAAC,CACnEb,SAAS,CAAC,qCAAqC,CAAC,CAChDA,SAAS,CAAC,uCAAuC,CAAC,CAClDA,SAAS,CAAC,gCAAgC,CAAC,CAACc,IAAI,CAACtB,8BAA8B,CAAC,CAChFQ,SAAS,CAAC,+BAA+B,CAAC,CAC1CA,SAAS,CAAC,iCAAiC,CAAC,CAC/C,CAAC,CAEFe,MAAM,CAACC,MAAM,CAACtB,IAAI,CAAE,CAAEC,UAAU,CAAEC,UAAU,CAAEC,KAAK,CAAEC,KAAK,CAAEC,IAAK,CAAC,CAAC,CACvE,CAAE,MAAOU,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA,MAAO,CACHT,SAAS,CACTW,UAAU,CACVM,GAAG,CAAEA,CAAA,GAAMvB,IACf,CAAC,CACL,CAAC,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}