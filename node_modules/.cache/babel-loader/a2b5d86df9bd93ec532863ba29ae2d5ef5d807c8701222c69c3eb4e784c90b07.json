{"ast":null,"code":"/**\r\n * @module ScheduleManager\r\n * @description Handles schedule data persistence and retrieval with built-in validation.\r\n * Provides a robust interface for storing and loading daily room schedules while\r\n * ensuring data integrity through validation and deduplication.\r\n */\n\nexport class ScheduleManager {\n  /**\r\n   * Persists a validated schedule to localStorage with deduplication\r\n   * @param {string} day - Day identifier (e.g., 'monday', 'tuesday')\r\n   * @param {string[]} rooms - Array of room identifiers to save\r\n   * @returns {string[]} Cleaned and deduplicated array of room identifiers\r\n   * @throws {Error} If localStorage is not available or data cannot be serialized\r\n   */\n  static save(day, rooms) {\n    if (!this.validateInput(day, rooms)) return [];\n    const uniqueRooms = [...new Set(rooms)];\n    localStorage.setItem(`${this.STORAGE_PREFIX}${day}`, JSON.stringify(uniqueRooms));\n    return uniqueRooms;\n  }\n\n  /**\r\n   * Retrieves and validates a previously stored schedule\r\n   * @param {string} day - Day identifier to load schedule for\r\n   * @returns {string[]} Array of room identifiers, empty if none found or invalid\r\n   * @throws {Error} If localStorage is not available or data is corrupted\r\n   */\n  static load(day) {\n    try {\n      const data = localStorage.getItem(`${this.STORAGE_PREFIX}${day}`);\n      return data ? [...new Set(JSON.parse(data))] : [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\r\n   * Gets the current day's schedule based on system settings or current day\r\n   * @returns {Array} Array of schedule items with room information\r\n   */\n  static getCurrentSchedule() {\n    // Determine which day type to use (royal or gray)\n    // This could be based on day of week, external calendar, or user preference\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n    // Simple algorithm: odd days = royal, even days = gray\n    // This is just a placeholder logic - adapt to your actual business rules\n    const dayType = dayOfWeek % 2 === 0 ? 'gray' : 'royal';\n\n    // Get rooms for the selected day\n    const rooms = this.load(dayType);\n\n    // Format into schedule objects with times\n    // In a real app, you might have actual start/end times stored\n    return rooms.map((room, index) => {\n      // Create fake class times starting from 8:00 AM, each class 1 hour apart\n      const startHour = 8 + index;\n      const endHour = startHour + 1;\n      return {\n        room: room,\n        startTime: new Date(today.setHours(startHour, 0, 0, 0)).toISOString(),\n        endTime: new Date(today.setHours(endHour, 0, 0, 0)).toISOString(),\n        subject: `Class ${index + 1}`\n      };\n    });\n  }\n\n  /**\r\n   * Validates input parameters for schedule operations\r\n   * @private\r\n   * @param {string} day - Day identifier to validate\r\n   * @param {any[]} rooms - Array to validate as room list\r\n   * @returns {boolean} True if inputs are valid, false otherwise\r\n   */\n  static validateInput(day, rooms) {\n    return day && Array.isArray(rooms);\n  }\n}\n/**\r\n * @static\r\n * @description Prefix used for localStorage keys to avoid naming conflicts\r\n * with other stored data in the application\r\n */\nScheduleManager.STORAGE_PREFIX = 'schedule_';","map":{"version":3,"names":["ScheduleManager","save","day","rooms","validateInput","uniqueRooms","Set","localStorage","setItem","STORAGE_PREFIX","JSON","stringify","load","data","getItem","parse","getCurrentSchedule","today","Date","dayOfWeek","getDay","dayType","map","room","index","startHour","endHour","startTime","setHours","toISOString","endTime","subject","Array","isArray"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/ScheduleManager.js"],"sourcesContent":["/**\r\n * @module ScheduleManager\r\n * @description Handles schedule data persistence and retrieval with built-in validation.\r\n * Provides a robust interface for storing and loading daily room schedules while\r\n * ensuring data integrity through validation and deduplication.\r\n */\r\n\r\nexport class ScheduleManager {\r\n    /**\r\n     * @static\r\n     * @description Prefix used for localStorage keys to avoid naming conflicts\r\n     * with other stored data in the application\r\n     */\r\n    static STORAGE_PREFIX = 'schedule_';\r\n    \r\n    /**\r\n     * Persists a validated schedule to localStorage with deduplication\r\n     * @param {string} day - Day identifier (e.g., 'monday', 'tuesday')\r\n     * @param {string[]} rooms - Array of room identifiers to save\r\n     * @returns {string[]} Cleaned and deduplicated array of room identifiers\r\n     * @throws {Error} If localStorage is not available or data cannot be serialized\r\n     */\r\n    static save(day, rooms) {\r\n        if (!this.validateInput(day, rooms)) return [];\r\n        \r\n        const uniqueRooms = [...new Set(rooms)];\r\n        localStorage.setItem(\r\n            `${this.STORAGE_PREFIX}${day}`, \r\n            JSON.stringify(uniqueRooms)\r\n        );\r\n        return uniqueRooms;\r\n    }\r\n\r\n    /**\r\n     * Retrieves and validates a previously stored schedule\r\n     * @param {string} day - Day identifier to load schedule for\r\n     * @returns {string[]} Array of room identifiers, empty if none found or invalid\r\n     * @throws {Error} If localStorage is not available or data is corrupted\r\n     */\r\n    static load(day) {\r\n        try {\r\n            const data = localStorage.getItem(`${this.STORAGE_PREFIX}${day}`);\r\n            return data ? [...new Set(JSON.parse(data))] : [];\r\n        } catch {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current day's schedule based on system settings or current day\r\n     * @returns {Array} Array of schedule items with room information\r\n     */\r\n    static getCurrentSchedule() {\r\n        // Determine which day type to use (royal or gray)\r\n        // This could be based on day of week, external calendar, or user preference\r\n        const today = new Date();\r\n        const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n        \r\n        // Simple algorithm: odd days = royal, even days = gray\r\n        // This is just a placeholder logic - adapt to your actual business rules\r\n        const dayType = (dayOfWeek % 2 === 0) ? 'gray' : 'royal';\r\n        \r\n        // Get rooms for the selected day\r\n        const rooms = this.load(dayType);\r\n        \r\n        // Format into schedule objects with times\r\n        // In a real app, you might have actual start/end times stored\r\n        return rooms.map((room, index) => {\r\n            // Create fake class times starting from 8:00 AM, each class 1 hour apart\r\n            const startHour = 8 + index;\r\n            const endHour = startHour + 1;\r\n            \r\n            return {\r\n                room: room,\r\n                startTime: new Date(today.setHours(startHour, 0, 0, 0)).toISOString(),\r\n                endTime: new Date(today.setHours(endHour, 0, 0, 0)).toISOString(),\r\n                subject: `Class ${index + 1}`\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validates input parameters for schedule operations\r\n     * @private\r\n     * @param {string} day - Day identifier to validate\r\n     * @param {any[]} rooms - Array to validate as room list\r\n     * @returns {boolean} True if inputs are valid, false otherwise\r\n     */\r\n    static validateInput(day, rooms) {\r\n        return day && Array.isArray(rooms);\r\n    }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,eAAe,CAAC;EAQzB;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,IAAIA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAACC,aAAa,CAACF,GAAG,EAAEC,KAAK,CAAC,EAAE,OAAO,EAAE;IAE9C,MAAME,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACH,KAAK,CAAC,CAAC;IACvCI,YAAY,CAACC,OAAO,CAChB,GAAG,IAAI,CAACC,cAAc,GAAGP,GAAG,EAAE,EAC9BQ,IAAI,CAACC,SAAS,CAACN,WAAW,CAC9B,CAAC;IACD,OAAOA,WAAW;EACtB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOO,IAAIA,CAACV,GAAG,EAAE;IACb,IAAI;MACA,MAAMW,IAAI,GAAGN,YAAY,CAACO,OAAO,CAAC,GAAG,IAAI,CAACL,cAAc,GAAGP,GAAG,EAAE,CAAC;MACjE,OAAOW,IAAI,GAAG,CAAC,GAAG,IAAIP,GAAG,CAACI,IAAI,CAACK,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;IACrD,CAAC,CAAC,MAAM;MACJ,OAAO,EAAE;IACb;EACJ;;EAEA;AACJ;AACA;AACA;EACI,OAAOG,kBAAkBA,CAAA,EAAG;IACxB;IACA;IACA,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;;IAElC;IACA;IACA,MAAMC,OAAO,GAAIF,SAAS,GAAG,CAAC,KAAK,CAAC,GAAI,MAAM,GAAG,OAAO;;IAExD;IACA,MAAMhB,KAAK,GAAG,IAAI,CAACS,IAAI,CAACS,OAAO,CAAC;;IAEhC;IACA;IACA,OAAOlB,KAAK,CAACmB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC9B;MACA,MAAMC,SAAS,GAAG,CAAC,GAAGD,KAAK;MAC3B,MAAME,OAAO,GAAGD,SAAS,GAAG,CAAC;MAE7B,OAAO;QACHF,IAAI,EAAEA,IAAI;QACVI,SAAS,EAAE,IAAIT,IAAI,CAACD,KAAK,CAACW,QAAQ,CAACH,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;QACrEC,OAAO,EAAE,IAAIZ,IAAI,CAACD,KAAK,CAACW,QAAQ,CAACF,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;QACjEE,OAAO,EAAE,SAASP,KAAK,GAAG,CAAC;MAC/B,CAAC;IACL,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOpB,aAAaA,CAACF,GAAG,EAAEC,KAAK,EAAE;IAC7B,OAAOD,GAAG,IAAI8B,KAAK,CAACC,OAAO,CAAC9B,KAAK,CAAC;EACtC;AACJ;AAnFI;AACJ;AACA;AACA;AACA;AALaH,eAAe,CAMjBS,cAAc,GAAG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}