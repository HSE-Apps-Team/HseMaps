{"ast":null,"code":"import { StateManager } from './StateManager.js';\nimport { RenderingModule } from './RenderingModule.js';\nimport { UtilityModule } from './UtilityModule.js';\nimport { DOMCache } from './DOMCache.js';\nimport { Config } from '../config/config.js';\n\n/**\r\n * EventHandlingModule - Manages UI event handling and synchronization\r\n * Coordinates scroll position, slider value, and agent movement\r\n * \r\n * @module EventHandlingModule\r\n */\nexport const EventHandlingModule = {\n  markShortestPathFromInput() {\n    RenderingModule.refresh();\n    const progbar = DOMCache[Config.SVG.SELECTORS.PROGBAR];\n    const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\n    if (progbar && scroll) {\n      progbar.value = 0;\n      scroll.scrollTop = 0;\n    }\n    const start = document.getElementById(\"start\").value.toUpperCase();\n    const end = document.getElementById(\"end\").value.toUpperCase();\n    UtilityModule.markShortestPath(start, end);\n    UtilityModule.configureScroll();\n  },\n  /**\r\n   * Handles navigation through schedule waypoints\r\n   * Updates input fields and triggers path calculation\r\n   * \r\n   * @example\r\n   * // Given schedule input \"ROOM101,ROOM102,ROOM103\"\r\n   * navSchedule()  \r\n   * // Sets start=\"ROOM101\", end=\"ROOM102\"\r\n   * // Next call sets start=\"ROOM102\", end=\"ROOM103\"\r\n   * // Next call resets to beginning\r\n   */\n  navSchedule() {\n    RenderingModule.refresh();\n    const sched = document.getElementById(\"sched\");\n    const classes = sched.value.split(\",\");\n    const iterator = StateManager.get('iterator');\n    const from = classes[iterator - 1];\n    const to = classes[iterator];\n    document.getElementById(\"start\").value = from;\n    document.getElementById(\"end\").value = to;\n    this.markShortestPathFromInput();\n    StateManager.set('iterator', iterator + 1);\n    if (iterator === classes.length - 1) StateManager.set('iterator', 1);\n  },\n  /**\r\n   * Synchronizes scroll position with slider value and updates agent\r\n   * Called on scroll events to maintain visual synchronization\r\n   * \r\n   * @example Input/Output\r\n   * // When user scrolls to position 150:\r\n   * // scroll.scrollTop = 150\r\n   * // -> sets slider.value = 150\r\n   * // -> triggers agent update at position 150\r\n   * \r\n   * @example Usage\r\n   * const scroll = document.getElementById(\"scroll\");\r\n   * scroll.scrollTop = 100;\r\n   * updateSliderValue();\r\n   * // Results in:\r\n   * // - slider.value = 100\r\n   * // - agent position updated to 100\r\n   */\n  updateSliderValue() {\n    const slider = DOMCache[Config.SVG.SELECTORS.PROGBAR];\n    const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\n    if (slider && scroll) {\n      slider.value = scroll.scrollTop;\n      UtilityModule.updateAgent();\n    }\n  },\n  initializeEventListeners() {\n    // Wait for next tick to ensure DOM is ready\n    setTimeout(() => {\n      const scroll = document.getElementById('scroll');\n      const progbar = document.getElementById('progbar');\n      if (scroll && progbar) {\n        scroll.onscroll = this.updateSliderValue;\n        progbar.oninput = () => UtilityModule.updateAgent();\n      } else {\n        console.warn('Navigation controls not found');\n      }\n    }, 0);\n  }\n};\n\n/**\r\n * Event Bindings\r\n * Connects DOM events to handler functions\r\n * \r\n * @example Scroll Event\r\n * // When user scrolls the container:\r\n * scroll.onscroll -> updateSliderValue() -> UtilityModule.updateAgent()\r\n * \r\n * @example Slider Input\r\n * // When user moves the slider:\r\n * progbar.oninput -> UtilityModule.updateAgent()\r\n */\n\n// Direct scroll event binding\ndocument.getElementById(\"scroll\").onscroll = () => EventHandlingModule.updateSliderValue();\n\n// Direct slider input binding\ndocument.getElementById(\"progbar\").oninput = () => UtilityModule.updateAgent();\n\n/**\r\n * Updates the body's data-theme attribute based on the selected theme\r\n * \r\n * @example\r\n * // When user selects \"dark\" from the theme dropdown:\r\n * // themeDropdown.value = \"dark\"\r\n * // -> sets document.body.dataset.theme = \"dark\"\r\n */\nfunction updateTheme() {\n  const themeDropdown = document.getElementById(\"theme-dropdown\");\n  const selectedTheme = themeDropdown.value;\n  document.body.dataset.theme = selectedTheme;\n}\n\n// Bind theme dropdown change event to updateTheme function\ndocument.getElementById(\"theme-dropdown\").onchange = updateTheme;","map":{"version":3,"names":["StateManager","RenderingModule","UtilityModule","DOMCache","Config","EventHandlingModule","markShortestPathFromInput","refresh","progbar","SVG","SELECTORS","PROGBAR","scroll","SCROLL","value","scrollTop","start","document","getElementById","toUpperCase","end","markShortestPath","configureScroll","navSchedule","sched","classes","split","iterator","get","from","to","set","length","updateSliderValue","slider","updateAgent","initializeEventListeners","setTimeout","onscroll","oninput","console","warn","updateTheme","themeDropdown","selectedTheme","body","dataset","theme","onchange"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/EventHandlingModule.js"],"sourcesContent":["import { StateManager } from './StateManager.js';\r\nimport { RenderingModule } from './RenderingModule.js';\r\nimport { UtilityModule } from './UtilityModule.js';\r\nimport { DOMCache } from './DOMCache.js';\r\nimport { Config } from '../config/config.js';\r\n\r\n/**\r\n * EventHandlingModule - Manages UI event handling and synchronization\r\n * Coordinates scroll position, slider value, and agent movement\r\n * \r\n * @module EventHandlingModule\r\n */\r\nexport const EventHandlingModule = {\r\n    markShortestPathFromInput() {\r\n        RenderingModule.refresh();\r\n        const progbar = DOMCache[Config.SVG.SELECTORS.PROGBAR];\r\n        const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\r\n        if (progbar && scroll) {\r\n            progbar.value = 0;\r\n            scroll.scrollTop = 0;\r\n        }\r\n        const start = document.getElementById(\"start\").value.toUpperCase();\r\n        const end = document.getElementById(\"end\").value.toUpperCase();\r\n        UtilityModule.markShortestPath(start, end);\r\n        UtilityModule.configureScroll();\r\n    },\r\n\r\n    /**\r\n     * Handles navigation through schedule waypoints\r\n     * Updates input fields and triggers path calculation\r\n     * \r\n     * @example\r\n     * // Given schedule input \"ROOM101,ROOM102,ROOM103\"\r\n     * navSchedule()  \r\n     * // Sets start=\"ROOM101\", end=\"ROOM102\"\r\n     * // Next call sets start=\"ROOM102\", end=\"ROOM103\"\r\n     * // Next call resets to beginning\r\n     */\r\n    navSchedule() {\r\n        RenderingModule.refresh();\r\n        const sched = document.getElementById(\"sched\");\r\n        const classes = sched.value.split(\",\");\r\n        const iterator = StateManager.get('iterator');\r\n        const from = classes[iterator - 1];\r\n        const to = classes[iterator];\r\n        document.getElementById(\"start\").value = from;\r\n        document.getElementById(\"end\").value = to;\r\n        this.markShortestPathFromInput();\r\n        StateManager.set('iterator', iterator + 1);\r\n        if (iterator === classes.length - 1) StateManager.set('iterator', 1);\r\n    },\r\n\r\n    /**\r\n     * Synchronizes scroll position with slider value and updates agent\r\n     * Called on scroll events to maintain visual synchronization\r\n     * \r\n     * @example Input/Output\r\n     * // When user scrolls to position 150:\r\n     * // scroll.scrollTop = 150\r\n     * // -> sets slider.value = 150\r\n     * // -> triggers agent update at position 150\r\n     * \r\n     * @example Usage\r\n     * const scroll = document.getElementById(\"scroll\");\r\n     * scroll.scrollTop = 100;\r\n     * updateSliderValue();\r\n     * // Results in:\r\n     * // - slider.value = 100\r\n     * // - agent position updated to 100\r\n     */\r\n    updateSliderValue() {\r\n        const slider = DOMCache[Config.SVG.SELECTORS.PROGBAR];\r\n        const scroll = DOMCache[Config.SVG.SELECTORS.SCROLL];\r\n        if (slider && scroll) {\r\n            slider.value = scroll.scrollTop;\r\n            UtilityModule.updateAgent();\r\n        }\r\n    },\r\n\r\n    initializeEventListeners() {\r\n        // Wait for next tick to ensure DOM is ready\r\n        setTimeout(() => {\r\n            const scroll = document.getElementById('scroll');\r\n            const progbar = document.getElementById('progbar');\r\n            \r\n            if (scroll && progbar) {\r\n                scroll.onscroll = this.updateSliderValue;\r\n                progbar.oninput = () => UtilityModule.updateAgent();\r\n            } else {\r\n                console.warn('Navigation controls not found');\r\n            }\r\n        }, 0);\r\n    }\r\n};\r\n\r\n/**\r\n * Event Bindings\r\n * Connects DOM events to handler functions\r\n * \r\n * @example Scroll Event\r\n * // When user scrolls the container:\r\n * scroll.onscroll -> updateSliderValue() -> UtilityModule.updateAgent()\r\n * \r\n * @example Slider Input\r\n * // When user moves the slider:\r\n * progbar.oninput -> UtilityModule.updateAgent()\r\n */\r\n\r\n// Direct scroll event binding\r\ndocument.getElementById(\"scroll\").onscroll = () => EventHandlingModule.updateSliderValue();\r\n\r\n// Direct slider input binding\r\ndocument.getElementById(\"progbar\").oninput = () => UtilityModule.updateAgent();\r\n\r\n/**\r\n * Updates the body's data-theme attribute based on the selected theme\r\n * \r\n * @example\r\n * // When user selects \"dark\" from the theme dropdown:\r\n * // themeDropdown.value = \"dark\"\r\n * // -> sets document.body.dataset.theme = \"dark\"\r\n */\r\nfunction updateTheme() {\r\n    const themeDropdown = document.getElementById(\"theme-dropdown\");\r\n    const selectedTheme = themeDropdown.value;\r\n    document.body.dataset.theme = selectedTheme;\r\n}\r\n\r\n// Bind theme dropdown change event to updateTheme function\r\ndocument.getElementById(\"theme-dropdown\").onchange = updateTheme;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}