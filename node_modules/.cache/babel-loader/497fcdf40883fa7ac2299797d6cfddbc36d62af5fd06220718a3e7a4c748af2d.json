{"ast":null,"code":"/**\r\n * @module RenderingModule\r\n * @description Handles SVG rendering and manipulation of path visualizations\r\n */\n\nimport { Config } from '../config/config.js';\nimport { SVGCreator } from './SVGCreator.js';\nimport { StateManager } from './StateManager.js';\nimport { UtilityModule } from './UtilityModule.js';\nexport const RenderingModule = {\n  /**\r\n   * @function createLine\r\n   * @param {string} points - SVG points string for polyline\r\n   * @param {SVGElement} [graph] - Parent SVG group element\r\n   * @returns {SVGPolylineElement|null} Created line element or null if failed\r\n   * @description Creates an SVG polyline element for path visualization\r\n   */\n  createLine(points, graph = document.querySelector(\"svg > g > g > g\")) {\n    if (!points || !graph) return null;\n    const path = SVGCreator.createElement('polyline', {\n      points,\n      class: 'line gen'\n    });\n    graph.insertAdjacentElement(\"beforeend\", path);\n    return path;\n  },\n  /**\r\n   * @function generateMask\r\n   * @async\r\n   * @param {string} points - SVG points string for masking\r\n   * @param {string} source - Image source URL\r\n   * @param {string} floor - Floor identifier\r\n   * @returns {Promise<void>}\r\n   * @description Generates a masked image for floor transitions\r\n   */\n  async generateMask(points, source, floor) {\n    if (!points || !source || !floor) return;\n    const masks = StateManager.get('maskedImages') || {};\n    if (masks[floor]) return;\n    const response = await fetch(source, {\n      cache: 'force-cache'\n    });\n    const bitmap = await createImageBitmap(await response.blob());\n    const canvas = new OffscreenCanvas(2048, 1308);\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(bitmap, 0, 0);\n    ctx.globalCompositeOperation = 'destination-in';\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, 2048, 1308);\n    const coords = points.split(' ').map(p => p.split(',').map(Number));\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 50;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    coords.forEach(([x, y], i) => i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y));\n    ctx.stroke();\n    const resultBlob = await canvas.convertToBlob();\n    masks[floor] = URL.createObjectURL(resultBlob);\n    StateManager.set('maskedImages', masks);\n    bitmap.close();\n  },\n  /**\r\n   * @function selectPath\r\n   * @async\r\n   * @param {number[]} path - Array of vertex indices\r\n   * @param {Object[]} vertices - Array of vertex coordinates\r\n   * @param {string} [start=\"startpt\"] - Start point ID\r\n   * @param {string} [end=\"endpt\"] - End point ID\r\n   * @param {SVGElement} [graph] - Parent SVG element\r\n   * @returns {Promise<SVGElement|null>} Created path element or null if failed\r\n   * @description Visualizes a selected path on the map\r\n   */\n  async selectPath(path, vertices, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\n    if (!(path !== null && path !== void 0 && path.length) || !vertices) return null;\n    const masks = StateManager.get('maskedImages');\n    if (!masks) return null;\n    const floor = path[0] > Config.THRESHOLD.FLOOR_CHANGE ? 'comb' : 'main';\n    document.querySelector(Config.SVG.SELECTORS.IMAGE).href.baseVal = masks[floor];\n    const points = path.map(p => `${vertices[p].x},${vertices[p].y}`).join(' ');\n    const line = this.createLine(points, graph);\n    line.classList.add(\"selected\");\n    [['circle', {\n      cx: vertices[path[0]].x,\n      cy: vertices[path[0]].y,\n      r: 10,\n      id: start\n    }], ['circle', {\n      cx: vertices[path[0]].x,\n      cy: vertices[path[0]].y,\n      r: 10,\n      id: 'agent'\n    }], ['circle', {\n      cx: vertices[path[path.length - 1]].x,\n      cy: vertices[path[path.length - 1]].y,\n      r: 10,\n      id: end\n    }]].forEach(([type, attrs]) => {\n      const element = SVGCreator.createElement(type, attrs, ['gen']);\n      graph.insertAdjacentElement(\"beforeend\", element);\n    });\n    UtilityModule.updateAgent();\n    return line;\n  },\n  /**\r\n   * @function focus\r\n   * @param {SVGElement} element - Element to focus on\r\n   * @param {number} [margin=5] - Margin around focused element\r\n   * @param {SVGElement} [svg] - Parent SVG element\r\n   * @description Adjusts viewport to focus on a specific element\r\n   */\n  focus(element, margin = 5, svg = document.getElementById(\"svg\")) {\n    if (!element || !svg) return;\n    const map = svg.viewBox.baseVal;\n    const focus = element.getBBox();\n    map.x = focus.x - margin / 2;\n    map.y = focus.y - margin / 2;\n    map.width = focus.width + margin;\n    map.height = focus.height + margin;\n  },\n  /**\r\n   * @function refresh\r\n   * @description Clears all generated elements and resets path state\r\n   */\n  refresh() {\n    document.querySelectorAll('.gen').forEach(el => el.remove());\n    StateManager.set('skipStart', () => true);\n    StateManager.set('skipEnd', () => false);\n  },\n  /**\r\n   * @function displayError\r\n   * @param {string} message - Error message to display\r\n   * @description Shows a temporary error message to the user\r\n   */\n  displayError(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error-message';\n    errorDiv.textContent = message;\n    document.body.appendChild(errorDiv);\n    setTimeout(() => errorDiv.remove(), 3000);\n  }\n};","map":{"version":3,"names":["Config","SVGCreator","StateManager","UtilityModule","RenderingModule","createLine","points","graph","document","querySelector","path","createElement","class","insertAdjacentElement","generateMask","source","floor","masks","get","response","fetch","cache","bitmap","createImageBitmap","blob","canvas","OffscreenCanvas","ctx","getContext","drawImage","globalCompositeOperation","fillStyle","fillRect","coords","split","map","p","Number","beginPath","strokeStyle","lineWidth","lineCap","lineJoin","forEach","x","y","i","moveTo","lineTo","stroke","resultBlob","convertToBlob","URL","createObjectURL","set","close","selectPath","vertices","start","end","getElementById","length","THRESHOLD","FLOOR_CHANGE","SVG","SELECTORS","IMAGE","href","baseVal","join","line","classList","add","cx","cy","r","id","type","attrs","element","updateAgent","focus","margin","svg","viewBox","getBBox","width","height","refresh","querySelectorAll","el","remove","displayError","message","errorDiv","className","textContent","body","appendChild","setTimeout"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/RenderingModule.js"],"sourcesContent":["/**\r\n * @module RenderingModule\r\n * @description Handles SVG rendering and manipulation of path visualizations\r\n */\r\n\r\nimport { Config } from '../config/config.js';\r\nimport { SVGCreator } from './SVGCreator.js';\r\nimport { StateManager } from './StateManager.js';\r\nimport { UtilityModule } from './UtilityModule.js';\r\n\r\nexport const RenderingModule = {\r\n    /**\r\n     * @function createLine\r\n     * @param {string} points - SVG points string for polyline\r\n     * @param {SVGElement} [graph] - Parent SVG group element\r\n     * @returns {SVGPolylineElement|null} Created line element or null if failed\r\n     * @description Creates an SVG polyline element for path visualization\r\n     */\r\n    createLine(points, graph = document.querySelector(\"svg > g > g > g\")) {\r\n        if (!points || !graph) return null;\r\n        const path = SVGCreator.createElement('polyline', {\r\n            points,\r\n            class: 'line gen'\r\n        });\r\n        graph.insertAdjacentElement(\"beforeend\", path);\r\n        return path;\r\n    },\r\n\r\n    /**\r\n     * @function generateMask\r\n     * @async\r\n     * @param {string} points - SVG points string for masking\r\n     * @param {string} source - Image source URL\r\n     * @param {string} floor - Floor identifier\r\n     * @returns {Promise<void>}\r\n     * @description Generates a masked image for floor transitions\r\n     */\r\n    async generateMask(points, source, floor) {\r\n        if (!points || !source || !floor) return;\r\n        \r\n        const masks = StateManager.get('maskedImages') || {};\r\n        if (masks[floor]) return;\r\n\r\n        const response = await fetch(source, { cache: 'force-cache' });\r\n        const bitmap = await createImageBitmap(await response.blob());\r\n        const canvas = new OffscreenCanvas(2048, 1308);\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        ctx.drawImage(bitmap, 0, 0);\r\n        ctx.globalCompositeOperation = 'destination-in';\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, 2048, 1308);\r\n        \r\n        const coords = points.split(' ').map(p => p.split(',').map(Number));\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 50;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineJoin = 'round';\r\n        coords.forEach(([x, y], i) => i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y));\r\n        ctx.stroke();\r\n        \r\n        const resultBlob = await canvas.convertToBlob();\r\n        masks[floor] = URL.createObjectURL(resultBlob);\r\n        StateManager.set('maskedImages', masks);\r\n        bitmap.close();\r\n    },\r\n\r\n    /**\r\n     * @function selectPath\r\n     * @async\r\n     * @param {number[]} path - Array of vertex indices\r\n     * @param {Object[]} vertices - Array of vertex coordinates\r\n     * @param {string} [start=\"startpt\"] - Start point ID\r\n     * @param {string} [end=\"endpt\"] - End point ID\r\n     * @param {SVGElement} [graph] - Parent SVG element\r\n     * @returns {Promise<SVGElement|null>} Created path element or null if failed\r\n     * @description Visualizes a selected path on the map\r\n     */\r\n    async selectPath(path, vertices, start = \"startpt\", end = \"endpt\", graph = document.getElementById(\"graph\")) {\r\n        if (!path?.length || !vertices) return null;\r\n\r\n        const masks = StateManager.get('maskedImages');\r\n        if (!masks) return null;\r\n\r\n        const floor = path[0] > Config.THRESHOLD.FLOOR_CHANGE ? 'comb' : 'main';\r\n        document.querySelector(Config.SVG.SELECTORS.IMAGE).href.baseVal = masks[floor];\r\n\r\n        const points = path.map(p => `${vertices[p].x},${vertices[p].y}`).join(' ');\r\n        const line = this.createLine(points, graph);\r\n        line.classList.add(\"selected\");\r\n\r\n        [\r\n            ['circle', { cx: vertices[path[0]].x, cy: vertices[path[0]].y, r: 10, id: start }],\r\n            ['circle', { cx: vertices[path[0]].x, cy: vertices[path[0]].y, r: 10, id: 'agent' }],\r\n            ['circle', { cx: vertices[path[path.length - 1]].x, cy: vertices[path[path.length - 1]].y, r: 10, id: end }]\r\n        ].forEach(([type, attrs]) => {\r\n            const element = SVGCreator.createElement(type, attrs, ['gen']);\r\n            graph.insertAdjacentElement(\"beforeend\", element);\r\n        });\r\n\r\n        UtilityModule.updateAgent();\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * @function focus\r\n     * @param {SVGElement} element - Element to focus on\r\n     * @param {number} [margin=5] - Margin around focused element\r\n     * @param {SVGElement} [svg] - Parent SVG element\r\n     * @description Adjusts viewport to focus on a specific element\r\n     */\r\n    focus(element, margin = 5, svg = document.getElementById(\"svg\")) {\r\n        if (!element || !svg) return;\r\n        const map = svg.viewBox.baseVal;\r\n        const focus = element.getBBox();\r\n        map.x = focus.x - margin / 2;\r\n        map.y = focus.y - margin / 2;\r\n        map.width = focus.width + margin;\r\n        map.height = focus.height + margin;\r\n    },\r\n\r\n    /**\r\n     * @function refresh\r\n     * @description Clears all generated elements and resets path state\r\n     */\r\n    refresh() {\r\n        document.querySelectorAll('.gen').forEach(el => el.remove());\r\n        StateManager.set('skipStart', () => true);\r\n        StateManager.set('skipEnd', () => false);\r\n    },\r\n\r\n    /**\r\n     * @function displayError\r\n     * @param {string} message - Error message to display\r\n     * @description Shows a temporary error message to the user\r\n     */\r\n    displayError(message) {\r\n        const errorDiv = document.createElement('div');\r\n        errorDiv.className = 'error-message';\r\n        errorDiv.textContent = message;\r\n        document.body.appendChild(errorDiv);\r\n        setTimeout(() => errorDiv.remove(), 3000);\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}