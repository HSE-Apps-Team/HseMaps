{"ast":null,"code":"import { Config } from '../config/config.js';\n\n/**\r\n * @module SVGCreator\r\n * @description Provides utilities for creating and configuring SVG elements\r\n * with proper namespace handling and attribute setting.\r\n */\nexport const SVGCreator = {\n  /**\r\n   * Creates an SVG element with specified attributes and class list.\r\n   * @param {string} type - The type of SVG element to create (e.g., 'circle', 'path')\r\n   * @param {Object} [attributes={}] - Key-value pairs of attributes to set on the element\r\n   * @param {string[]} [classList=[]] - Array of CSS classes to apply to the element\r\n   * @returns {SVGElement} The created SVG element\r\n   * @throws {Error} When type is invalid or element creation fails\r\n   */\n  createElement(type, attributes = {}, classList = []) {\n    try {\n      if (!type || typeof type !== 'string') {\n        throw new Error('Invalid SVG element type');\n      }\n      const element = document.createElementNS(Config.SVG.NAMESPACE, type);\n      Object.entries(attributes).forEach(([key, value]) => {\n        try {\n          if (key.includes('.')) {\n            key.split('.').reduce((obj, prop, i, arr) => {\n              if (i === arr.length - 1) {\n                if (obj && obj[prop] && 'value' in obj[prop]) {\n                  obj[prop].value = value;\n                }\n              }\n              return obj ? obj[prop] : null;\n            }, element);\n          } else {\n            element.setAttribute(key, value);\n          }\n        } catch (attrError) {\n          console.warn(`Failed to set attribute ${key}:`, attrError);\n        }\n      });\n      if (Array.isArray(classList) && classList.length) {\n        element.classList.add(...classList.filter(c => typeof c === 'string'));\n      }\n      return element;\n    } catch (error) {\n      console.error('SVG element creation failed:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["Config","SVGCreator","createElement","type","attributes","classList","Error","element","document","createElementNS","SVG","NAMESPACE","Object","entries","forEach","key","value","includes","split","reduce","obj","prop","i","arr","length","setAttribute","attrError","console","warn","Array","isArray","add","filter","c","error"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/SVGCreator.js"],"sourcesContent":["import { Config } from '../config/config.js';\r\n\r\n/**\r\n * @module SVGCreator\r\n * @description Provides utilities for creating and configuring SVG elements\r\n * with proper namespace handling and attribute setting.\r\n */\r\nexport const SVGCreator = {\r\n    /**\r\n     * Creates an SVG element with specified attributes and class list.\r\n     * @param {string} type - The type of SVG element to create (e.g., 'circle', 'path')\r\n     * @param {Object} [attributes={}] - Key-value pairs of attributes to set on the element\r\n     * @param {string[]} [classList=[]] - Array of CSS classes to apply to the element\r\n     * @returns {SVGElement} The created SVG element\r\n     * @throws {Error} When type is invalid or element creation fails\r\n     */\r\n    createElement(type, attributes = {}, classList = []) {\r\n        try {\r\n            if (!type || typeof type !== 'string') {\r\n                throw new Error('Invalid SVG element type');\r\n            }\r\n\r\n            const element = document.createElementNS(Config.SVG.NAMESPACE, type);\r\n\r\n            Object.entries(attributes).forEach(([key, value]) => {\r\n                try {\r\n                    if (key.includes('.')) {\r\n                        key.split('.').reduce((obj, prop, i, arr) => {\r\n                            if (i === arr.length - 1) {\r\n                                if (obj && obj[prop] && 'value' in obj[prop]) {\r\n                                    obj[prop].value = value;\r\n                                }\r\n                            }\r\n                            return obj ? obj[prop] : null;\r\n                        }, element);\r\n                    } else {\r\n                        element.setAttribute(key, value);\r\n                    }\r\n                } catch (attrError) {\r\n                    console.warn(`Failed to set attribute ${key}:`, attrError);\r\n                }\r\n            });\r\n\r\n            if (Array.isArray(classList) && classList.length) {\r\n                element.classList.add(...classList.filter(c => typeof c === 'string'));\r\n            }\r\n\r\n            return element;\r\n        } catch (error) {\r\n            console.error('SVG element creation failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,qBAAqB;;AAE5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAaA,CAACC,IAAI,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAEC,SAAS,GAAG,EAAE,EAAE;IACjD,IAAI;MACA,IAAI,CAACF,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QACnC,MAAM,IAAIG,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MAEA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACT,MAAM,CAACU,GAAG,CAACC,SAAS,EAAER,IAAI,CAAC;MAEpES,MAAM,CAACC,OAAO,CAACT,UAAU,CAAC,CAACU,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;QACjD,IAAI;UACA,IAAID,GAAG,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACnBF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,CAAC,EAAEC,GAAG,KAAK;cACzC,IAAID,CAAC,KAAKC,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE;gBACtB,IAAIJ,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,IAAI,OAAO,IAAID,GAAG,CAACC,IAAI,CAAC,EAAE;kBAC1CD,GAAG,CAACC,IAAI,CAAC,CAACL,KAAK,GAAGA,KAAK;gBAC3B;cACJ;cACA,OAAOI,GAAG,GAAGA,GAAG,CAACC,IAAI,CAAC,GAAG,IAAI;YACjC,CAAC,EAAEd,OAAO,CAAC;UACf,CAAC,MAAM;YACHA,OAAO,CAACkB,YAAY,CAACV,GAAG,EAAEC,KAAK,CAAC;UACpC;QACJ,CAAC,CAAC,OAAOU,SAAS,EAAE;UAChBC,OAAO,CAACC,IAAI,CAAC,2BAA2Bb,GAAG,GAAG,EAAEW,SAAS,CAAC;QAC9D;MACJ,CAAC,CAAC;MAEF,IAAIG,KAAK,CAACC,OAAO,CAACzB,SAAS,CAAC,IAAIA,SAAS,CAACmB,MAAM,EAAE;QAC9CjB,OAAO,CAACF,SAAS,CAAC0B,GAAG,CAAC,GAAG1B,SAAS,CAAC2B,MAAM,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,CAAC;MAC1E;MAEA,OAAO1B,OAAO;IAClB,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}