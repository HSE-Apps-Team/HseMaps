{"ast":null,"code":"import { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\n/**\r\n * DataModule - Manages graph data loading and access for pathfinding\r\n * Handles asynchronous loading of distance matrices, paths, rooms and vertices\r\n * Provides centralized data access through getter\r\n */\nexport const DataModule = function () {\n  /**\r\n   * Internal data store for graph components\r\n   * @type {{\r\n   *   distMatrix: number[][],  // Matrix of distances between vertices\r\n   *   nextMatrix: number[][],  // Next vertex matrix for path reconstruction\r\n   *   rooms: Object<string, number[]>,  // Map of room names to vertex indices\r\n   *   verts: {x: number, y: number}[]  // Array of vertex coordinates\r\n   * }}\r\n   * \r\n   * @example Data structure\r\n   * data = {\r\n   *   distMatrix: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]],\r\n   *   nextMatrix: [[0, 1, null], [1, 1, 2], [null, 2, 2]],\r\n   *   rooms: { \"ROOM101\": [0, 1], \"ROOM102\": [2] },\r\n   *   verts: [{x: 100, y: 200}, {x: 150, y: 200}, {x: 150, y: 250}]\r\n   * }\r\n   */\n  const data = {\n    distMatrix: [],\n    nextMatrix: [],\n    rooms: [],\n    verts: [],\n    imgs: []\n  };\n\n  /**\r\n   * Fetches and parses JSON from given URL\r\n   * @param {string} url - URL to fetch JSON from\r\n   * @returns {Promise<any>} Parsed JSON data\r\n   * @throws {Error} If fetch fails or response is not OK\r\n   * \r\n   * @example\r\n   * await fetchJSON('elements/DistanceMatrix.json')\r\n   * // Returns: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]]\r\n   */\n  async function fetchJSON(url) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      console.error(`Failed to fetch ${url}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Initializes the module by loading all required data files\r\n   * Uses Promise.all for concurrent loading\r\n   * @returns {Promise<void>}\r\n   * @throws {Error} If any data file fails to load\r\n   * \r\n   * @example\r\n   * await DataModule.initialize()\r\n   * // Loads all data files and populates internal data store\r\n   * // After initialization:\r\n   * DataModule.get().rooms // Returns: { \"ROOM101\": [0, 1], ... }\r\n   * DataModule.get().verts // Returns: [{x: 100, y: 200}, ...]\r\n   */\n  async function initialize() {\n    try {\n      const [distMatrix, nextMatrix, rooms, verts, imgs] = await Promise.all([fetchJSON('../src/elements/DistanceMatrix.json'), fetchJSON('../src/elements/PrecomputedPaths.json'), fetchJSON('../src/elements/SLAVEWORK.json').then(flipKeyValuePairWithMultiNodes), fetchJSON('../src/elements/Vertices.json'), fetchJSON('../src/elements/StreetView.json')]);\n      Object.assign(data, {\n        distMatrix,\n        nextMatrix,\n        rooms,\n        verts,\n        imgs\n      });\n    } catch (error) {\n      console.error('Initialization failed:', error);\n      throw error;\n    }\n  }\n  return {\n    fetchJSON,\n    initialize,\n    get: () => data\n  };\n}();","map":{"version":3,"names":["flipKeyValuePairWithMultiNodes","DataModule","data","distMatrix","nextMatrix","rooms","verts","imgs","fetchJSON","url","response","fetch","ok","Error","status","json","error","console","initialize","Promise","all","then","Object","assign","get"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/DataModule.js"],"sourcesContent":["import { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\r\n/**\r\n * DataModule - Manages graph data loading and access for pathfinding\r\n * Handles asynchronous loading of distance matrices, paths, rooms and vertices\r\n * Provides centralized data access through getter\r\n */\r\nexport const DataModule = (function() {\r\n    /**\r\n     * Internal data store for graph components\r\n     * @type {{\r\n     *   distMatrix: number[][],  // Matrix of distances between vertices\r\n     *   nextMatrix: number[][],  // Next vertex matrix for path reconstruction\r\n     *   rooms: Object<string, number[]>,  // Map of room names to vertex indices\r\n     *   verts: {x: number, y: number}[]  // Array of vertex coordinates\r\n     * }}\r\n     * \r\n     * @example Data structure\r\n     * data = {\r\n     *   distMatrix: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]],\r\n     *   nextMatrix: [[0, 1, null], [1, 1, 2], [null, 2, 2]],\r\n     *   rooms: { \"ROOM101\": [0, 1], \"ROOM102\": [2] },\r\n     *   verts: [{x: 100, y: 200}, {x: 150, y: 200}, {x: 150, y: 250}]\r\n     * }\r\n     */\r\n    const data = {\r\n        distMatrix: [],\r\n        nextMatrix: [],\r\n        rooms: [],\r\n        verts: [],\r\n        imgs: []\r\n    };\r\n\r\n    /**\r\n     * Fetches and parses JSON from given URL\r\n     * @param {string} url - URL to fetch JSON from\r\n     * @returns {Promise<any>} Parsed JSON data\r\n     * @throws {Error} If fetch fails or response is not OK\r\n     * \r\n     * @example\r\n     * await fetchJSON('elements/DistanceMatrix.json')\r\n     * // Returns: [[0, 5, Infinity], [5, 0, 10], [Infinity, 10, 0]]\r\n     */\r\n    async function fetchJSON(url) {\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(`Failed to fetch ${url}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the module by loading all required data files\r\n     * Uses Promise.all for concurrent loading\r\n     * @returns {Promise<void>}\r\n     * @throws {Error} If any data file fails to load\r\n     * \r\n     * @example\r\n     * await DataModule.initialize()\r\n     * // Loads all data files and populates internal data store\r\n     * // After initialization:\r\n     * DataModule.get().rooms // Returns: { \"ROOM101\": [0, 1], ... }\r\n     * DataModule.get().verts // Returns: [{x: 100, y: 200}, ...]\r\n     */\r\n    async function initialize() {\r\n        try {\r\n            const [distMatrix, nextMatrix, rooms, verts, imgs] = await Promise.all([\r\n                fetchJSON('../src/elements/DistanceMatrix.json'),\r\n                fetchJSON('../src/elements/PrecomputedPaths.json'),\r\n                fetchJSON('../src/elements/SLAVEWORK.json').then(flipKeyValuePairWithMultiNodes),\r\n                fetchJSON('../src/elements/Vertices.json'),\r\n                fetchJSON('../src/elements/StreetView.json')\r\n                \r\n            ]);\r\n            \r\n            Object.assign(data, { distMatrix, nextMatrix, rooms, verts, imgs });\r\n        } catch (error) {\r\n            console.error('Initialization failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    return {\r\n        fetchJSON,\r\n        initialize,\r\n        get: () => data\r\n    };\r\n})();"],"mappings":"AAAA,SAASA,8BAA8B,QAAQ,uBAAuB;AACtE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAI,YAAW;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,IAAI,GAAG;IACTC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACV,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,eAAeC,SAASA,CAACC,GAAG,EAAE;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3E,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mBAAmBP,GAAG,GAAG,EAAEO,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACf;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,eAAeE,UAAUA,CAAA,EAAG;IACxB,IAAI;MACA,MAAM,CAACf,UAAU,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAG,MAAMY,OAAO,CAACC,GAAG,CAAC,CACnEZ,SAAS,CAAC,qCAAqC,CAAC,EAChDA,SAAS,CAAC,uCAAuC,CAAC,EAClDA,SAAS,CAAC,gCAAgC,CAAC,CAACa,IAAI,CAACrB,8BAA8B,CAAC,EAChFQ,SAAS,CAAC,+BAA+B,CAAC,EAC1CA,SAAS,CAAC,iCAAiC,CAAC,CAE/C,CAAC;MAEFc,MAAM,CAACC,MAAM,CAACrB,IAAI,EAAE;QAAEC,UAAU;QAAEC,UAAU;QAAEC,KAAK;QAAEC,KAAK;QAAEC;MAAK,CAAC,CAAC;IACvE,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ;EAEA,OAAO;IACHR,SAAS;IACTU,UAAU;IACVM,GAAG,EAAEA,CAAA,KAAMtB;EACf,CAAC;AACL,CAAC,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}