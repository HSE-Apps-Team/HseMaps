{"ast":null,"code":"/**\r\n * SVGCreator - Utility module for creating SVG elements with attributes\r\n * Handles complex attribute paths and class assignments\r\n * \r\n * @module SVGCreator\r\n */import{Config}from'../config/config.js';export const SVGCreator={/**\r\n     * Creates an SVG element with specified attributes and classes\r\n     * Supports dot notation for complex attribute paths\r\n     * \r\n     * @param {string} type - SVG element type (e.g., 'circle', 'polyline')\r\n     * @param {Object} attributes - Key-value pairs of attributes to set\r\n     * @param {string[]} classList - Array of CSS classes to add\r\n     * @returns {SVGElement} Created SVG element\r\n     * \r\n     * @example Simple circle\r\n     * createElement('circle', {\r\n     *   cx: 100,\r\n     *   cy: 100,\r\n     *   r: 10,\r\n     *   fill: 'red'\r\n     * })\r\n     * // Returns: <circle cx=\"100\" cy=\"100\" r=\"10\" fill=\"red\"/>\r\n     * \r\n     * @example Complex attributes with dot notation\r\n     * createElement('circle', {\r\n     *   'cx.baseVal': 100,\r\n     *   'cy.baseVal': 100,\r\n     *   'r.baseVal': 10\r\n     * })\r\n     * // Returns: <circle> with baseVal properties set\r\n     * // circle.cx.baseVal = 100\r\n     * // circle.cy.baseVal = 100\r\n     * // circle.r.baseVal = 10\r\n     * \r\n     * @example Element with classes\r\n     * createElement('polyline', \r\n     *   { points: '0,0 100,100' },\r\n     *   ['line', 'selected']\r\n     * )\r\n     * // Returns: <polyline points=\"0,0 100,100\" class=\"line selected\"/>\r\n     * \r\n     * @example Mixed attributes\r\n     * createElement('path', {\r\n     *   'd': 'M0 0L100 100',\r\n     *   'stroke-width': 2,\r\n     *   'transform.baseVal.consolidate': null\r\n     * }, ['path', 'animated'])\r\n     * // Returns: <path d=\"M0 0L100 100\" stroke-width=\"2\" class=\"path animated\"/>\r\n     * // with transform.baseVal.consolidate() called\r\n     */createElement(type){let attributes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let classList=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];// Create element with correct namespace\nconst element=document.createElementNS(Config.SVG.NAMESPACE,type);// Apply attributes\nObject.entries(attributes).forEach(_ref=>{let[key,value]=_ref;key.includes('.')// Handle nested properties (e.g., 'cx.baseVal')\n?key.split('.').reduce((obj,prop,i,arr)=>i===arr.length-1?obj[prop].value=value:obj[prop],element)// Set direct attributes\n:element.setAttribute(key,value);});// Add classes if provided\nif(classList.length)element.classList.add(...classList);return element;}};","map":{"version":3,"names":["Config","SVGCreator","createElement","type","attributes","arguments","length","undefined","classList","element","document","createElementNS","SVG","NAMESPACE","Object","entries","forEach","_ref","key","value","includes","split","reduce","obj","prop","i","arr","setAttribute","add"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/SVGCreator.js"],"sourcesContent":["/**\r\n * SVGCreator - Utility module for creating SVG elements with attributes\r\n * Handles complex attribute paths and class assignments\r\n * \r\n * @module SVGCreator\r\n */\r\nimport { Config } from '../config/config.js';\r\n\r\nexport const SVGCreator = {\r\n    /**\r\n     * Creates an SVG element with specified attributes and classes\r\n     * Supports dot notation for complex attribute paths\r\n     * \r\n     * @param {string} type - SVG element type (e.g., 'circle', 'polyline')\r\n     * @param {Object} attributes - Key-value pairs of attributes to set\r\n     * @param {string[]} classList - Array of CSS classes to add\r\n     * @returns {SVGElement} Created SVG element\r\n     * \r\n     * @example Simple circle\r\n     * createElement('circle', {\r\n     *   cx: 100,\r\n     *   cy: 100,\r\n     *   r: 10,\r\n     *   fill: 'red'\r\n     * })\r\n     * // Returns: <circle cx=\"100\" cy=\"100\" r=\"10\" fill=\"red\"/>\r\n     * \r\n     * @example Complex attributes with dot notation\r\n     * createElement('circle', {\r\n     *   'cx.baseVal': 100,\r\n     *   'cy.baseVal': 100,\r\n     *   'r.baseVal': 10\r\n     * })\r\n     * // Returns: <circle> with baseVal properties set\r\n     * // circle.cx.baseVal = 100\r\n     * // circle.cy.baseVal = 100\r\n     * // circle.r.baseVal = 10\r\n     * \r\n     * @example Element with classes\r\n     * createElement('polyline', \r\n     *   { points: '0,0 100,100' },\r\n     *   ['line', 'selected']\r\n     * )\r\n     * // Returns: <polyline points=\"0,0 100,100\" class=\"line selected\"/>\r\n     * \r\n     * @example Mixed attributes\r\n     * createElement('path', {\r\n     *   'd': 'M0 0L100 100',\r\n     *   'stroke-width': 2,\r\n     *   'transform.baseVal.consolidate': null\r\n     * }, ['path', 'animated'])\r\n     * // Returns: <path d=\"M0 0L100 100\" stroke-width=\"2\" class=\"path animated\"/>\r\n     * // with transform.baseVal.consolidate() called\r\n     */\r\n    createElement(type, attributes = {}, classList = []) {\r\n        // Create element with correct namespace\r\n        const element = document.createElementNS(Config.SVG.NAMESPACE, type);\r\n\r\n        // Apply attributes\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            key.includes('.') \r\n                // Handle nested properties (e.g., 'cx.baseVal')\r\n                ? key.split('.').reduce((obj, prop, i, arr) => \r\n                    i === arr.length - 1 ? obj[prop].value = value : obj[prop], element)\r\n                // Set direct attributes\r\n                : element.setAttribute(key, value);\r\n        });\r\n\r\n        // Add classes if provided\r\n        if (classList.length) element.classList.add(...classList);\r\n\r\n        return element;\r\n    }\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,OAASA,MAAM,KAAQ,qBAAqB,CAE5C,MAAO,MAAM,CAAAC,UAAU,CAAG,CACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACIC,aAAaA,CAACC,IAAI,CAAmC,IAAjC,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,IAAE,CAAAG,SAAS,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC/C;AACA,KAAM,CAAAI,OAAO,CAAGC,QAAQ,CAACC,eAAe,CAACX,MAAM,CAACY,GAAG,CAACC,SAAS,CAAEV,IAAI,CAAC,CAEpE;AACAW,MAAM,CAACC,OAAO,CAACX,UAAU,CAAC,CAACY,OAAO,CAACC,IAAA,EAAkB,IAAjB,CAACC,GAAG,CAAEC,KAAK,CAAC,CAAAF,IAAA,CAC5CC,GAAG,CAACE,QAAQ,CAAC,GAAG,CACZ;AAAA,CACEF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,CAAEC,CAAC,CAAEC,GAAG,GACtCD,CAAC,GAAKC,GAAG,CAACpB,MAAM,CAAG,CAAC,CAAGiB,GAAG,CAACC,IAAI,CAAC,CAACL,KAAK,CAAGA,KAAK,CAAGI,GAAG,CAACC,IAAI,CAAC,CAAEf,OAAO,CACvE;AAAA,CACEA,OAAO,CAACkB,YAAY,CAACT,GAAG,CAAEC,KAAK,CAAC,CAC1C,CAAC,CAAC,CAEF;AACA,GAAIX,SAAS,CAACF,MAAM,CAAEG,OAAO,CAACD,SAAS,CAACoB,GAAG,CAAC,GAAGpB,SAAS,CAAC,CAEzD,MAAO,CAAAC,OAAO,CAClB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}