{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _colorCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"colorCache\");\nvar _calculateColor = /*#__PURE__*/_classPrivateFieldLooseKey(\"calculateColor\");\nvar _normalizeProgress = /*#__PURE__*/_classPrivateFieldLooseKey(\"normalizeProgress\");\n/**\r\n * @module ColorModule\r\n * @description Color calculation utilities with memoization\r\n */\n\nexport class ColorModule {\n  /**\r\n   * Calculates progress-based color with caching\r\n   * @param {number} progress - Normalized progress value [0-1]\r\n   * @returns {string} RGB color string\r\n   */\n  static getColor(progress) {\n    const normalizedProgress = _classPrivateFieldLooseBase(this, _normalizeProgress)[_normalizeProgress](progress);\n    const key = Math.round(normalizedProgress * 100);\n    if (!_classPrivateFieldLooseBase(this, _colorCache)[_colorCache].has(key)) {\n      _classPrivateFieldLooseBase(this, _colorCache)[_colorCache].set(key, _classPrivateFieldLooseBase(this, _calculateColor)[_calculateColor](normalizedProgress));\n    }\n    return _classPrivateFieldLooseBase(this, _colorCache)[_colorCache].get(key);\n  }\n\n  /**\r\n   * @private\r\n   * Calculates RGB values based on progress\r\n   */\n}\nfunction _calculateColor2(progress) {\n  if (progress >= 0.99) return 'rgb(0,255,0)';\n  const green = Math.min(progress * 510, 255);\n  const red = progress >= 0.49 ? Math.max(255 - (progress - 0.49) * 510, 0) : 255;\n  return `rgb(${red},${green},0)`;\n}\n/**\r\n * @private\r\n * Ensures progress value is within valid range\r\n */\nfunction _normalizeProgress2(value) {\n  return Math.max(0, Math.min(1, Number(value) || 0));\n}\nObject.defineProperty(ColorModule, _normalizeProgress, {\n  value: _normalizeProgress2\n});\nObject.defineProperty(ColorModule, _calculateColor, {\n  value: _calculateColor2\n});\nObject.defineProperty(ColorModule, _colorCache, {\n  writable: true,\n  value: new Map()\n});","map":{"version":3,"names":["ColorModule","getColor","progress","normalizedProgress","_classPrivateFieldLooseBase","_normalizeProgress","key","Math","round","_colorCache","has","set","_calculateColor","get","_calculateColor2","green","min","red","max","_normalizeProgress2","value","Number","Object","defineProperty","writable","Map"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/ColorModule.js"],"sourcesContent":["/**\r\n * @module ColorModule\r\n * @description Color calculation utilities with memoization\r\n */\r\n\r\nexport class ColorModule {\r\n    static #colorCache = new Map();\r\n    \r\n    /**\r\n     * Calculates progress-based color with caching\r\n     * @param {number} progress - Normalized progress value [0-1]\r\n     * @returns {string} RGB color string\r\n     */\r\n    static getColor(progress) {\r\n        const normalizedProgress = this.#normalizeProgress(progress);\r\n        const key = Math.round(normalizedProgress * 100);\r\n        \r\n        if (!this.#colorCache.has(key)) {\r\n            this.#colorCache.set(key, this.#calculateColor(normalizedProgress));\r\n        }\r\n        \r\n        return this.#colorCache.get(key);\r\n    }\r\n    \r\n    /**\r\n     * @private\r\n     * Calculates RGB values based on progress\r\n     */\r\n    static #calculateColor(progress) {\r\n        if (progress >= 0.99) return 'rgb(0,255,0)';\r\n        \r\n        const green = Math.min(progress * 510, 255);\r\n        const red = progress >= 0.49\r\n            ? Math.max(255 - (progress - 0.49) * 510, 0)\r\n            : 255;\r\n            \r\n        return `rgb(${red},${green},0)`;\r\n    }\r\n    \r\n    /**\r\n     * @private\r\n     * Ensures progress value is within valid range\r\n     */\r\n    static #normalizeProgress(value) {\r\n        return Math.max(0, Math.min(1, Number(value) || 0));\r\n    }\r\n}"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,WAAW,CAAC;EAGrB;AACJ;AACA;AACA;AACA;EACI,OAAOC,QAAQA,CAACC,QAAQ,EAAE;IACtB,MAAMC,kBAAkB,GAAAC,2BAAA,CAAG,IAAI,EAAAC,kBAAA,EAAAA,kBAAA,EAAoBH,QAAQ,CAAC;IAC5D,MAAMI,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACL,kBAAkB,GAAG,GAAG,CAAC;IAEhD,IAAI,CAACC,2BAAA,KAAI,EAAAK,WAAA,EAAAA,WAAA,EAAaC,GAAG,CAACJ,GAAG,CAAC,EAAE;MAC5BF,2BAAA,KAAI,EAAAK,WAAA,EAAAA,WAAA,EAAaE,GAAG,CAACL,GAAG,EAAAF,2BAAA,CAAE,IAAI,EAAAQ,eAAA,EAAAA,eAAA,EAAiBT,kBAAkB,CAAC,CAAC;IACvE;IAEA,OAAOC,2BAAA,KAAI,EAAAK,WAAA,EAAAA,WAAA,EAAaI,GAAG,CAACP,GAAG,CAAC;EACpC;;EAEA;AACJ;AACA;AACA;AAmBA;AAAC,SAAAQ,iBAlB0BZ,QAAQ,EAAE;EAC7B,IAAIA,QAAQ,IAAI,IAAI,EAAE,OAAO,cAAc;EAE3C,MAAMa,KAAK,GAAGR,IAAI,CAACS,GAAG,CAACd,QAAQ,GAAG,GAAG,EAAE,GAAG,CAAC;EAC3C,MAAMe,GAAG,GAAGf,QAAQ,IAAI,IAAI,GACtBK,IAAI,CAACW,GAAG,CAAC,GAAG,GAAG,CAAChB,QAAQ,GAAG,IAAI,IAAI,GAAG,EAAE,CAAC,CAAC,GAC1C,GAAG;EAET,OAAO,OAAOe,GAAG,IAAIF,KAAK,KAAK;AACnC;AAEA;AACJ;AACA;AACA;AAHI,SAAAI,oBAI0BC,KAAK,EAAE;EAC7B,OAAOb,IAAI,CAACW,GAAG,CAAC,CAAC,EAAEX,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEK,MAAM,CAACD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AACvD;AAACE,MAAA,CAAAC,cAAA,CAxCQvB,WAAW,EAAAK,kBAAA;EAAAe,KAAA,EAAAD;AAAA;AAAAG,MAAA,CAAAC,cAAA,CAAXvB,WAAW,EAAAY,eAAA;EAAAQ,KAAA,EAAAN;AAAA;AAAAQ,MAAA,CAAAC,cAAA,CAAXvB,WAAW,EAAAS,WAAA;EAAAe,QAAA;EAAAJ,KAAA,EACC,IAAIK,GAAG,CAAC;AAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}