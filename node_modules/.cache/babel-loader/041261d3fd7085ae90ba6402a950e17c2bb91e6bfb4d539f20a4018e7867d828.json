{"ast":null,"code":"import { Config } from '../config/config.js';\n\n/**\r\n * @module SVGCreator\r\n * @description Provides utilities for creating and configuring SVG elements\r\n * with proper namespace handling and attribute setting.\r\n */\nexport const SVGCreator = {\n  /**\r\n   * Creates an SVG element with specified attributes and class list.\r\n   * @param {string} type - The type of SVG element to create (e.g., 'circle', 'path')\r\n   * @param {Object} [attributes={}] - Key-value pairs of attributes to set on the element\r\n   * @param {string[]} [classList=[]] - Array of CSS classes to apply to the element\r\n   * @returns {SVGElement} The created SVG element\r\n   * @throws {Error} When type is invalid or element creation fails\r\n   */\n  createElement(type, attributes = {}, classList = []) {\n    if (!type) return null;\n    const element = document.createElementNS(Config.SVG.NAMESPACE, type);\n    Object.entries(attributes).forEach(([key, value]) => {\n      if (key.includes('.')) {\n        let obj = element;\n        key.split('.').forEach((prop, i, arr) => {\n          if (i === arr.length - 1 && obj[prop]) {\n            obj[prop].value = value;\n          } else {\n            obj = obj[prop];\n          }\n        });\n      } else {\n        element.setAttribute(key, value);\n      }\n    });\n    if (classList !== null && classList !== void 0 && classList.length) {\n      element.classList.add(...classList);\n    }\n    return element;\n  }\n};","map":{"version":3,"names":["Config","SVGCreator","createElement","type","attributes","classList","element","document","createElementNS","SVG","NAMESPACE","Object","entries","forEach","key","value","includes","obj","split","prop","i","arr","length","setAttribute","add"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/SVGCreator.js"],"sourcesContent":["import { Config } from '../config/config.js';\r\n\r\n/**\r\n * @module SVGCreator\r\n * @description Provides utilities for creating and configuring SVG elements\r\n * with proper namespace handling and attribute setting.\r\n */\r\nexport const SVGCreator = {\r\n    /**\r\n     * Creates an SVG element with specified attributes and class list.\r\n     * @param {string} type - The type of SVG element to create (e.g., 'circle', 'path')\r\n     * @param {Object} [attributes={}] - Key-value pairs of attributes to set on the element\r\n     * @param {string[]} [classList=[]] - Array of CSS classes to apply to the element\r\n     * @returns {SVGElement} The created SVG element\r\n     * @throws {Error} When type is invalid or element creation fails\r\n     */\r\n    createElement(type, attributes = {}, classList = []) {\r\n        if (!type) return null;\r\n        const element = document.createElementNS(Config.SVG.NAMESPACE, type);\r\n\r\n        Object.entries(attributes).forEach(([key, value]) => {\r\n            if (key.includes('.')) {\r\n                let obj = element;\r\n                key.split('.').forEach((prop, i, arr) => {\r\n                    if (i === arr.length - 1 && obj[prop]) {\r\n                        obj[prop].value = value;\r\n                    } else {\r\n                        obj = obj[prop];\r\n                    }\r\n                });\r\n            } else {\r\n                element.setAttribute(key, value);\r\n            }\r\n        });\r\n\r\n        if (classList?.length) {\r\n            element.classList.add(...classList);\r\n        }\r\n\r\n        return element;\r\n    }\r\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,qBAAqB;;AAE5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAaA,CAACC,IAAI,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAEC,SAAS,GAAG,EAAE,EAAE;IACjD,IAAI,CAACF,IAAI,EAAE,OAAO,IAAI;IACtB,MAAMG,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACR,MAAM,CAACS,GAAG,CAACC,SAAS,EAAEP,IAAI,CAAC;IAEpEQ,MAAM,CAACC,OAAO,CAACR,UAAU,CAAC,CAACS,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MACjD,IAAID,GAAG,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QACnB,IAAIC,GAAG,GAAGX,OAAO;QACjBQ,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC,CAACL,OAAO,CAAC,CAACM,IAAI,EAAEC,CAAC,EAAEC,GAAG,KAAK;UACrC,IAAID,CAAC,KAAKC,GAAG,CAACC,MAAM,GAAG,CAAC,IAAIL,GAAG,CAACE,IAAI,CAAC,EAAE;YACnCF,GAAG,CAACE,IAAI,CAAC,CAACJ,KAAK,GAAGA,KAAK;UAC3B,CAAC,MAAM;YACHE,GAAG,GAAGA,GAAG,CAACE,IAAI,CAAC;UACnB;QACJ,CAAC,CAAC;MACN,CAAC,MAAM;QACHb,OAAO,CAACiB,YAAY,CAACT,GAAG,EAAEC,KAAK,CAAC;MACpC;IACJ,CAAC,CAAC;IAEF,IAAIV,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEiB,MAAM,EAAE;MACnBhB,OAAO,CAACD,SAAS,CAACmB,GAAG,CAAC,GAAGnB,SAAS,CAAC;IACvC;IAEA,OAAOC,OAAO;EAClB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}