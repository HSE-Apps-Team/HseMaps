{"ast":null,"code":"/**\r\n * @module DataModule\r\n * @description Manages loading and initialization of navigation data\r\n */\n\nimport { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\nexport const DataModule = function () {\n  /**\r\n   * @type {Object} Internal data storage\r\n   */\n  const data = {\n    distMatrix: [],\n    nextMatrix: [],\n    rooms: [],\n    verts: [],\n    imgs: []\n  };\n\n  /**\r\n   * @function validateData\r\n   * @private\r\n   * @param {Object} dataset - Data to validate\r\n   * @returns {Object} Validated dataset\r\n   * @throws {Error} If dataset is invalid\r\n   */\n  function validateData(dataset) {\n    if (!dataset || typeof dataset !== 'object') {\n      throw new Error('Invalid dataset structure');\n    }\n    return dataset;\n  }\n\n  /**\r\n   * @function initialize\r\n   * @async\r\n   * @description Loads and initializes all required navigation data\r\n   * @throws {Error} If initialization fails\r\n   */\n  async function initialize() {\n    try {\n      const [distMatrix, nextMatrix, rawRooms, verts, imgs] = await Promise.all([validateData(require('../elements/DistanceMatrix.json')), validateData(require('../elements/PrecomputedPaths.json')), validateData(require('../elements/SLAVEWORK.json')), validateData(require('../elements/Vertices.json')), validateData(require('../elements/StreetView.json'))]);\n      const rooms = flipKeyValuePairWithMultiNodes(rawRooms);\n      Object.assign(data, {\n        distMatrix,\n        nextMatrix,\n        rooms,\n        verts,\n        imgs\n      });\n    } catch (error) {\n      console.error('Data initialization failed:', error);\n      throw new Error('Failed to initialize navigation data');\n    }\n  }\n  return {\n    initialize,\n    get: key => key ? data[key] : data,\n    isInitialized: () => Object.values(data).every(v => v && v.length > 0)\n  };\n}();","map":{"version":3,"names":["flipKeyValuePairWithMultiNodes","DataModule","data","distMatrix","nextMatrix","rooms","verts","imgs","validateData","dataset","Error","initialize","rawRooms","Promise","all","require","Object","assign","error","console","get","key","isInitialized","values","every","v","length"],"sources":["C:/Users/rexrt/Downloads/hsenavrepo/HseMaps/src/modules/DataModule.js"],"sourcesContent":["/**\r\n * @module DataModule\r\n * @description Manages loading and initialization of navigation data\r\n */\r\n\r\nimport { flipKeyValuePairWithMultiNodes } from './devTestingModule.js';\r\n\r\nexport const DataModule = (function() {\r\n    /**\r\n     * @type {Object} Internal data storage\r\n     */\r\n    const data = {\r\n        distMatrix: [],\r\n        nextMatrix: [],\r\n        rooms: [],\r\n        verts: [],\r\n        imgs: []\r\n    };\r\n\r\n    /**\r\n     * @function validateData\r\n     * @private\r\n     * @param {Object} dataset - Data to validate\r\n     * @returns {Object} Validated dataset\r\n     * @throws {Error} If dataset is invalid\r\n     */\r\n    function validateData(dataset) {\r\n        if (!dataset || typeof dataset !== 'object') {\r\n            throw new Error('Invalid dataset structure');\r\n        }\r\n        return dataset;\r\n    }\r\n\r\n    /**\r\n     * @function initialize\r\n     * @async\r\n     * @description Loads and initializes all required navigation data\r\n     * @throws {Error} If initialization fails\r\n     */\r\n    async function initialize() {\r\n        try {\r\n            const [distMatrix, nextMatrix, rawRooms, verts, imgs] = await Promise.all([\r\n                validateData(require('../elements/DistanceMatrix.json')),\r\n                validateData(require('../elements/PrecomputedPaths.json')),\r\n                validateData(require('../elements/SLAVEWORK.json')),\r\n                validateData(require('../elements/Vertices.json')),\r\n                validateData(require('../elements/StreetView.json'))\r\n            ]);\r\n\r\n            const rooms = flipKeyValuePairWithMultiNodes(rawRooms);\r\n            Object.assign(data, { distMatrix, nextMatrix, rooms, verts, imgs });\r\n        } catch (error) {\r\n            console.error('Data initialization failed:', error);\r\n            throw new Error('Failed to initialize navigation data');\r\n        }\r\n    }\r\n\r\n    return {\r\n        initialize,\r\n        get: (key) => key ? data[key] : data,\r\n        isInitialized: () => Object.values(data).every(v => v && v.length > 0)\r\n    };\r\n})();"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,8BAA8B,QAAQ,uBAAuB;AAEtE,OAAO,MAAMC,UAAU,GAAI,YAAW;EAClC;AACJ;AACA;EACI,MAAMC,IAAI,GAAG;IACTC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACV,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASC,YAAYA,CAACC,OAAO,EAAE;IAC3B,IAAI,CAACA,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MACzC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAChD;IACA,OAAOD,OAAO;EAClB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,eAAeE,UAAUA,CAAA,EAAG;IACxB,IAAI;MACA,MAAM,CAACR,UAAU,EAAEC,UAAU,EAAEQ,QAAQ,EAAEN,KAAK,EAAEC,IAAI,CAAC,GAAG,MAAMM,OAAO,CAACC,GAAG,CAAC,CACtEN,YAAY,CAACO,OAAO,CAAC,iCAAiC,CAAC,CAAC,EACxDP,YAAY,CAACO,OAAO,CAAC,mCAAmC,CAAC,CAAC,EAC1DP,YAAY,CAACO,OAAO,CAAC,4BAA4B,CAAC,CAAC,EACnDP,YAAY,CAACO,OAAO,CAAC,2BAA2B,CAAC,CAAC,EAClDP,YAAY,CAACO,OAAO,CAAC,6BAA6B,CAAC,CAAC,CACvD,CAAC;MAEF,MAAMV,KAAK,GAAGL,8BAA8B,CAACY,QAAQ,CAAC;MACtDI,MAAM,CAACC,MAAM,CAACf,IAAI,EAAE;QAAEC,UAAU;QAAEC,UAAU;QAAEC,KAAK;QAAEC,KAAK;QAAEC;MAAK,CAAC,CAAC;IACvE,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAM,IAAIR,KAAK,CAAC,sCAAsC,CAAC;IAC3D;EACJ;EAEA,OAAO;IACHC,UAAU;IACVS,GAAG,EAAGC,GAAG,IAAKA,GAAG,GAAGnB,IAAI,CAACmB,GAAG,CAAC,GAAGnB,IAAI;IACpCoB,aAAa,EAAEA,CAAA,KAAMN,MAAM,CAACO,MAAM,CAACrB,IAAI,CAAC,CAACsB,KAAK,CAACC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,MAAM,GAAG,CAAC;EACzE,CAAC;AACL,CAAC,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}