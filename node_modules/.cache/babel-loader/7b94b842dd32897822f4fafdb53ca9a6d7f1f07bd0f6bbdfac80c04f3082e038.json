{"ast":null,"code":"/**\r\n * ColorModule - Handles color transitions for agent movement visualization\r\n * Provides smooth color interpolation from red -> yellow -> green\r\n * Uses caching to optimize repeated color calculations\r\n */export const ColorModule={/**\r\n     * Returns an RGB color string based on progress value\r\n     * Uses cached values to improve performance\r\n     * \r\n     * Progress transitions:\r\n     * 0.0  -> rgb(255,0,0)    // Red\r\n     * 0.25 -> rgb(255,255,0)  // Yellow \r\n     * 0.5  -> rgb(127,255,0)  // Yellow-Green\r\n     * 0.99 -> rgb(0,255,0)    // Green\r\n     * \r\n     * @param {number} progress - Value between 0 and 1 indicating completion\r\n     * @returns {string} RGB color string\r\n     * \r\n     * @example\r\n     * getColor(0)    // Returns 'rgb(255,0,0)'\r\n     * getColor(0.5)  // Returns 'rgb(127,255,0)'\r\n     * getColor(1)    // Returns 'rgb(0,255,0)'\r\n     */getColor:(()=>{// Cache color values to avoid recalculating\nconst colorCache=new Map();return progress=>{// Round to nearest percent to limit cache size\nconst key=Math.round(progress*100);if(!colorCache.has(key)){// Full completion is always green\nif(progress>=0.99){colorCache.set(key,'rgb(0,255,0)');}else{// Green increases linearly 0->510, capped at 255\nconst green=Math.min(Math.floor(progress*510),255);// Red starts at 255, begins decreasing at progress 0.49\nconst red=progress>=0.49?Math.max(255-Math.floor((progress-0.49)*510),0):255;colorCache.set(key,\"rgb(\".concat(red,\",\").concat(green,\",0)\"));}}return colorCache.get(key);};})()};","map":{"version":3,"names":["ColorModule","getColor","colorCache","Map","progress","key","Math","round","has","set","green","min","floor","red","max","concat","get"],"sources":["C:/Users/ampri/OneDrive/Documents/HseMaps/HseMaps/src/modules/ColorModule.js"],"sourcesContent":["/**\r\n * ColorModule - Handles color transitions for agent movement visualization\r\n * Provides smooth color interpolation from red -> yellow -> green\r\n * Uses caching to optimize repeated color calculations\r\n */\r\nexport const ColorModule = {\r\n    /**\r\n     * Returns an RGB color string based on progress value\r\n     * Uses cached values to improve performance\r\n     * \r\n     * Progress transitions:\r\n     * 0.0  -> rgb(255,0,0)    // Red\r\n     * 0.25 -> rgb(255,255,0)  // Yellow \r\n     * 0.5  -> rgb(127,255,0)  // Yellow-Green\r\n     * 0.99 -> rgb(0,255,0)    // Green\r\n     * \r\n     * @param {number} progress - Value between 0 and 1 indicating completion\r\n     * @returns {string} RGB color string\r\n     * \r\n     * @example\r\n     * getColor(0)    // Returns 'rgb(255,0,0)'\r\n     * getColor(0.5)  // Returns 'rgb(127,255,0)'\r\n     * getColor(1)    // Returns 'rgb(0,255,0)'\r\n     */\r\n    getColor: (() => {\r\n        // Cache color values to avoid recalculating\r\n        const colorCache = new Map();\r\n        \r\n        return (progress) => {\r\n            // Round to nearest percent to limit cache size\r\n            const key = Math.round(progress * 100);\r\n            \r\n            if (!colorCache.has(key)) {\r\n                // Full completion is always green\r\n                if (progress >= 0.99) {\r\n                    colorCache.set(key, 'rgb(0,255,0)');\r\n                } else {\r\n                    // Green increases linearly 0->510, capped at 255\r\n                    const green = Math.min(Math.floor(progress * 510), 255);\r\n                    \r\n                    // Red starts at 255, begins decreasing at progress 0.49\r\n                    const red = progress >= 0.49 \r\n                        ? Math.max(255 - Math.floor((progress - 0.49) * 510), 0)\r\n                        : 255;\r\n                        \r\n                    colorCache.set(key, `rgb(${red},${green},0)`);\r\n                }\r\n            }\r\n            return colorCache.get(key);\r\n        };\r\n    })()\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,WAAW,CAAG,CACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACIC,QAAQ,CAAE,CAAC,IAAM,CACb;AACA,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAE5B,MAAQ,CAAAC,QAAQ,EAAK,CACjB;AACA,KAAM,CAAAC,GAAG,CAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAG,GAAG,CAAC,CAEtC,GAAI,CAACF,UAAU,CAACM,GAAG,CAACH,GAAG,CAAC,CAAE,CACtB;AACA,GAAID,QAAQ,EAAI,IAAI,CAAE,CAClBF,UAAU,CAACO,GAAG,CAACJ,GAAG,CAAE,cAAc,CAAC,CACvC,CAAC,IAAM,CACH;AACA,KAAM,CAAAK,KAAK,CAAGJ,IAAI,CAACK,GAAG,CAACL,IAAI,CAACM,KAAK,CAACR,QAAQ,CAAG,GAAG,CAAC,CAAE,GAAG,CAAC,CAEvD;AACA,KAAM,CAAAS,GAAG,CAAGT,QAAQ,EAAI,IAAI,CACtBE,IAAI,CAACQ,GAAG,CAAC,GAAG,CAAGR,IAAI,CAACM,KAAK,CAAC,CAACR,QAAQ,CAAG,IAAI,EAAI,GAAG,CAAC,CAAE,CAAC,CAAC,CACtD,GAAG,CAETF,UAAU,CAACO,GAAG,CAACJ,GAAG,QAAAU,MAAA,CAASF,GAAG,MAAAE,MAAA,CAAIL,KAAK,OAAK,CAAC,CACjD,CACJ,CACA,MAAO,CAAAR,UAAU,CAACc,GAAG,CAACX,GAAG,CAAC,CAC9B,CAAC,CACL,CAAC,EAAE,CACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}